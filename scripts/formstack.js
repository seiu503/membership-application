window.intialSwiftFormsConfig = {
    FormBASEURL: "https://vaformsdev2app.azurewebsites.net/FormEngine/",
    CDNResourceRoot: "https://formsdev.azureedge.net/cdncontainer/",
    RootElementId: "jsFastForms"
};
window.LoadSwiftForm = function() {
    SetInitialSwiftFormsConfig();
    var parentElem = document.getElementById(intialSwiftFormsConfig.RootElementId);
    var isRegularClassicOrNativeForm = isRegularForm(intialSwiftFormsConfig.RootElementId);
    if (parentElem.nodeName == "SCRIPT") {
        parentElem = parentElem.parentElement;
        if (parentElem.nodeName == "HEAD") {
            parentElem = parentElem.parentElement;
            if (parentElem.getElementsByTagName("body").length == 0) {
                var bodyElem = document.createElement("body");
                parentElem.appendChild(bodyElem);
                parentElem = parentElem.getElementsByTagName("body")[0]
            }
        }
    }
    window.FormBASEURL = intialSwiftFormsConfig.FormBASEURL;
    window.CDNResourceRoot = intialSwiftFormsConfig.CDNResourceRoot;
    var loadCssLink = document.createElement("link");
    loadCssLink.rel = "stylesheet";
    loadCssLink.type = "text/css";
    loadCssLink.href = CDNResourceRoot + "styles/load.css";
    parentElem.appendChild(loadCssLink);
    var loadMainCssLink = document.createElement("link");
    loadMainCssLink.rel = "stylesheet";
    loadMainCssLink.type = "text/css";
    loadMainCssLink.href = CDNResourceRoot + "styles/main.css";
    parentElem.appendChild(loadMainCssLink);
    var dvFastForms = document.createElement("div");
    dvFastForms.id = "dvFastForms";
    dvFastForms.setAttribute("style", "display:none");
    parentElem.appendChild(dvFastForms);
    var dvLoading = document.createElement("div");
    dvLoading.id = "dvLoading";
    dvLoading.setAttribute("class", "ff-load-img");
    parentElem.appendChild(dvLoading);
    if (!isRegularClassicOrNativeForm) {
        var isSourceNative = intialSwiftFormsConfig.IsSourceNative;
        var urlPrefix = getStaticResourcePrefix(intialSwiftFormsConfig.RootElementId, true);
        urlPrefix = "https://" + window.location.hostname + urlPrefix;
        console.log("FORMS SCRIPT LINK:" + urlPrefix);
        var jsLink = document.createElement("script");
        jsLink.type = "text/javascript";
        if (isSourceNative !== undefined && isSourceNative) {
            jsLink.src = urlPrefix + "LightningFormJs/nativelight.min.js"
        } else {
            jsLink.src = urlPrefix + "LightningFormJs/regularlight.min.js"
        }
        parentElem.appendChild(jsLink)
    }
};
DefaultLoadSwiftForm();

function DefaultLoadSwiftForm() {
    if (window.executeDefaultFormLoad === undefined || window.executeDefaultFormLoad === true) {
        LoadSwiftForm();
        window.executeDefaultFormLoad = false
    }
}

function SetInitialSwiftFormsConfig() {
    var formSourceElem = document.getElementById("jsFastForms");
    var currentScriptSRC = "";
    var rootElementId = "jsFastForms";
    if (document.getElementById("jsFastForms") !== null && document.getElementById("jsFastForms").src !== undefined) {
        currentScriptSRC = document.getElementById("jsFastForms").src
    } else {
        if (document.getElementById("jsFastFormsWrapper") !== null && document.getElementById("jsFastFormsWrapper").getAttribute("data-srclink") !== undefined) {
            currentScriptSRC = document.getElementById("jsFastFormsWrapper").getAttribute("data-srclink");
            rootElementId = "jsFastFormsWrapper";
            intialSwiftFormsConfig.IsSourceLightning = true
        }
    }
    intialSwiftFormsConfig.RootElementId = rootElementId;
    console.log("FORMSTACK SCRIPT SOURCE..." + currentScriptSRC);
    if (currentScriptSRC.indexOf("/services/") > 0) {
        intialSwiftFormsConfig.IsSourceNative = true;
        currentScriptSRC = currentScriptSRC.substring(0, currentScriptSRC.indexOf("/services/"));
        var staticResourceUrl = getStaticResourcePrefix(intialSwiftFormsConfig.RootElementId, false) + "ffengine";
        if (isRegularForm(intialSwiftFormsConfig.RootElementId)) {
            staticResourceUrl = partialStaticResourceUrl
        }
        intialSwiftFormsConfig.FormNSPrefix = "VisualAntidote";
        if (staticResourceUrl.toLowerCase().indexOf("visualantidote__ffengine") < 0) {
            intialSwiftFormsConfig.FormNSPrefix = ""
        }
        if (staticResourceUrl.indexOf("/resource/") > 0 && rootElementId != "jsFastForms") {
            intialSwiftFormsConfig.CDNResourceRoot = currentScriptSRC + staticResourceUrl.substring(staticResourceUrl.indexOf("/resource/")) + "/"
        } else {
            intialSwiftFormsConfig.CDNResourceRoot = currentScriptSRC + staticResourceUrl + "/"
        }
        intialSwiftFormsConfig.FormBASEURL = currentScriptSRC + "/"
    } else {
        intialSwiftFormsConfig.FormBASEURL = currentScriptSRC.substring(0, currentScriptSRC.indexOf("Scripts/"));
        intialSwiftFormsConfig.CDNResourceRoot = "https://formsprod.azureedge.net/cdncontainer/";
        if (currentScriptSRC.toLowerCase().indexOf("-api.formstack.io/") > 0 || currentScriptSRC.toLowerCase().indexOf(".azurewebsites.net/") > 0) {
            intialSwiftFormsConfig.CDNResourceRoot = "https://formsdev.azureedge.net/cdncontainer/"
        }
        intialSwiftFormsConfig.IsSourceNative = false
    }
}

function getStaticResourcePrefix(elementid, isscriptlink) {
    var resourceLink = document.getElementById(elementid).getAttribute("data-resourcelink");
    if (isscriptlink) {
        resourceLink = document.getElementById(elementid).getAttribute("data-scriptlink")
    }
    if (resourceLink !== null && isscriptlink && resourceLink.indexOf("LightningFormJs/formcommon.js") > 0) {
        return resourceLink.substring(0, resourceLink.indexOf("LightningFormJs/formcommon.js"))
    } else {
        if (resourceLink !== null && resourceLink.indexOf("ffengine/styles/") > 0) {
            return resourceLink.substring(0, resourceLink.indexOf("ffengine/styles/"))
        }
    }
    return ""
}

function isRegularForm(elementid) {
    if (elementid !== undefined && elementid == "jsFastForms") {
        var sourceLink = document.getElementById(elementid).getAttribute("src");
        if (sourceLink !== null && sourceLink !== "") {
            return true
        }
    }
    return false
}
/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */
;
! function(a, b) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function(a) {
        if (!a.document) {
            throw new Error("jQuery requires a window with a document")
        }
        return b(a)
    } : b(a)
}("undefined" != typeof window ? window : this, function(a, b) {
    var c = [],
        d = a.document,
        e = Object.getPrototypeOf,
        f = c.slice,
        g = c.concat,
        h = c.push,
        i = c.indexOf,
        j = {},
        k = j.toString,
        l = j.hasOwnProperty,
        m = l.toString,
        n = m.call(Object),
        o = {};

    function p(a, b) {
        b = b || d;
        var c = b.createElement("script");
        c.text = a, b.head.appendChild(c).parentNode.removeChild(c)
    }
    var q = "3.2.1",
        r = function(a, b) {
            return new r.fn.init(a, b)
        },
        s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        t = /^-ms-/,
        u = /-([a-z])/g,
        v = function(a, b) {
            return b.toUpperCase()
        };
    r.fn = r.prototype = {
        jquery: q,
        constructor: r,
        length: 0,
        toArray: function() {
            return f.call(this)
        },
        get: function(a) {
            return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a]
        },
        pushStack: function(a) {
            var b = r.merge(this.constructor(), a);
            return b.prevObject = this, b
        },
        each: function(a) {
            return r.each(this, a)
        },
        map: function(a) {
            return this.pushStack(r.map(this, function(b, c) {
                return a.call(b, c, b)
            }))
        },
        slice: function() {
            return this.pushStack(f.apply(this, arguments))
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq(-1)
        },
        eq: function(a) {
            var b = this.length,
                c = +a + (a < 0 ? b : 0);
            return this.pushStack(c >= 0 && c < b ? [this[c]] : [])
        },
        end: function() {
            return this.prevObject || this.constructor()
        },
        push: h,
        sort: c.sort,
        splice: c.splice
    }, r.extend = r.fn.extend = function() {
        var a, b, c, d, e, f, g = arguments[0] || {},
            h = 1,
            i = arguments.length,
            j = !1;
        for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) {
            if (null != (a = arguments[h])) {
                for (b in a) {
                    c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d))
                }
            }
        }
        return g
    }, r.extend({
        expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(a) {
            throw new Error(a)
        },
        noop: function() {},
        isFunction: function(a) {
            return "function" === r.type(a)
        },
        isWindow: function(a) {
            return null != a && a === a.window
        },
        isNumeric: function(a) {
            var b = r.type(a);
            return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a))
        },
        isPlainObject: function(a) {
            var b, c;
            return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n))
        },
        isEmptyObject: function(a) {
            var b;
            for (b in a) {
                return !1
            }
            return !0
        },
        type: function(a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? j[k.call(a)] || "object" : typeof a
        },
        globalEval: function(a) {
            p(a)
        },
        camelCase: function(a) {
            return a.replace(t, "ms-").replace(u, v)
        },
        each: function(a, b) {
            var c, d = 0;
            if (w(a)) {
                for (c = a.length; d < c; d++) {
                    if (b.call(a[d], d, a[d]) === !1) {
                        break
                    }
                }
            } else {
                for (d in a) {
                    if (b.call(a[d], d, a[d]) === !1) {
                        break
                    }
                }
            }
            return a
        },
        trim: function(a) {
            return null == a ? "" : (a + "").replace(s, "")
        },
        makeArray: function(a, b) {
            var c = b || [];
            return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c
        },
        inArray: function(a, b, c) {
            return null == b ? -1 : i.call(b, a, c)
        },
        merge: function(a, b) {
            for (var c = +b.length, d = 0, e = a.length; d < c; d++) {
                a[e++] = b[d]
            }
            return a.length = e, a
        },
        grep: function(a, b, c) {
            for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) {
                d = !b(a[f], f), d !== h && e.push(a[f])
            }
            return e
        },
        map: function(a, b, c) {
            var d, e, f = 0,
                h = [];
            if (w(a)) {
                for (d = a.length; f < d; f++) {
                    e = b(a[f], f, c), null != e && h.push(e)
                }
            } else {
                for (f in a) {
                    e = b(a[f], f, c), null != e && h.push(e)
                }
            }
            return g.apply([], h)
        },
        guid: 1,
        proxy: function(a, b) {
            var c, d, e;
            if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) {
                return d = f.call(arguments, 2), e = function() {
                    return a.apply(b || this, d.concat(f.call(arguments)))
                }, e.guid = a.guid = a.guid || r.guid++, e
            }
        },
        now: Date.now,
        support: o
    }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(a, b) {
        j["[object " + b + "]"] = b.toLowerCase()
    });

    function w(a) {
        var b = !!a && "length" in a && a.length,
            c = r.type(a);
        return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a)
    }
    var x = function(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date,
            v = a.document,
            w = 0,
            x = 0,
            y = ha(),
            z = ha(),
            A = ha(),
            B = function(a, b) {
                return a === b && (l = !0), 0
            },
            C = {}.hasOwnProperty,
            D = [],
            E = D.pop,
            F = D.push,
            G = D.push,
            H = D.slice,
            I = function(a, b) {
                for (var c = 0, d = a.length; c < d; c++) {
                    if (a[c] === b) {
                        return c
                    }
                }
                return -1
            },
            J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            K = "[\\x20\\t\\r\\n\\f]",
            L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
            M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
            N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
            O = new RegExp(K + "+", "g"),
            P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
            Q = new RegExp("^" + K + "*," + K + "*"),
            R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
            S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
            T = new RegExp(N),
            U = new RegExp("^" + L + "$"),
            V = {
                ID: new RegExp("^#(" + L + ")"),
                CLASS: new RegExp("^\\.(" + L + ")"),
                TAG: new RegExp("^(" + L + "|[*])"),
                ATTR: new RegExp("^" + M),
                PSEUDO: new RegExp("^" + N),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + J + ")$", "i"),
                needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i")
            },
            W = /^(?:input|select|textarea|button)$/i,
            X = /^h\d$/i,
            Y = /^[^{]+\{\s*\[native \w/,
            Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            $ = /[+~]/,
            _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
            aa = function(a, b, c) {
                var d = "0x" + b - 65536;
                return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320)
            },
            ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
            ca = function(a, b) {
                return b ? "\0" === a ? "\ufffd" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a
            },
            da = function() {
                m()
            },
            ea = ta(function(a) {
                return a.disabled === !0 && ("form" in a || "label" in a)
            }, {
                dir: "parentNode",
                next: "legend"
            });
        try {
            G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType
        } catch (fa) {
            G = {
                apply: D.length ? function(a, b) {
                    F.apply(a, H.call(b))
                } : function(a, b) {
                    var c = a.length,
                        d = 0;
                    while (a[c++] = b[d++]) {}
                    a.length = c - 1
                }
            }
        }

        function ga(a, b, d, e) {
            var f, h, j, k, l, o, r, s = b && b.ownerDocument,
                w = b ? b.nodeType : 9;
            if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) {
                return d
            }
            if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
                if (11 !== w && (l = Z.exec(a))) {
                    if (f = l[1]) {
                        if (9 === w) {
                            if (!(j = b.getElementById(f))) {
                                return d
                            }
                            if (j.id === f) {
                                return d.push(j), d
                            }
                        } else {
                            if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) {
                                return d.push(j), d
                            }
                        }
                    } else {
                        if (l[2]) {
                            return G.apply(d, b.getElementsByTagName(a)), d
                        }
                        if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) {
                            return G.apply(d, b.getElementsByClassName(f)), d
                        }
                    }
                }
                if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
                    if (1 !== w) {
                        s = b, r = a
                    } else {
                        if ("object" !== b.nodeName.toLowerCase()) {
                            (k = b.getAttribute("id")) ? k = k.replace(ba, ca): b.setAttribute("id", k = u), o = g(a), h = o.length;
                            while (h--) {
                                o[h] = "#" + k + " " + sa(o[h])
                            }
                            r = o.join(","), s = $.test(a) && qa(b.parentNode) || b
                        }
                    }
                    if (r) {
                        try {
                            return G.apply(d, s.querySelectorAll(r)), d
                        } catch (x) {} finally {
                            k === u && b.removeAttribute("id")
                        }
                    }
                }
            }
            return i(a.replace(P, "$1"), b, d, e)
        }

        function ha() {
            var a = [];

            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e
            }
            return b
        }

        function ia(a) {
            return a[u] = !0, a
        }

        function ja(a) {
            var b = n.createElement("fieldset");
            try {
                return !!a(b)
            } catch (c) {
                return !1
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null
            }
        }

        function ka(a, b) {
            var c = a.split("|"),
                e = c.length;
            while (e--) {
                d.attrHandle[c[e]] = b
            }
        }

        function la(a, b) {
            var c = b && a,
                d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;
            if (d) {
                return d
            }
            if (c) {
                while (c = c.nextSibling) {
                    if (c === b) {
                        return -1
                    }
                }
            }
            return a ? 1 : -1
        }

        function ma(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a
            }
        }

        function na(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a
            }
        }

        function oa(a) {
            return function(b) {
                return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a
            }
        }

        function pa(a) {
            return ia(function(b) {
                return b = +b, ia(function(c, d) {
                    var e, f = a([], c.length, b),
                        g = f.length;
                    while (g--) {
                        c[e = f[g]] && (c[e] = !(d[e] = c[e]))
                    }
                })
            })
        }

        function qa(a) {
            return a && "undefined" != typeof a.getElementsByTagName && a
        }
        c = ga.support = {}, f = ga.isXML = function(a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return !!b && "HTML" !== b.nodeName
        }, m = ga.setDocument = function(a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function(a) {
                return a.className = "i", !a.getAttribute("className")
            }), c.getElementsByTagName = ja(function(a) {
                return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length
            }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function(a) {
                return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length
            }), c.getById ? (d.filter.ID = function(a) {
                var b = a.replace(_, aa);
                return function(a) {
                    return a.getAttribute("id") === b
                }
            }, d.find.ID = function(a, b) {
                if ("undefined" != typeof b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c ? [c] : []
                }
            }) : (d.filter.ID = function(a) {
                var b = a.replace(_, aa);
                return function(a) {
                    var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
                    return c && c.value === b
                }
            }, d.find.ID = function(a, b) {
                if ("undefined" != typeof b.getElementById && p) {
                    var c, d, e, f = b.getElementById(a);
                    if (f) {
                        if (c = f.getAttributeNode("id"), c && c.value === a) {
                            return [f]
                        }
                        e = b.getElementsByName(a), d = 0;
                        while (f = e[d++]) {
                            if (c = f.getAttributeNode("id"), c && c.value === a) {
                                return [f]
                            }
                        }
                    }
                    return []
                }
            }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
                return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0
            } : function(a, b) {
                var c, d = [],
                    e = 0,
                    f = b.getElementsByTagName(a);
                if ("*" === a) {
                    while (c = f[e++]) {
                        1 === c.nodeType && d.push(c)
                    }
                    return d
                }
                return f
            }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
                if ("undefined" != typeof b.getElementsByClassName && p) {
                    return b.getElementsByClassName(a)
                }
            }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function(a) {
                o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]")
            }), ja(function(a) {
                a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var b = n.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:")
            })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function(a) {
                c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N)
            }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function(a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a,
                    d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)))
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return !0
                        }
                    }
                }
                return !1
            }, B = b ? function(a, b) {
                if (a === b) {
                    return l = !0, 0
                }
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1)
            } : function(a, b) {
                if (a === b) {
                    return l = !0, 0
                }
                var c, d = 0,
                    e = a.parentNode,
                    f = b.parentNode,
                    g = [a],
                    h = [b];
                if (!e || !f) {
                    return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0
                }
                if (e === f) {
                    return la(a, b)
                }
                c = a;
                while (c = c.parentNode) {
                    g.unshift(c)
                }
                c = b;
                while (c = c.parentNode) {
                    h.unshift(c)
                }
                while (g[d] === h[d]) {
                    d++
                }
                return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0
            }, n) : n
        }, ga.matches = function(a, b) {
            return ga(a, null, null, b)
        }, ga.matchesSelector = function(a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) {
                try {
                    var d = s.call(a, b);
                    if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) {
                        return d
                    }
                } catch (e) {}
            }
            return ga(b, n, null, [a]).length > 0
        }, ga.contains = function(a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b)
        }, ga.attr = function(a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()],
                f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
            return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null
        }, ga.escape = function(a) {
            return (a + "").replace(ba, ca)
        }, ga.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a)
        }, ga.uniqueSort = function(a) {
            var b, d = [],
                e = 0,
                f = 0;
            if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                while (b = a[f++]) {
                    b === a[f] && (e = d.push(f))
                }
                while (e--) {
                    a.splice(d[e], 1)
                }
            }
            return k = null, a
        }, e = ga.getText = function(a) {
            var b, c = "",
                d = 0,
                f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ("string" == typeof a.textContent) {
                        return a.textContent
                    }
                    for (a = a.firstChild; a; a = a.nextSibling) {
                        c += e(a)
                    }
                } else {
                    if (3 === f || 4 === f) {
                        return a.nodeValue
                    }
                }
            } else {
                while (b = a[d++]) {
                    c += e(b)
                }
            }
            return c
        }, d = ga.selectors = {
            cacheLength: 50,
            createPseudo: ia,
            match: V,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(a) {
                    return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4)
                },
                CHILD: function(a) {
                    return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a
                },
                PSEUDO: function(a) {
                    var b, c = !a[6] && a[2];
                    return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3))
                }
            },
            filter: {
                TAG: function(a) {
                    var b = a.replace(_, aa).toLowerCase();
                    return "*" === a ? function() {
                        return !0
                    } : function(a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b
                    }
                },
                CLASS: function(a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function(a) {
                        return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "")
                    })
                },
                ATTR: function(a, b, c) {
                    return function(d) {
                        var e = ga.attr(d, a);
                        return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"))
                    }
                },
                CHILD: function(a, b, c, d, e) {
                    var f = "nth" !== a.slice(0, 3),
                        g = "last" !== a.slice(-4),
                        h = "of-type" === b;
                    return 1 === d && 0 === e ? function(a) {
                        return !!a.parentNode
                    } : function(b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling",
                            q = b.parentNode,
                            r = h && b.nodeName.toLowerCase(),
                            s = !i && !h,
                            t = !1;
                        if (q) {
                            if (f) {
                                while (p) {
                                    m = b;
                                    while (m = m[p]) {
                                        if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) {
                                            return !1
                                        }
                                    }
                                    o = p = "only" === a && !o && "nextSibling"
                                }
                                return !0
                            }
                            if (o = [g ? q.firstChild : q.lastChild], g && s) {
                                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];
                                while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                                    if (1 === m.nodeType && ++t && m === b) {
                                        k[a] = [w, n, t];
                                        break
                                    }
                                }
                            } else {
                                if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) {
                                    while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                                        if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) {
                                            break
                                        }
                                    }
                                }
                            }
                            return t -= e, t === d || t % d === 0 && t / d >= 0
                        }
                    }
                },
                PSEUDO: function(a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function(a, c) {
                        var d, f = e(a, b),
                            g = f.length;
                        while (g--) {
                            d = I(a, f[g]), a[d] = !(c[d] = f[g])
                        }
                    }) : function(a) {
                        return e(a, 0, c)
                    }) : e
                }
            },
            pseudos: {
                not: ia(function(a) {
                    var b = [],
                        c = [],
                        d = h(a.replace(P, "$1"));
                    return d[u] ? ia(function(a, b, c, e) {
                        var f, g = d(a, null, e, []),
                            h = a.length;
                        while (h--) {
                            (f = g[h]) && (a[h] = !(b[h] = f))
                        }
                    }) : function(a, e, f) {
                        return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop()
                    }
                }),
                has: ia(function(a) {
                    return function(b) {
                        return ga(a, b).length > 0
                    }
                }),
                contains: ia(function(a) {
                    return a = a.replace(_, aa),
                        function(b) {
                            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1
                        }
                }),
                lang: ia(function(a) {
                    return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(),
                        function(b) {
                            var c;
                            do {
                                if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) {
                                    return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-")
                                }
                            } while ((b = b.parentNode) && 1 === b.nodeType);
                            return !1
                        }
                }),
                target: function(b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id
                },
                root: function(a) {
                    return a === o
                },
                focus: function(a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex)
                },
                enabled: oa(!1),
                disabled: oa(!0),
                checked: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && !!a.checked || "option" === b && !!a.selected
                },
                selected: function(a) {
                    return a.parentNode && a.parentNode.selectedIndex, a.selected === !0
                },
                empty: function(a) {
                    for (a = a.firstChild; a; a = a.nextSibling) {
                        if (a.nodeType < 6) {
                            return !1
                        }
                    }
                    return !0
                },
                parent: function(a) {
                    return !d.pseudos.empty(a)
                },
                header: function(a) {
                    return X.test(a.nodeName)
                },
                input: function(a) {
                    return W.test(a.nodeName)
                },
                button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && "button" === a.type || "button" === b
                },
                text: function(a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase())
                },
                first: pa(function() {
                    return [0]
                }),
                last: pa(function(a, b) {
                    return [b - 1]
                }),
                eq: pa(function(a, b, c) {
                    return [c < 0 ? c + b : c]
                }),
                even: pa(function(a, b) {
                    for (var c = 0; c < b; c += 2) {
                        a.push(c)
                    }
                    return a
                }),
                odd: pa(function(a, b) {
                    for (var c = 1; c < b; c += 2) {
                        a.push(c)
                    }
                    return a
                }),
                lt: pa(function(a, b, c) {
                    for (var d = c < 0 ? c + b : c; --d >= 0;) {
                        a.push(d)
                    }
                    return a
                }),
                gt: pa(function(a, b, c) {
                    for (var d = c < 0 ? c + b : c; ++d < b;) {
                        a.push(d)
                    }
                    return a
                })
            }
        }, d.pseudos.nth = d.pseudos.eq;
        for (b in {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            }) {
            d.pseudos[b] = ma(b)
        }
        for (b in {
                submit: !0,
                reset: !0
            }) {
            d.pseudos[b] = na(b)
        }

        function ra() {}
        ra.prototype = d.filters = d.pseudos, d.setFilters = new ra, g = ga.tokenize = function(a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k) {
                return b ? 0 : k.slice(0)
            }
            h = a, i = [], j = d.preFilter;
            while (h) {
                c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(P, " ")
                }), h = h.slice(c.length));
                for (g in d.filter) {
                    !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
                        value: c,
                        type: g,
                        matches: e
                    }), h = h.slice(c.length))
                }
                if (!c) {
                    break
                }
            }
            return b ? h.length : h ? ga.error(a) : z(a, i).slice(0)
        };

        function sa(a) {
            for (var b = 0, c = a.length, d = ""; b < c; b++) {
                d += a[b].value
            }
            return d
        }

        function ta(a, b, c) {
            var d = b.dir,
                e = b.next,
                f = e || d,
                g = c && "parentNode" === f,
                h = x++;
            return b.first ? function(b, c, e) {
                while (b = b[d]) {
                    if (1 === b.nodeType || g) {
                        return a(b, c, e)
                    }
                }
                return !1
            } : function(b, c, i) {
                var j, k, l, m = [w, h];
                if (i) {
                    while (b = b[d]) {
                        if ((1 === b.nodeType || g) && a(b, c, i)) {
                            return !0
                        }
                    }
                } else {
                    while (b = b[d]) {
                        if (1 === b.nodeType || g) {
                            if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) {
                                b = b[d] || b
                            } else {
                                if ((j = k[f]) && j[0] === w && j[1] === h) {
                                    return m[2] = j[2]
                                }
                                if (k[f] = m, m[2] = a(b, c, i)) {
                                    return !0
                                }
                            }
                        }
                    }
                }
                return !1
            }
        }

        function ua(a) {
            return a.length > 1 ? function(b, c, d) {
                var e = a.length;
                while (e--) {
                    if (!a[e](b, c, d)) {
                        return !1
                    }
                }
                return !0
            } : a[0]
        }

        function va(a, b, c) {
            for (var d = 0, e = b.length; d < e; d++) {
                ga(a, b[d], c)
            }
            return c
        }

        function wa(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) {
                (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)))
            }
            return g
        }

        function xa(a, b, c, d, e, f) {
            return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function(f, g, h, i) {
                var j, k, l, m = [],
                    n = [],
                    o = g.length,
                    p = f || va(b || "*", h.nodeType ? [h] : h, []),
                    q = !a || !f && b ? p : wa(p, m, a, h, i),
                    r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = wa(r, n), d(j, [], h, i), k = j.length;
                    while (k--) {
                        (l = j[k]) && (r[n[k]] = !(q[n[k]] = l))
                    }
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            while (k--) {
                                (l = r[k]) && j.push(q[k] = l)
                            }
                            e(null, r = [], j, i)
                        }
                        k = r.length;
                        while (k--) {
                            (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l))
                        }
                    }
                } else {
                    r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r)
                }
            })
        }

        function ya(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ta(function(a) {
                    return a === b
                }, h, !0), l = ta(function(a) {
                    return I(b, a) > -1
                }, h, !0), m = [function(a, c, d) {
                    var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                    return b = null, e
                }]; i < f; i++) {
                if (c = d.relative[a[i].type]) {
                    m = [ta(ua(m), c)]
                } else {
                    if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                        for (e = ++i; e < f; e++) {
                            if (d.relative[a[e].type]) {
                                break
                            }
                        }
                        return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({
                            value: " " === a[i - 2].type ? "*" : ""
                        })).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a))
                    }
                    m.push(c)
                }
            }
            return ua(m)
        }

        function za(a, b) {
            var c = b.length > 0,
                e = a.length > 0,
                f = function(f, g, h, i, k) {
                    var l, o, q, r = 0,
                        s = "0",
                        t = f && [],
                        u = [],
                        v = j,
                        x = f || e && d.find.TAG("*", k),
                        y = w += null == v ? 1 : Math.random() || 0.1,
                        z = x.length;
                    for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
                        if (e && l) {
                            o = 0, g || l.ownerDocument === n || (m(l), h = !p);
                            while (q = a[o++]) {
                                if (q(l, g || n, h)) {
                                    i.push(l);
                                    break
                                }
                            }
                            k && (w = y)
                        }
                        c && ((l = !q && l) && r--, f && t.push(l))
                    }
                    if (r += s, c && s !== r) {
                        o = 0;
                        while (q = b[o++]) {
                            q(t, u, g, h)
                        }
                        if (f) {
                            if (r > 0) {
                                while (s--) {
                                    t[s] || u[s] || (u[s] = E.call(i))
                                }
                            }
                            u = wa(u)
                        }
                        G.apply(i, u), k && !f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i)
                    }
                    return k && (w = y, j = v), t
                };
            return c ? ia(f) : f
        }
        return h = ga.compile = function(a, b) {
            var c, d = [],
                e = [],
                f = A[a + " "];
            if (!f) {
                b || (b = g(a)), c = b.length;
                while (c--) {
                    f = ya(b[c]), f[u] ? d.push(f) : e.push(f)
                }
                f = A(a, za(e, d)), f.selector = a
            }
            return f
        }, i = ga.select = function(a, b, c, e) {
            var f, i, j, k, l, m = "function" == typeof a && a,
                n = !e && g(a = m.selector || a);
            if (c = c || [], 1 === n.length) {
                if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
                    if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) {
                        return c
                    }
                    m && (b = b.parentNode), a = a.slice(i.shift().value.length)
                }
                f = V.needsContext.test(a) ? 0 : i.length;
                while (f--) {
                    if (j = i[f], d.relative[k = j.type]) {
                        break
                    }
                    if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
                        if (i.splice(f, 1), a = e.length && sa(i), !a) {
                            return G.apply(c, e), c
                        }
                        break
                    }
                }
            }
            return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c
        }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function(a) {
            return 1 & a.compareDocumentPosition(n.createElement("fieldset"))
        }), ja(function(a) {
            return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href")
        }) || ka("type|href|height|width", function(a, b, c) {
            if (!c) {
                return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2)
            }
        }), c.attributes && ja(function(a) {
            return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value")
        }) || ka("value", function(a, b, c) {
            if (!c && "input" === a.nodeName.toLowerCase()) {
                return a.defaultValue
            }
        }), ja(function(a) {
            return null == a.getAttribute("disabled")
        }) || ka(J, function(a, b, c) {
            var d;
            if (!c) {
                return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
            }
        }), ga
    }(a);
    r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;
    var y = function(a, b, c) {
            var d = [],
                e = void 0 !== c;
            while ((a = a[b]) && 9 !== a.nodeType) {
                if (1 === a.nodeType) {
                    if (e && r(a).is(c)) {
                        break
                    }
                    d.push(a)
                }
            }
            return d
        },
        z = function(a, b) {
            for (var c = []; a; a = a.nextSibling) {
                1 === a.nodeType && a !== b && c.push(a)
            }
            return c
        },
        A = r.expr.match.needsContext;

    function B(a, b) {
        return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
    }
    var C = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
        D = /^.[^:#\[\.,]*$/;

    function E(a, b, c) {
        return r.isFunction(b) ? r.grep(a, function(a, d) {
            return !!b.call(a, d, a) !== c
        }) : b.nodeType ? r.grep(a, function(a) {
            return a === b !== c
        }) : "string" != typeof b ? r.grep(a, function(a) {
            return i.call(b, a) > -1 !== c
        }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function(a) {
            return i.call(b, a) > -1 !== c && 1 === a.nodeType
        }))
    }
    r.filter = function(a, b, c) {
        var d = b[0];
        return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function(a) {
            return 1 === a.nodeType
        }))
    }, r.fn.extend({
        find: function(a) {
            var b, c, d = this.length,
                e = this;
            if ("string" != typeof a) {
                return this.pushStack(r(a).filter(function() {
                    for (b = 0; b < d; b++) {
                        if (r.contains(e[b], this)) {
                            return !0
                        }
                    }
                }))
            }
            for (c = this.pushStack([]), b = 0; b < d; b++) {
                r.find(a, e[b], c)
            }
            return d > 1 ? r.uniqueSort(c) : c
        },
        filter: function(a) {
            return this.pushStack(E(this, a || [], !1))
        },
        not: function(a) {
            return this.pushStack(E(this, a || [], !0))
        },
        is: function(a) {
            return !!E(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length
        }
    });
    var F, G = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
        H = r.fn.init = function(a, b, c) {
            var e, f;
            if (!a) {
                return this
            }
            if (c = c || F, "string" == typeof a) {
                if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) {
                    return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a)
                }
                if (e[1]) {
                    if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) {
                        for (e in b) {
                            r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e])
                        }
                    }
                    return this
                }
                return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this
            }
            return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this)
        };
    H.prototype = r.fn, F = r(d);
    var I = /^(?:parents|prev(?:Until|All))/,
        J = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    r.fn.extend({
        has: function(a) {
            var b = r(a, this),
                c = b.length;
            return this.filter(function() {
                for (var a = 0; a < c; a++) {
                    if (r.contains(this, b[a])) {
                        return !0
                    }
                }
            })
        },
        closest: function(a, b) {
            var c, d = 0,
                e = this.length,
                f = [],
                g = "string" != typeof a && r(a);
            if (!A.test(a)) {
                for (; d < e; d++) {
                    for (c = this[d]; c && c !== b; c = c.parentNode) {
                        if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
                            f.push(c);
                            break
                        }
                    }
                }
            }
            return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f)
        },
        index: function(a) {
            return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function(a, b) {
            return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))))
        },
        addBack: function(a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
        }
    });

    function K(a, b) {
        while ((a = a[b]) && 1 !== a.nodeType) {}
        return a
    }
    r.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null
        },
        parents: function(a) {
            return y(a, "parentNode")
        },
        parentsUntil: function(a, b, c) {
            return y(a, "parentNode", c)
        },
        next: function(a) {
            return K(a, "nextSibling")
        },
        prev: function(a) {
            return K(a, "previousSibling")
        },
        nextAll: function(a) {
            return y(a, "nextSibling")
        },
        prevAll: function(a) {
            return y(a, "previousSibling")
        },
        nextUntil: function(a, b, c) {
            return y(a, "nextSibling", c)
        },
        prevUntil: function(a, b, c) {
            return y(a, "previousSibling", c)
        },
        siblings: function(a) {
            return z((a.parentNode || {}).firstChild, a)
        },
        children: function(a) {
            return z(a.firstChild)
        },
        contents: function(a) {
            return B(a, "iframe") ? a.contentDocument : (B(a, "template") && (a = a.content || a), r.merge([], a.childNodes))
        }
    }, function(a, b) {
        r.fn[a] = function(c, d) {
            var e = r.map(this, b, c);
            return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e)
        }
    });
    var L = /[^\x20\t\r\n\f]+/g;

    function M(a) {
        var b = {};
        return r.each(a.match(L) || [], function(a, c) {
            b[c] = !0
        }), b
    }
    r.Callbacks = function(a) {
        a = "string" == typeof a ? M(a) : r.extend({}, a);
        var b, c, d, e, f = [],
            g = [],
            h = -1,
            i = function() {
                for (e = e || a.once, d = b = !0; g.length; h = -1) {
                    c = g.shift();
                    while (++h < f.length) {
                        f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1)
                    }
                }
                a.memory || (c = !1), b = !1, e && (f = c ? [] : "")
            },
            j = {
                add: function() {
                    return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
                        r.each(b, function(b, c) {
                            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c)
                        })
                    }(arguments), c && !b && i()), this
                },
                remove: function() {
                    return r.each(arguments, function(a, b) {
                        var c;
                        while ((c = r.inArray(b, f, c)) > -1) {
                            f.splice(c, 1), c <= h && h--
                        }
                    }), this
                },
                has: function(a) {
                    return a ? r.inArray(a, f) > -1 : f.length > 0
                },
                empty: function() {
                    return f && (f = []), this
                },
                disable: function() {
                    return e = g = [], f = c = "", this
                },
                disabled: function() {
                    return !f
                },
                lock: function() {
                    return e = g = [], c || b || (f = c = ""), this
                },
                locked: function() {
                    return !!e
                },
                fireWith: function(a, c) {
                    return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this
                },
                fire: function() {
                    return j.fireWith(this, arguments), this
                },
                fired: function() {
                    return !!d
                }
            };
        return j
    };

    function N(a) {
        return a
    }

    function O(a) {
        throw a
    }

    function P(a, b, c, d) {
        var e;
        try {
            a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d))
        } catch (a) {
            c.apply(void 0, [a])
        }
    }
    r.extend({
        Deferred: function(b) {
            var c = [
                    ["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2],
                    ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"],
                    ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]
                ],
                d = "pending",
                e = {
                    state: function() {
                        return d
                    },
                    always: function() {
                        return f.done(arguments).fail(arguments), this
                    },
                    "catch": function(a) {
                        return e.then(null, a)
                    },
                    pipe: function() {
                        var a = arguments;
                        return r.Deferred(function(b) {
                            r.each(c, function(c, d) {
                                var e = r.isFunction(a[d[4]]) && a[d[4]];
                                f[d[1]](function() {
                                    var a = e && e.apply(this, arguments);
                                    a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments)
                                })
                            }), a = null
                        }).promise()
                    },
                    then: function(b, d, e) {
                        var f = 0;

                        function g(b, c, d, e) {
                            return function() {
                                var h = this,
                                    i = arguments,
                                    j = function() {
                                        var a, j;
                                        if (!(b < f)) {
                                            if (a = d.apply(h, i), a === c.promise()) {
                                                throw new TypeError("Thenable self-resolution")
                                            }
                                            j = a && ("object" == typeof a || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i))
                                        }
                                    },
                                    k = e ? j : function() {
                                        try {
                                            j()
                                        } catch (a) {
                                            r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i))
                                        }
                                    };
                                b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k))
                            }
                        }
                        return r.Deferred(function(a) {
                            c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O))
                        }).promise()
                    },
                    promise: function(a) {
                        return null != a ? r.extend(a, e) : e
                    }
                },
                f = {};
            return r.each(c, function(a, b) {
                var g = b[2],
                    h = b[5];
                e[b[1]] = g.add, h && g.add(function() {
                    d = h
                }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function() {
                    return f[b[0] + "With"](this === f ? void 0 : this, arguments), this
                }, f[b[0] + "With"] = g.fireWith
            }), e.promise(f), b && b.call(f, f), f
        },
        when: function(a) {
            var b = arguments.length,
                c = b,
                d = Array(c),
                e = f.call(arguments),
                g = r.Deferred(),
                h = function(a) {
                    return function(c) {
                        d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e)
                    }
                };
            if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), "pending" === g.state() || r.isFunction(e[c] && e[c].then))) {
                return g.then()
            }
            while (c--) {
                P(e[c], h(c), g.reject)
            }
            return g.promise()
        }
    });
    var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    r.Deferred.exceptionHook = function(b, c) {
        a.console && a.console.warn && b && Q.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c)
    }, r.readyException = function(b) {
        a.setTimeout(function() {
            throw b
        })
    };
    var R = r.Deferred();
    r.fn.ready = function(a) {
        return R.then(a)["catch"](function(a) {
            r.readyException(a)
        }), this
    }, r.extend({
        isReady: !1,
        readyWait: 1,
        ready: function(a) {
            (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]))
        }
    }), r.ready.then = R.then;

    function S() {
        d.removeEventListener("DOMContentLoaded", S), a.removeEventListener("load", S), r.ready()
    }
    "complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", S), a.addEventListener("load", S));
    var T = function(a, b, c, d, e, f, g) {
            var h = 0,
                i = a.length,
                j = null == c;
            if ("object" === r.type(c)) {
                e = !0;
                for (h in c) {
                    T(a, b, h, c[h], !0, f, g)
                }
            } else {
                if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function(a, b, c) {
                        return j.call(r(a), c)
                    })), b)) {
                    for (; h < i; h++) {
                        b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)))
                    }
                }
            }
            return e ? a : j ? b.call(a) : i ? b(a[0], c) : f
        },
        U = function(a) {
            return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType
        };

    function V() {
        this.expando = r.expando + V.uid++
    }
    V.uid = 1, V.prototype = {
        cache: function(a) {
            var b = a[this.expando];
            return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {
                value: b,
                configurable: !0
            }))), b
        },
        set: function(a, b, c) {
            var d, e = this.cache(a);
            if ("string" == typeof b) {
                e[r.camelCase(b)] = c
            } else {
                for (d in b) {
                    e[r.camelCase(d)] = b[d]
                }
            }
            return e
        },
        get: function(a, b) {
            return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)]
        },
        access: function(a, b, c) {
            return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b)
        },
        remove: function(a, b) {
            var c, d = a[this.expando];
            if (void 0 !== d) {
                if (void 0 !== b) {
                    Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;
                    while (c--) {
                        delete d[b[c]]
                    }
                }(void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando])
            }
        },
        hasData: function(a) {
            var b = a[this.expando];
            return void 0 !== b && !r.isEmptyObject(b)
        }
    };
    var W = new V,
        X = new V,
        Y = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        Z = /[A-Z]/g;

    function $(a) {
        return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : Y.test(a) ? JSON.parse(a) : a)
    }

    function _(a, b, c) {
        var d;
        if (void 0 === c && 1 === a.nodeType) {
            if (d = "data-" + b.replace(Z, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
                try {
                    c = $(c)
                } catch (e) {}
                X.set(a, b, c)
            } else {
                c = void 0
            }
        }
        return c
    }
    r.extend({
        hasData: function(a) {
            return X.hasData(a) || W.hasData(a)
        },
        data: function(a, b, c) {
            return X.access(a, b, c)
        },
        removeData: function(a, b) {
            X.remove(a, b)
        },
        _data: function(a, b, c) {
            return W.access(a, b, c)
        },
        _removeData: function(a, b) {
            W.remove(a, b)
        }
    }), r.fn.extend({
        data: function(a, b) {
            var c, d, e, f = this[0],
                g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, "hasDataAttrs"))) {
                    c = g.length;
                    while (c--) {
                        g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])))
                    }
                    W.set(f, "hasDataAttrs", !0)
                }
                return e
            }
            return "object" == typeof a ? this.each(function() {
                X.set(this, a)
            }) : T(this, function(b) {
                var c;
                if (f && void 0 === b) {
                    if (c = X.get(f, a), void 0 !== c) {
                        return c
                    }
                    if (c = _(f, a), void 0 !== c) {
                        return c
                    }
                } else {
                    this.each(function() {
                        X.set(this, a, b)
                    })
                }
            }, null, b, arguments.length > 1, null, !0)
        },
        removeData: function(a) {
            return this.each(function() {
                X.remove(this, a)
            })
        }
    }), r.extend({
        queue: function(a, b, c) {
            var d;
            if (a) {
                return b = (b || "fx") + "queue", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || []
            }
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = r.queue(a, b),
                d = c.length,
                e = c.shift(),
                f = r._queueHooks(a, b),
                g = function() {
                    r.dequeue(a, b)
                };
            "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire()
        },
        _queueHooks: function(a, b) {
            var c = b + "queueHooks";
            return W.get(a, c) || W.access(a, c, {
                empty: r.Callbacks("once memory").add(function() {
                    W.remove(a, [b + "queue", c])
                })
            })
        }
    }), r.fn.extend({
        queue: function(a, b) {
            var c = 2;
            return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function() {
                var c = r.queue(this, a, b);
                r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a)
            })
        },
        dequeue: function(a) {
            return this.each(function() {
                r.dequeue(this, a)
            })
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", [])
        },
        promise: function(a, b) {
            var c, d = 1,
                e = r.Deferred(),
                f = this,
                g = this.length,
                h = function() {
                    --d || e.resolveWith(f, [f])
                };
            "string" != typeof a && (b = a, a = void 0), a = a || "fx";
            while (g--) {
                c = W.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h))
            }
            return h(), e.promise(b)
        }
    });
    var aa = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        ba = new RegExp("^(?:([+-])=|)(" + aa + ")([a-z%]*)$", "i"),
        ca = ["Top", "Right", "Bottom", "Left"],
        da = function(a, b) {
            return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display")
        },
        ea = function(a, b, c, d) {
            var e, f, g = {};
            for (f in b) {
                g[f] = a.style[f], a.style[f] = b[f]
            }
            e = c.apply(a, d || []);
            for (f in b) {
                a.style[f] = g[f]
            }
            return e
        };

    function fa(a, b, c, d) {
        var e, f = 1,
            g = 20,
            h = d ? function() {
                return d.cur()
            } : function() {
                return r.css(a, b, "")
            },
            i = h(),
            j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
            k = (r.cssNumber[b] || "px" !== j && +i) && ba.exec(r.css(a, b));
        if (k && k[3] !== j) {
            j = j || k[3], c = c || [], k = +i || 1;
            do {
                f = f || ".5", k /= f, r.style(a, b, k + j)
            } while (f !== (f = h() / i) && 1 !== f && --g)
        }
        return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e
    }
    var ga = {};

    function ha(a) {
        var b, c = a.ownerDocument,
            d = a.nodeName,
            e = ga[d];
        return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), ga[d] = e, e)
    }

    function ia(a, b) {
        for (var c, d, e = [], f = 0, g = a.length; f < g; f++) {
            d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = W.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && da(d) && (e[f] = ha(d))) : "none" !== c && (e[f] = "none", W.set(d, "display", c)))
        }
        for (f = 0; f < g; f++) {
            null != e[f] && (a[f].style.display = e[f])
        }
        return a
    }
    r.fn.extend({
        show: function() {
            return ia(this, !0)
        },
        hide: function() {
            return ia(this)
        },
        toggle: function(a) {
            return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                da(this) ? r(this).show() : r(this).hide()
            })
        }
    });
    var ja = /^(?:checkbox|radio)$/i,
        ka = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        la = /^$|\/(?:java|ecma)script/i,
        ma = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
        };
    ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;

    function na(a, b) {
        var c;
        return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c
    }

    function oa(a, b) {
        for (var c = 0, d = a.length; c < d; c++) {
            W.set(a[c], "globalEval", !b || W.get(b[c], "globalEval"))
        }
    }
    var pa = /<|&#?\w+;/;

    function qa(a, b, c, d, e) {
        for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) {
            if (f = a[n], f || 0 === f) {
                if ("object" === r.type(f)) {
                    r.merge(m, f.nodeType ? [f] : f)
                } else {
                    if (pa.test(f)) {
                        g = g || l.appendChild(b.createElement("div")), h = (ka.exec(f) || ["", ""])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];
                        while (k--) {
                            g = g.lastChild
                        }
                        r.merge(m, g.childNodes), g = l.firstChild, g.textContent = ""
                    } else {
                        m.push(b.createTextNode(f))
                    }
                }
            }
        }
        l.textContent = "", n = 0;
        while (f = m[n++]) {
            if (d && r.inArray(f, d) > -1) {
                e && e.push(f)
            } else {
                if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), "script"), j && oa(g), c) {
                    k = 0;
                    while (f = g[k++]) {
                        la.test(f.type || "") && c.push(f)
                    }
                }
            }
        }
        return l
    }! function() {
        var a = d.createDocumentFragment(),
            b = a.appendChild(d.createElement("div")),
            c = d.createElement("input");
        c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue
    }();
    var ra = d.documentElement,
        sa = /^key/,
        ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        ua = /^([^.]*)(?:\.(.+)|)/;

    function va() {
        return !0
    }

    function wa() {
        return !1
    }

    function xa() {
        try {
            return d.activeElement
        } catch (a) {}
    }

    function ya(a, b, c, d, e, f) {
        var g, h;
        if ("object" == typeof b) {
            "string" != typeof c && (d = d || c, c = void 0);
            for (h in b) {
                ya(a, h, c, d, b[h], f)
            }
            return a
        }
        if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) {
            e = wa
        } else {
            if (!e) {
                return a
            }
        }
        return 1 === f && (g = e, e = function(a) {
            return r().off(a), g.apply(this, arguments)
        }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function() {
            r.event.add(this, b, e, d, c)
        })
    }
    r.event = {
        global: {},
        add: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, n, o, p, q = W.get(a);
            if (q) {
                c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function(b) {
                    return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0
                }), b = (b || "").match(L) || [""], j = b.length;
                while (j--) {
                    h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({
                        type: n,
                        origType: p,
                        data: d,
                        handler: c,
                        guid: c.guid,
                        selector: e,
                        needsContext: e && r.expr.match.needsContext.test(e),
                        namespace: o.join(".")
                    }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0)
                }
            }
        },
        remove: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, n, o, p, q = W.hasData(a) && W.get(a);
            if (q && (i = q.events)) {
                b = (b || "").match(L) || [""], j = b.length;
                while (j--) {
                    if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
                        l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;
                        while (f--) {
                            k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k))
                        }
                        g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n])
                    } else {
                        for (n in i) {
                            r.event.remove(a, n + b[j], c, d, !0)
                        }
                    }
                }
                r.isEmptyObject(i) && W.remove(a, "handle events")
            }
        },
        dispatch: function(a) {
            var b = r.event.fix(a),
                c, d, e, f, g, h, i = new Array(arguments.length),
                j = (W.get(this, "events") || {})[b.type] || [],
                k = r.event.special[b.type] || {};
            for (i[0] = b, c = 1; c < arguments.length; c++) {
                i[c] = arguments[c]
            }
            if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
                h = r.event.handlers.call(this, b, j), c = 0;
                while ((f = h[c++]) && !b.isPropagationStopped()) {
                    b.currentTarget = f.elem, d = 0;
                    while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) {
                        b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()))
                    }
                }
                return k.postDispatch && k.postDispatch.call(this, b), b.result
            }
        },
        handlers: function(a, b) {
            var c, d, e, f, g, h = [],
                i = b.delegateCount,
                j = a.target;
            if (i && j.nodeType && !("click" === a.type && a.button >= 1)) {
                for (; j !== this; j = j.parentNode || this) {
                    if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
                        for (f = [], g = {}, c = 0; c < i; c++) {
                            d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d)
                        }
                        f.length && h.push({
                            elem: j,
                            handlers: f
                        })
                    }
                }
            }
            return j = this, i < b.length && h.push({
                elem: j,
                handlers: b.slice(i)
            }), h
        },
        addProp: function(a, b) {
            Object.defineProperty(r.Event.prototype, a, {
                enumerable: !0,
                configurable: !0,
                get: r.isFunction(b) ? function() {
                    if (this.originalEvent) {
                        return b(this.originalEvent)
                    }
                } : function() {
                    if (this.originalEvent) {
                        return this.originalEvent[a]
                    }
                },
                set: function(b) {
                    Object.defineProperty(this, a, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: b
                    })
                }
            })
        },
        fix: function(a) {
            return a[r.expando] ? a : new r.Event(a)
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== xa() && this.focus) {
                        return this.focus(), !1
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === xa() && this.blur) {
                        return this.blur(), !1
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if ("checkbox" === this.type && this.click && B(this, "input")) {
                        return this.click(), !1
                    }
                },
                _default: function(a) {
                    return B(a.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function(a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result)
                }
            }
        }
    }, r.removeEvent = function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c)
    }, r.Event = function(a, b) {
        return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void(this[r.expando] = !0)) : new r.Event(a, b)
    }, r.Event.prototype = {
        constructor: r.Event,
        isDefaultPrevented: wa,
        isPropagationStopped: wa,
        isImmediatePropagationStopped: wa,
        isSimulated: !1,
        preventDefault: function() {
            var a = this.originalEvent;
            this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault()
        },
        stopPropagation: function() {
            var a = this.originalEvent;
            this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation()
        },
        stopImmediatePropagation: function() {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation()
        }
    }, r.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        "char": !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: function(a) {
            var b = a.button;
            return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which
        }
    }, r.event.addProp), r.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(a, b) {
        r.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c, d = this,
                    e = a.relatedTarget,
                    f = a.handleObj;
                return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c
            }
        }
    }), r.fn.extend({
        on: function(a, b, c, d) {
            return ya(this, a, b, c, d)
        },
        one: function(a, b, c, d) {
            return ya(this, a, b, c, d, 1)
        },
        off: function(a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) {
                return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this
            }
            if ("object" == typeof a) {
                for (e in a) {
                    this.off(e, b, a[e])
                }
                return this
            }
            return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function() {
                r.event.remove(this, a, c, b)
            })
        }
    });
    var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        Aa = /<script|<style|<link/i,
        Ba = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Ca = /^true\/(.*)/,
        Da = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    function Ea(a, b) {
        return B(a, "table") && B(11 !== b.nodeType ? b : b.firstChild, "tr") ? r(">tbody", a)[0] || a : a
    }

    function Fa(a) {
        return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a
    }

    function Ga(a) {
        var b = Ca.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute("type"), a
    }

    function Ha(a, b) {
        var c, d, e, f, g, h, i, j;
        if (1 === b.nodeType) {
            if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {
                delete g.handle, g.events = {};
                for (e in j) {
                    for (c = 0, d = j[e].length; c < d; c++) {
                        r.event.add(b, e, j[e][c])
                    }
                }
            }
            X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i))
        }
    }

    function Ia(a, b) {
        var c = b.nodeName.toLowerCase();
        "input" === c && ja.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue)
    }

    function Ja(a, b, c, d) {
        b = g.apply([], b);
        var e, f, h, i, j, k, l = 0,
            m = a.length,
            n = m - 1,
            q = b[0],
            s = r.isFunction(q);
        if (s || m > 1 && "string" == typeof q && !o.checkClone && Ba.test(q)) {
            return a.each(function(e) {
                var f = a.eq(e);
                s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d)
            })
        }
        if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
            for (h = r.map(na(e, "script"), Fa), i = h.length; l < m; l++) {
                j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, "script"))), c.call(a[l], j, l)
            }
            if (i) {
                for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) {
                    j = h[l], la.test(j.type || "") && !W.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, ""), k))
                }
            }
        }
        return a
    }

    function Ka(a, b, c) {
        for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) {
            c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, "script")), d.parentNode.removeChild(d))
        }
        return a
    }
    r.extend({
        htmlPrefilter: function(a) {
            return a.replace(za, "<$1></$2>")
        },
        clone: function(a, b, c) {
            var d, e, f, g, h = a.cloneNode(!0),
                i = r.contains(a.ownerDocument, a);
            if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) {
                for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) {
                    Ia(f[d], g[d])
                }
            }
            if (b) {
                if (c) {
                    for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) {
                        Ha(f[d], g[d])
                    }
                } else {
                    Ha(a, h)
                }
            }
            return g = na(h, "script"), g.length > 0 && oa(g, !i && na(a, "script")), h
        },
        cleanData: function(a) {
            for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) {
                if (U(c)) {
                    if (b = c[W.expando]) {
                        if (b.events) {
                            for (d in b.events) {
                                e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle)
                            }
                        }
                        c[W.expando] = void 0
                    }
                    c[X.expando] && (c[X.expando] = void 0)
                }
            }
        }
    }), r.fn.extend({
        detach: function(a) {
            return Ka(this, a, !0)
        },
        remove: function(a) {
            return Ka(this, a)
        },
        text: function(a) {
            return T(this, function(a) {
                return void 0 === a ? r.text(this) : this.empty().each(function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a)
                })
            }, null, a, arguments.length)
        },
        append: function() {
            return Ja(this, arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = Ea(this, a);
                    b.appendChild(a)
                }
            })
        },
        prepend: function() {
            return Ja(this, arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = Ea(this, a);
                    b.insertBefore(a, b.firstChild)
                }
            })
        },
        before: function() {
            return Ja(this, arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this)
            })
        },
        after: function() {
            return Ja(this, arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling)
            })
        },
        empty: function() {
            for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = "")
            }
            return this
        },
        clone: function(a, b) {
            return a = null != a && a, b = null == b ? a : b, this.map(function() {
                return r.clone(this, a, b)
            })
        },
        html: function(a) {
            return T(this, function(a) {
                var b = this[0] || {},
                    c = 0,
                    d = this.length;
                if (void 0 === a && 1 === b.nodeType) {
                    return b.innerHTML
                }
                if ("string" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || ["", ""])[1].toLowerCase()]) {
                    a = r.htmlPrefilter(a);
                    try {
                        for (; c < d; c++) {
                            b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a)
                        }
                        b = 0
                    } catch (e) {}
                }
                b && this.empty().append(a)
            }, null, a, arguments.length)
        },
        replaceWith: function() {
            var a = [];
            return Ja(this, arguments, function(b) {
                var c = this.parentNode;
                r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this))
            }, a)
        }
    }), r.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        r.fn[a] = function(a) {
            for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) {
                c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get())
            }
            return this.pushStack(d)
        }
    });
    var La = /^margin/,
        Ma = new RegExp("^(" + aa + ")(?!px)[a-z%]+$", "i"),
        Na = function(b) {
            var c = b.ownerDocument.defaultView;
            return c && c.opener || (c = a), c.getComputedStyle(b)
        };
    ! function() {
        function b() {
            if (i) {
                i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", ra.appendChild(h);
                var b = a.getComputedStyle(i);
                c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, ra.removeChild(h), i = null
            }
        }
        var c, e, f, g, h = d.createElement("div"),
            i = d.createElement("div");
        i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, {
            pixelPosition: function() {
                return b(), c
            },
            boxSizingReliable: function() {
                return b(), e
            },
            pixelMarginRight: function() {
                return b(), f
            },
            reliableMarginLeft: function() {
                return b(), g
            }
        }))
    }();

    function Oa(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g
    }

    function Pa(a, b) {
        return {
            get: function() {
                return a() ? void delete this.get : (this.get = b).apply(this, arguments)
            }
        }
    }
    var Qa = /^(none|table(?!-c[ea]).+)/,
        Ra = /^--/,
        Sa = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Ta = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        Ua = ["Webkit", "Moz", "ms"],
        Va = d.createElement("div").style;

    function Wa(a) {
        if (a in Va) {
            return a
        }
        var b = a[0].toUpperCase() + a.slice(1),
            c = Ua.length;
        while (c--) {
            if (a = Ua[c] + b, a in Va) {
                return a
            }
        }
    }

    function Xa(a) {
        var b = r.cssProps[a];
        return b || (b = r.cssProps[a] = Wa(a) || a), b
    }

    function Ya(a, b, c) {
        var d = ba.exec(b);
        return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b
    }

    function Za(a, b, c, d, e) {
        var f, g = 0;
        for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2) {
            "margin" === c && (g += r.css(a, c + ca[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ca[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ca[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ca[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ca[f] + "Width", !0, e)))
        }
        return g
    }

    function $a(a, b, c) {
        var d, e = Na(a),
            f = Oa(a, b, e),
            g = "border-box" === r.css(a, "boxSizing", !1, e);
        return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), "auto" === f && (f = a["offset" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? "border" : "content"), d, e) + "px")
    }
    r.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = Oa(a, "opacity");
                        return "" === c ? "1" : c
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": "cssFloat"
        },
        style: function(a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = r.camelCase(b),
                    i = Ra.test(b),
                    j = a.style;
                return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = typeof c, "string" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (j[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0)
            }
        },
        css: function(a, b, c, d) {
            var e, f, g, h = r.camelCase(b),
                i = Ra.test(b);
            return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), "normal" === e && b in Ta && (e = Ta[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e
        }
    }), r.each(["height", "width"], function(a, b) {
        r.cssHooks[b] = {
            get: function(a, c, d) {
                if (c) {
                    return !Qa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function() {
                        return $a(a, b, d)
                    })
                }
            },
            set: function(a, c, d) {
                var e, f = d && Na(a),
                    g = d && Za(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);
                return g && (e = ba.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g)
            }
        }
    }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function(a, b) {
        if (b) {
            return (parseFloat(Oa(a, "marginLeft")) || a.getBoundingClientRect().left - ea(a, {
                marginLeft: 0
            }, function() {
                return a.getBoundingClientRect().left
            })) + "px"
        }
    }), r.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(a, b) {
        r.cssHooks[a + b] = {
            expand: function(c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) {
                    e[a + ca[d] + b] = f[d] || f[d - 2] || f[0]
                }
                return e
            }
        }, La.test(a) || (r.cssHooks[a + b].set = Ya)
    }), r.fn.extend({
        css: function(a, b) {
            return T(this, function(a, b, c) {
                var d, e, f = {},
                    g = 0;
                if (Array.isArray(b)) {
                    for (d = Na(a), e = b.length; g < e; g++) {
                        f[b[g]] = r.css(a, b[g], !1, d)
                    }
                    return f
                }
                return void 0 !== c ? r.style(a, b, c) : r.css(a, b)
            }, a, b, arguments.length > 1)
        }
    });

    function _a(a, b, c, d, e) {
        return new _a.prototype.init(a, b, c, d, e)
    }
    r.Tween = _a, _a.prototype = {
        constructor: _a,
        init: function(a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? "" : "px")
        },
        cur: function() {
            var a = _a.propHooks[this.prop];
            return a && a.get ? a.get(this) : _a.propHooks._default.get(this)
        },
        run: function(a) {
            var b, c = _a.propHooks[this.prop];
            return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : _a.propHooks._default.set(this), this
        }
    }, _a.prototype.init.prototype = _a.prototype, _a.propHooks = {
        _default: {
            get: function(a) {
                var b;
                return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0)
            },
            set: function(a) {
                r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit)
            }
        }
    }, _a.propHooks.scrollTop = _a.propHooks.scrollLeft = {
        set: function(a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now)
        }
    }, r.easing = {
        linear: function(a) {
            return a
        },
        swing: function(a) {
            return 0.5 - Math.cos(a * Math.PI) / 2
        },
        _default: "swing"
    }, r.fx = _a.prototype.init, r.fx.step = {};
    var ab, bb, cb = /^(?:toggle|show|hide)$/,
        db = /queueHooks$/;

    function eb() {
        bb && (d.hidden === !1 && a.requestAnimationFrame ? a.requestAnimationFrame(eb) : a.setTimeout(eb, r.fx.interval), r.fx.tick())
    }

    function fb() {
        return a.setTimeout(function() {
            ab = void 0
        }), ab = r.now()
    }

    function gb(a, b) {
        var c, d = 0,
            e = {
                height: a
            };
        for (b = b ? 1 : 0; d < 4; d += 2 - b) {
            c = ca[d], e["margin" + c] = e["padding" + c] = a
        }
        return b && (e.opacity = e.width = a), e
    }

    function hb(a, b, c) {
        for (var d, e = (kb.tweeners[b] || []).concat(kb.tweeners["*"]), f = 0, g = e.length; f < g; f++) {
            if (d = e[f].call(c, b, a)) {
                return d
            }
        }
    }

    function ib(a, b, c) {
        var d, e, f, g, h, i, j, k, l = "width" in b || "height" in b,
            m = this,
            n = {},
            o = a.style,
            p = a.nodeType && da(a),
            q = W.get(a, "fxshow");
        c.queue || (g = r._queueHooks(a, "fx"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function() {
            g.unqueued || h()
        }), g.unqueued++, m.always(function() {
            m.always(function() {
                g.unqueued--, r.queue(a, "fx").length || g.empty.fire()
            })
        }));
        for (d in b) {
            if (e = b[d], cb.test(e)) {
                if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
                    if ("show" !== e || !q || void 0 === q[d]) {
                        continue
                    }
                    p = !0
                }
                n[d] = q && q[d] || r.style(a, d)
            }
        }
        if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {
            l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = W.get(a, "display")), k = r.css(a, "display"), "none" === k && (j ? k = j : (ia([a], !0), j = a.style.display || j, k = r.css(a, "display"), ia([a]))), ("inline" === k || "inline-block" === k && null != j) && "none" === r.css(a, "float") && (i || (m.done(function() {
                o.display = j
            }), null == j && (k = o.display, j = "none" === k ? "" : k)), o.display = "inline-block")), c.overflow && (o.overflow = "hidden", m.always(function() {
                o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2]
            })), i = !1;
            for (d in n) {
                i || (q ? "hidden" in q && (p = q.hidden) : q = W.access(a, "fxshow", {
                    display: j
                }), f && (q.hidden = !p), p && ia([a], !0), m.done(function() {
                    p || ia([a]), W.remove(a, "fxshow");
                    for (d in n) {
                        r.style(a, d, n[d])
                    }
                })), i = hb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0))
            }
        }
    }

    function jb(a, b) {
        var c, d, e, f, g;
        for (c in a) {
            if (d = r.camelCase(c), e = b[d], f = a[c], Array.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && "expand" in g) {
                f = g.expand(f), delete a[d];
                for (c in f) {
                    c in a || (a[c] = f[c], b[c] = e)
                }
            } else {
                b[d] = e
            }
        }
    }

    function kb(a, b, c) {
        var d, e, f = 0,
            g = kb.prefilters.length,
            h = r.Deferred().always(function() {
                delete i.elem
            }),
            i = function() {
                if (e) {
                    return !1
                }
                for (var b = ab || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) {
                    j.tweens[g].run(f)
                }
                return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (i || h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j]), !1)
            },
            j = h.promise({
                elem: a,
                props: r.extend({}, b),
                opts: r.extend(!0, {
                    specialEasing: {},
                    easing: r.easing._default
                }, c),
                originalProperties: b,
                originalOptions: c,
                startTime: ab || fb(),
                duration: c.duration,
                tweens: [],
                createTween: function(b, c) {
                    var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                    return j.tweens.push(d), d
                },
                stop: function(b) {
                    var c = 0,
                        d = b ? j.tweens.length : 0;
                    if (e) {
                        return this
                    }
                    for (e = !0; c < d; c++) {
                        j.tweens[c].run(1)
                    }
                    return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this
                }
            }),
            k = j.props;
        for (jb(k, j.opts.specialEasing); f < g; f++) {
            if (d = kb.prefilters[f].call(j, a, k, j.opts)) {
                return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d
            }
        }
        return r.map(k, hb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always), r.fx.timer(r.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j
    }
    r.Animation = r.extend(kb, {
            tweeners: {
                "*": [function(a, b) {
                    var c = this.createTween(a, b);
                    return fa(c.elem, a, ba.exec(b), c), c
                }]
            },
            tweener: function(a, b) {
                r.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(L);
                for (var c, d = 0, e = a.length; d < e; d++) {
                    c = a[d], kb.tweeners[c] = kb.tweeners[c] || [], kb.tweeners[c].unshift(b)
                }
            },
            prefilters: [ib],
            prefilter: function(a, b) {
                b ? kb.prefilters.unshift(a) : kb.prefilters.push(a)
            }
        }), r.speed = function(a, b, c) {
            var d = a && "object" == typeof a ? r.extend({}, a) : {
                complete: c || !c && b || r.isFunction(a) && a,
                duration: a,
                easing: c && b || b && !r.isFunction(b) && b
            };
            return r.fx.off ? d.duration = 0 : "number" != typeof d.duration && (d.duration in r.fx.speeds ? d.duration = r.fx.speeds[d.duration] : d.duration = r.fx.speeds._default), null != d.queue && d.queue !== !0 || (d.queue = "fx"), d.old = d.complete, d.complete = function() {
                r.isFunction(d.old) && d.old.call(this), d.queue && r.dequeue(this, d.queue)
            }, d
        }, r.fn.extend({
            fadeTo: function(a, b, c, d) {
                return this.filter(da).css("opacity", 0).show().end().animate({
                    opacity: b
                }, a, c, d)
            },
            animate: function(a, b, c, d) {
                var e = r.isEmptyObject(a),
                    f = r.speed(b, c, d),
                    g = function() {
                        var b = kb(this, r.extend({}, a), f);
                        (e || W.get(this, "finish")) && b.stop(!0)
                    };
                return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
            },
            stop: function(a, b, c) {
                var d = function(a) {
                    var b = a.stop;
                    delete a.stop, b(c)
                };
                return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function() {
                    var b = !0,
                        e = null != a && a + "queueHooks",
                        f = r.timers,
                        g = W.get(this);
                    if (e) {
                        g[e] && g[e].stop && d(g[e])
                    } else {
                        for (e in g) {
                            g[e] && g[e].stop && db.test(e) && d(g[e])
                        }
                    }
                    for (e = f.length; e--;) {
                        f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1))
                    }!b && c || r.dequeue(this, a)
                })
            },
            finish: function(a) {
                return a !== !1 && (a = a || "fx"), this.each(function() {
                    var b, c = W.get(this),
                        d = c[a + "queue"],
                        e = c[a + "queueHooks"],
                        f = r.timers,
                        g = d ? d.length : 0;
                    for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
                        f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1))
                    }
                    for (b = 0; b < g; b++) {
                        d[b] && d[b].finish && d[b].finish.call(this)
                    }
                    delete c.finish
                })
            }
        }), r.each(["toggle", "show", "hide"], function(a, b) {
            var c = r.fn[b];
            r.fn[b] = function(a, d, e) {
                return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e)
            }
        }), r.each({
            slideDown: gb("show"),
            slideUp: gb("hide"),
            slideToggle: gb("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function(a, b) {
            r.fn[a] = function(a, c, d) {
                return this.animate(b, a, c, d)
            }
        }), r.timers = [], r.fx.tick = function() {
            var a, b = 0,
                c = r.timers;
            for (ab = r.now(); b < c.length; b++) {
                a = c[b], a() || c[b] !== a || c.splice(b--, 1)
            }
            c.length || r.fx.stop(), ab = void 0
        }, r.fx.timer = function(a) {
            r.timers.push(a), r.fx.start()
        }, r.fx.interval = 13, r.fx.start = function() {
            bb || (bb = !0, eb())
        }, r.fx.stop = function() {
            bb = null
        }, r.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        }, r.fn.delay = function(b, c) {
            return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function(c, d) {
                var e = a.setTimeout(c, b);
                d.stop = function() {
                    a.clearTimeout(e)
                }
            })
        },
        function() {
            var a = d.createElement("input"),
                b = d.createElement("select"),
                c = b.appendChild(d.createElement("option"));
            a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value
        }();
    var lb, mb = r.expr.attrHandle;
    r.fn.extend({
        attr: function(a, b) {
            return T(this, r.attr, a, b, arguments.length > 1)
        },
        removeAttr: function(a) {
            return this.each(function() {
                r.removeAttr(this, a)
            })
        }
    }), r.extend({
        attr: function(a, b, c) {
            var d, e, f = a.nodeType;
            if (3 !== f && 8 !== f && 2 !== f) {
                return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? lb : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d))
            }
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (!o.radioValue && "radio" === b && B(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b
                    }
                }
            }
        },
        removeAttr: function(a, b) {
            var c, d = 0,
                e = b && b.match(L);
            if (e && 1 === a.nodeType) {
                while (c = e[d++]) {
                    a.removeAttribute(c)
                }
            }
        }
    }), lb = {
        set: function(a, b, c) {
            return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c
        }
    }, r.each(r.expr.match.bool.source.match(/\w+/g), function(a, b) {
        var c = mb[b] || r.find.attr;
        mb[b] = function(a, b, d) {
            var e, f, g = b.toLowerCase();
            return d || (f = mb[g], mb[g] = e, e = null != c(a, b, d) ? g : null, mb[g] = f), e
        }
    });
    var nb = /^(?:input|select|textarea|button)$/i,
        ob = /^(?:a|area)$/i;
    r.fn.extend({
        prop: function(a, b) {
            return T(this, r.prop, a, b, arguments.length > 1)
        },
        removeProp: function(a) {
            return this.each(function() {
                delete this[r.propFix[a] || a]
            })
        }
    }), r.extend({
        prop: function(a, b, c) {
            var d, e, f = a.nodeType;
            if (3 !== f && 8 !== f && 2 !== f) {
                return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]
            }
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    var b = r.find.attr(a, "tabindex");
                    return b ? parseInt(b, 10) : nb.test(a.nodeName) || ob.test(a.nodeName) && a.href ? 0 : -1
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    }), o.optSelected || (r.propHooks.selected = {
        get: function(a) {
            var b = a.parentNode;
            return b && b.parentNode && b.parentNode.selectedIndex, null
        },
        set: function(a) {
            var b = a.parentNode;
            b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex)
        }
    }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        r.propFix[this.toLowerCase()] = this
    });

    function pb(a) {
        var b = a.match(L) || [];
        return b.join(" ")
    }

    function qb(a) {
        return a.getAttribute && a.getAttribute("class") || ""
    }
    r.fn.extend({
        addClass: function(a) {
            var b, c, d, e, f, g, h, i = 0;
            if (r.isFunction(a)) {
                return this.each(function(b) {
                    r(this).addClass(a.call(this, b, qb(this)))
                })
            }
            if ("string" == typeof a && a) {
                b = a.match(L) || [];
                while (c = this[i++]) {
                    if (e = qb(c), d = 1 === c.nodeType && " " + pb(e) + " ") {
                        g = 0;
                        while (f = b[g++]) {
                            d.indexOf(" " + f + " ") < 0 && (d += f + " ")
                        }
                        h = pb(d), e !== h && c.setAttribute("class", h)
                    }
                }
            }
            return this
        },
        removeClass: function(a) {
            var b, c, d, e, f, g, h, i = 0;
            if (r.isFunction(a)) {
                return this.each(function(b) {
                    r(this).removeClass(a.call(this, b, qb(this)))
                })
            }
            if (!arguments.length) {
                return this.attr("class", "")
            }
            if ("string" == typeof a && a) {
                b = a.match(L) || [];
                while (c = this[i++]) {
                    if (e = qb(c), d = 1 === c.nodeType && " " + pb(e) + " ") {
                        g = 0;
                        while (f = b[g++]) {
                            while (d.indexOf(" " + f + " ") > -1) {
                                d = d.replace(" " + f + " ", " ")
                            }
                        }
                        h = pb(d), e !== h && c.setAttribute("class", h)
                    }
                }
            }
            return this
        },
        toggleClass: function(a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function(c) {
                r(this).toggleClass(a.call(this, c, qb(this), b), b)
            }) : this.each(function() {
                var b, d, e, f;
                if ("string" === c) {
                    d = 0, e = r(this), f = a.match(L) || [];
                    while (b = f[d++]) {
                        e.hasClass(b) ? e.removeClass(b) : e.addClass(b)
                    }
                } else {
                    void 0 !== a && "boolean" !== c || (b = qb(this), b && W.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : W.get(this, "__className__") || ""))
                }
            })
        },
        hasClass: function(a) {
            var b, c, d = 0;
            b = " " + a + " ";
            while (c = this[d++]) {
                if (1 === c.nodeType && (" " + pb(qb(c)) + " ").indexOf(b) > -1) {
                    return !0
                }
            }
            return !1
        }
    });
    var rb = /\r/g;
    r.fn.extend({
        val: function(a) {
            var b, c, d, e = this[0];
            if (arguments.length) {
                return d = r.isFunction(a), this.each(function(c) {
                    var e;
                    1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = r.map(e, function(a) {
                        return null == a ? "" : a + ""
                    })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e))
                })
            }
            if (e) {
                return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(rb, "") : null == c ? "" : c)
            }
        }
    }), r.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = r.find.attr(a, "value");
                    return null != b ? b : pb(r.text(a))
                }
            },
            select: {
                get: function(a) {
                    var b, c, d, e = a.options,
                        f = a.selectedIndex,
                        g = "select-one" === a.type,
                        h = g ? null : [],
                        i = g ? f + 1 : e.length;
                    for (d = f < 0 ? i : g ? f : 0; d < i; d++) {
                        if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, "optgroup"))) {
                            if (b = r(c).val(), g) {
                                return b
                            }
                            h.push(b)
                        }
                    }
                    return h
                },
                set: function(a, b) {
                    var c, d, e = a.options,
                        f = r.makeArray(b),
                        g = e.length;
                    while (g--) {
                        d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0)
                    }
                    return c || (a.selectedIndex = -1), f
                }
            }
        }
    }), r.each(["radio", "checkbox"], function() {
        r.valHooks[this] = {
            set: function(a, b) {
                if (Array.isArray(b)) {
                    return a.checked = r.inArray(r(a).val(), b) > -1
                }
            }
        }, o.checkOn || (r.valHooks[this].get = function(a) {
            return null === a.getAttribute("value") ? "on" : a.value
        })
    });
    var sb = /^(?:focusinfocus|focusoutblur)$/;
    r.extend(r.event, {
        trigger: function(b, c, e, f) {
            var g, h, i, j, k, m, n, o = [e || d],
                p = l.call(b, "type") ? b.type : b,
                q = l.call(b, "namespace") ? b.namespace.split(".") : [];
            if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !sb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == typeof b && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
                if (!f && !n.noBubble && !r.isWindow(e)) {
                    for (j = n.delegateType || p, sb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) {
                        o.push(h), i = h
                    }
                    i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a)
                }
                g = 0;
                while ((h = o[g++]) && !b.isPropagationStopped()) {
                    b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, "events") || {})[b.type] && W.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault())
                }
                return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result
            }
        },
        simulate: function(a, b, c) {
            var d = r.extend(new r.Event, c, {
                type: a,
                isSimulated: !0
            });
            r.event.trigger(d, null, b)
        }
    }), r.fn.extend({
        trigger: function(a, b) {
            return this.each(function() {
                r.event.trigger(a, b, this)
            })
        },
        triggerHandler: function(a, b) {
            var c = this[0];
            if (c) {
                return r.event.trigger(a, b, c, !0)
            }
        }
    }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(a, b) {
        r.fn[b] = function(a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
        }
    }), r.fn.extend({
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        }
    }), o.focusin = "onfocusin" in a, o.focusin || r.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var c = function(a) {
            r.event.simulate(b, a.target, r.event.fix(a))
        };
        r.event.special[b] = {
            setup: function() {
                var d = this.ownerDocument || this,
                    e = W.access(d, b);
                e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1)
            },
            teardown: function() {
                var d = this.ownerDocument || this,
                    e = W.access(d, b) - 1;
                e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b))
            }
        }
    });
    var tb = a.location,
        ub = r.now(),
        vb = /\?/;
    r.parseXML = function(b) {
        var c;
        if (!b || "string" != typeof b) {
            return null
        }
        try {
            c = (new a.DOMParser).parseFromString(b, "text/xml")
        } catch (d) {
            c = void 0
        }
        return c && !c.getElementsByTagName("parsererror").length || r.error("Invalid XML: " + b), c
    };
    var wb = /\[\]$/,
        xb = /\r?\n/g,
        yb = /^(?:submit|button|image|reset|file)$/i,
        zb = /^(?:input|select|textarea|keygen)/i;

    function Ab(a, b, c, d) {
        var e;
        if (Array.isArray(b)) {
            r.each(b, function(b, e) {
                c || wb.test(a) ? d(a, e) : Ab(a + "[" + ("object" == typeof e && null != e ? b : "") + "]", e, c, d)
            })
        } else {
            if (c || "object" !== r.type(b)) {
                d(a, b)
            } else {
                for (e in b) {
                    Ab(a + "[" + e + "]", b[e], c, d)
                }
            }
        }
    }
    r.param = function(a, b) {
        var c, d = [],
            e = function(a, b) {
                var c = r.isFunction(b) ? b() : b;
                d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c)
            };
        if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) {
            r.each(a, function() {
                e(this.name, this.value)
            })
        } else {
            for (c in a) {
                Ab(c, a[c], b, e)
            }
        }
        return d.join("&")
    }, r.fn.extend({
        serialize: function() {
            return r.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                var a = r.prop(this, "elements");
                return a ? r.makeArray(a) : this
            }).filter(function() {
                var a = this.type;
                return this.name && !r(this).is(":disabled") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !ja.test(a))
            }).map(function(a, b) {
                var c = r(this).val();
                return null == c ? null : Array.isArray(c) ? r.map(c, function(a) {
                    return {
                        name: b.name,
                        value: a.replace(xb, "\r\n")
                    }
                }) : {
                    name: b.name,
                    value: c.replace(xb, "\r\n")
                }
            }).get()
        }
    });
    var Bb = /%20/g,
        Cb = /#.*$/,
        Db = /([?&])_=[^&]*/,
        Eb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Fb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Gb = /^(?:GET|HEAD)$/,
        Hb = /^\/\//,
        Ib = {},
        Jb = {},
        Kb = "*/".concat("*"),
        Lb = d.createElement("a");
    Lb.href = tb.href;

    function Mb(a) {
        return function(b, c) {
            "string" != typeof b && (c = b, b = "*");
            var d, e = 0,
                f = b.toLowerCase().match(L) || [];
            if (r.isFunction(c)) {
                while (d = f[e++]) {
                    "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c)
                }
            }
        }
    }

    function Nb(a, b, c, d) {
        var e = {},
            f = a === Jb;

        function g(h) {
            var i;
            return e[h] = !0, r.each(a[h] || [], function(a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1)
            }), i
        }
        return g(b.dataTypes[0]) || !e["*"] && g("*")
    }

    function Ob(a, b) {
        var c, d, e = r.ajaxSettings.flatOptions || {};
        for (c in b) {
            void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c])
        }
        return d && r.extend(!0, a, d), a
    }

    function Pb(a, b, c) {
        var d, e, f, g, h = a.contents,
            i = a.dataTypes;
        while ("*" === i[0]) {
            i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"))
        }
        if (d) {
            for (e in h) {
                if (h[e] && h[e].test(d)) {
                    i.unshift(e);
                    break
                }
            }
        }
        if (i[0] in c) {
            f = i[0]
        } else {
            for (e in c) {
                if (!i[0] || a.converters[e + " " + i[0]]) {
                    f = e;
                    break
                }
                g || (g = e)
            }
            f = f || g
        }
        if (f) {
            return f !== i[0] && i.unshift(f), c[f]
        }
    }

    function Qb(a, b, c, d) {
        var e, f, g, h, i, j = {},
            k = a.dataTypes.slice();
        if (k[1]) {
            for (g in a.converters) {
                j[g.toLowerCase()] = a.converters[g]
            }
        }
        f = k.shift();
        while (f) {
            if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) {
                if ("*" === f) {
                    f = i
                } else {
                    if ("*" !== i && i !== f) {
                        if (g = j[i + " " + f] || j["* " + f], !g) {
                            for (e in j) {
                                if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                                    g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                                    break
                                }
                            }
                        }
                        if (g !== !0) {
                            if (g && a["throws"]) {
                                b = g(b)
                            } else {
                                try {
                                    b = g(b)
                                } catch (l) {
                                    return {
                                        state: "parsererror",
                                        error: g ? l : "No conversion from " + i + " to " + f
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: b
        }
    }
    r.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: tb.href,
            type: "GET",
            isLocal: Fb.test(tb.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Kb,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": r.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(a, b) {
            return b ? Ob(Ob(a, r.ajaxSettings), b) : Ob(r.ajaxSettings, a)
        },
        ajaxPrefilter: Mb(Ib),
        ajaxTransport: Mb(Jb),
        ajax: function(b, c) {
            "object" == typeof b && (c = b, b = void 0), c = c || {};
            var e, f, g, h, i, j, k, l, m, n, o = r.ajaxSetup({}, c),
                p = o.context || o,
                q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,
                s = r.Deferred(),
                t = r.Callbacks("once memory"),
                u = o.statusCode || {},
                v = {},
                w = {},
                x = "canceled",
                y = {
                    readyState: 0,
                    getResponseHeader: function(a) {
                        var b;
                        if (k) {
                            if (!h) {
                                h = {};
                                while (b = Eb.exec(g)) {
                                    h[b[1].toLowerCase()] = b[2]
                                }
                            }
                            b = h[a.toLowerCase()]
                        }
                        return null == b ? null : b
                    },
                    getAllResponseHeaders: function() {
                        return k ? g : null
                    },
                    setRequestHeader: function(a, b) {
                        return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this
                    },
                    overrideMimeType: function(a) {
                        return null == k && (o.mimeType = a), this
                    },
                    statusCode: function(a) {
                        var b;
                        if (a) {
                            if (k) {
                                y.always(a[y.status])
                            } else {
                                for (b in a) {
                                    u[b] = [u[b], a[b]]
                                }
                            }
                        }
                        return this
                    },
                    abort: function(a) {
                        var b = a || x;
                        return e && e.abort(b), A(0, b), this
                    }
                };
            if (s.promise(y), o.url = ((b || o.url || tb.href) + "").replace(Hb, tb.protocol + "//"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || "*").toLowerCase().match(L) || [""], null == o.crossDomain) {
                j = d.createElement("a");
                try {
                    j.href = o.url, j.href = j.href, o.crossDomain = Lb.protocol + "//" + Lb.host != j.protocol + "//" + j.host
                } catch (z) {
                    o.crossDomain = !0
                }
            }
            if (o.data && o.processData && "string" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Nb(Ib, o, c, y), k) {
                return y
            }
            l = r.event && o.global, l && 0 === r.active++ && r.event.trigger("ajaxStart"), o.type = o.type.toUpperCase(), o.hasContent = !Gb.test(o.type), f = o.url.replace(Cb, ""), o.hasContent ? o.data && o.processData && 0 === (o.contentType || "").indexOf("application/x-www-form-urlencoded") && (o.data = o.data.replace(Bb, "+")) : (n = o.url.slice(f.length), o.data && (f += (vb.test(f) ? "&" : "?") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Db, "$1"), n = (vb.test(f) ? "&" : "?") + "_=" + ub++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader("If-Modified-Since", r.lastModified[f]), r.etag[f] && y.setRequestHeader("If-None-Match", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader("Content-Type", o.contentType), y.setRequestHeader("Accept", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + ("*" !== o.dataTypes[0] ? ", " + Kb + "; q=0.01" : "") : o.accepts["*"]);
            for (m in o.headers) {
                y.setRequestHeader(m, o.headers[m])
            }
            if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) {
                return y.abort()
            }
            if (x = "abort", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Nb(Jb, o, c, y)) {
                if (y.readyState = 1, l && q.trigger("ajaxSend", [y, o]), k) {
                    return y
                }
                o.async && o.timeout > 0 && (i = a.setTimeout(function() {
                    y.abort("timeout")
                }, o.timeout));
                try {
                    k = !1, e.send(v, A)
                } catch (z) {
                    if (k) {
                        throw z
                    }
                    A(-1, z)
                }
            } else {
                A(-1, "No Transport")
            }

            function A(b, c, d, h) {
                var j, m, n, v, w, x = c;
                k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || "", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Pb(o, y, d)), v = Qb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader("Last-Modified"), w && (r.lastModified[f] = w), w = y.getResponseHeader("etag"), w && (r.etag[f] = w)), 204 === b || "HEAD" === o.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = "error", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + "", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? "ajaxSuccess" : "ajaxError", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger("ajaxComplete", [y, o]), --r.active || r.event.trigger("ajaxStop")))
            }
            return y
        },
        getJSON: function(a, b, c) {
            return r.get(a, b, c, "json")
        },
        getScript: function(a, b) {
            return r.get(a, void 0, b, "script")
        }
    }), r.each(["get", "post"], function(a, b) {
        r[b] = function(a, c, d, e) {
            return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            }, r.isPlainObject(a) && a))
        }
    }), r._evalUrl = function(a) {
        return r.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            "throws": !0
        })
    }, r.fn.extend({
        wrapAll: function(a) {
            var b;
            return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                var a = this;
                while (a.firstElementChild) {
                    a = a.firstElementChild
                }
                return a
            }).append(this)), this
        },
        wrapInner: function(a) {
            return r.isFunction(a) ? this.each(function(b) {
                r(this).wrapInner(a.call(this, b))
            }) : this.each(function() {
                var b = r(this),
                    c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a)
            })
        },
        wrap: function(a) {
            var b = r.isFunction(a);
            return this.each(function(c) {
                r(this).wrapAll(b ? a.call(this, c) : a)
            })
        },
        unwrap: function(a) {
            return this.parent(a).not("body").each(function() {
                r(this).replaceWith(this.childNodes)
            }), this
        }
    }), r.expr.pseudos.hidden = function(a) {
        return !r.expr.pseudos.visible(a)
    }, r.expr.pseudos.visible = function(a) {
        return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length)
    }, r.ajaxSettings.xhr = function() {
        try {
            return new a.XMLHttpRequest
        } catch (b) {}
    };
    var Rb = {
            0: 200,
            1223: 204
        },
        Sb = r.ajaxSettings.xhr();
    o.cors = !!Sb && "withCredentials" in Sb, o.ajax = Sb = !!Sb, r.ajaxTransport(function(b) {
        var c, d;
        if (o.cors || Sb && !b.crossDomain) {
            return {
                send: function(e, f) {
                    var g, h = b.xhr();
                    if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) {
                        for (g in b.xhrFields) {
                            h[g] = b.xhrFields[g]
                        }
                    }
                    b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");
                    for (g in e) {
                        h.setRequestHeader(g, e[g])
                    }
                    c = function(a) {
                        return function() {
                            c && (c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Rb[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? {
                                binary: h.response
                            } : {
                                text: h.responseText
                            }, h.getAllResponseHeaders()))
                        }
                    }, h.onload = c(), d = h.onerror = c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function() {
                        4 === h.readyState && a.setTimeout(function() {
                            c && d()
                        })
                    }, c = c("abort");
                    try {
                        h.send(b.hasContent && b.data || null)
                    } catch (i) {
                        if (c) {
                            throw i
                        }
                    }
                },
                abort: function() {
                    c && c()
                }
            }
        }
    }), r.ajaxPrefilter(function(a) {
        a.crossDomain && (a.contents.script = !1)
    }), r.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(a) {
                return r.globalEval(a), a
            }
        }
    }), r.ajaxPrefilter("script", function(a) {
        void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET")
    }), r.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var b, c;
            return {
                send: function(e, f) {
                    b = r("<script>").prop({
                        charset: a.scriptCharset,
                        src: a.url
                    }).on("load error", c = function(a) {
                        b.remove(), c = null, a && f("error" === a.type ? 404 : 200, a.type)
                    }), d.head.appendChild(b[0])
                },
                abort: function() {
                    c && c()
                }
            }
        }
    });
    var Tb = [],
        Ub = /(=)\?(?=&|$)|\?\?/;
    r.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var a = Tb.pop() || r.expando + "_" + ub++;
            return this[a] = !0, a
        }
    }), r.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e, f, g, h = b.jsonp !== !1 && (Ub.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Ub.test(b.data) && "data");
        if (h || "jsonp" === b.dataTypes[0]) {
            return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Ub, "$1" + e) : b.jsonp !== !1 && (b.url += (vb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function() {
                return g || r.error(e + " was not called"), g[0]
            }, b.dataTypes[0] = "json", f = a[e], a[e] = function() {
                g = arguments
            }, d.always(function() {
                void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Tb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0
            }), "script"
        }
    }), o.createHTMLDocument = function() {
        var a = d.implementation.createHTMLDocument("").body;
        return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length
    }(), r.parseHTML = function(a, b, c) {
        if ("string" != typeof a) {
            return []
        }
        "boolean" == typeof b && (c = b, b = !1);
        var e, f, g;
        return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes))
    }, r.fn.load = function(a, b, c) {
        var d, e, f, g = this,
            h = a.indexOf(" ");
        return h > -1 && (d = pb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && r.ajax({
            url: a,
            type: e || "GET",
            dataType: "html",
            data: b
        }).done(function(a) {
            f = arguments, g.html(d ? r("<div>").append(r.parseHTML(a)).find(d) : a)
        }).always(c && function(a, b) {
            g.each(function() {
                c.apply(this, f || [a.responseText, b, a])
            })
        }), this
    }, r.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(a, b) {
        r.fn[b] = function(a) {
            return this.on(b, a)
        }
    }), r.expr.pseudos.animated = function(a) {
        return r.grep(r.timers, function(b) {
            return a === b.elem
        }).length
    }, r.offset = {
        setOffset: function(a, b, c) {
            var d, e, f, g, h, i, j, k = r.css(a, "position"),
                l = r(a),
                m = {};
            "static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m)
        }
    }, r.fn.extend({
        offset: function(a) {
            if (arguments.length) {
                return void 0 === a ? this : this.each(function(b) {
                    r.offset.setOffset(this, a, b)
                })
            }
            var b, c, d, e, f = this[0];
            if (f) {
                return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, {
                    top: d.top + e.pageYOffset - c.clientTop,
                    left: d.left + e.pageXOffset - c.clientLeft
                }) : {
                    top: 0,
                    left: 0
                }
            }
        },
        position: function() {
            if (this[0]) {
                var a, b, c = this[0],
                    d = {
                        top: 0,
                        left: 0
                    };
                return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], "html") || (d = a.offset()), d = {
                    top: d.top + r.css(a[0], "borderTopWidth", !0),
                    left: d.left + r.css(a[0], "borderLeftWidth", !0)
                }), {
                    top: b.top - d.top - r.css(c, "marginTop", !0),
                    left: b.left - d.left - r.css(c, "marginLeft", !0)
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                var a = this.offsetParent;
                while (a && "static" === r.css(a, "position")) {
                    a = a.offsetParent
                }
                return a || ra
            })
        }
    }), r.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(a, b) {
        var c = "pageYOffset" === b;
        r.fn[a] = function(d) {
            return T(this, function(a, d, e) {
                var f;
                return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void(f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e)
            }, a, d, arguments.length)
        }
    }), r.each(["top", "left"], function(a, b) {
        r.cssHooks[b] = Pa(o.pixelPosition, function(a, c) {
            if (c) {
                return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + "px" : c
            }
        })
    }), r.each({
        Height: "height",
        Width: "width"
    }, function(a, b) {
        r.each({
            padding: "inner" + a,
            content: b,
            "": "outer" + a
        }, function(c, d) {
            r.fn[d] = function(e, f) {
                var g = arguments.length && (c || "boolean" != typeof e),
                    h = c || (e === !0 || f === !0 ? "margin" : "border");
                return T(this, function(b, c, e) {
                    var f;
                    return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h)
                }, b, g ? e : void 0, g)
            }
        })
    }), r.fn.extend({
        bind: function(a, b, c) {
            return this.on(a, null, b, c)
        },
        unbind: function(a, b) {
            return this.off(a, null, b)
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d)
        },
        undelegate: function(a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c)
        }
    }), r.holdReady = function(a) {
        a ? r.readyWait++ : r.ready(!0)
    }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B, "function" == typeof define && define.amd && define("jquery", [], function() {
        return r
    });
    var Vb = a.jQuery,
        Wb = a.$;
    return r.noConflict = function(b) {
        return a.$ === r && (a.$ = Wb), b && a.jQuery === r && (a.jQuery = Vb), r
    }, b || (a.jQuery = a.$ = r), r
});
window.fs = jQuery;
var vFSScriptDocument = jQuery("#jsFastForms");
var vNoConflictEnabled = true;
if (typeof vFSScriptDocument !== "undefined" && vFSScriptDocument != null) {
    vNoConflictEnabled = vFSScriptDocument.attr("data-fs-disablenoconflict") == "true" ? false : true
}
if (vNoConflictEnabled) {
    console.log("[FORM]Enabling No Conflict in jQuery.");
    fs = $.noConflict(true)
}
console.log("[FORM]Checking Formstack jQuery version: " + fs().jquery);
/*! jQuery UI - v1.12.1 - 2016-09-14
 * http://jqueryui.com
 * Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
 * Copyright jQuery Foundation and other contributors; Licensed MIT */
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else {
        factory(fs)
    }
}(function($) {
    $.ui = $.ui || {};
    var version = $.ui.version = "1.12.1";
    /*!
     * jQuery UI Widget 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetUuid = 0;
    var widgetSlice = Array.prototype.slice;
    $.cleanData = (function(orig) {
        return function(elems) {
            var events, elem, i;
            for (i = 0;
                (elem = elems[i]) != null; i++) {
                try {
                    events = $._data(elem, "events");
                    if (events && events.remove) {
                        $(elem).triggerHandler("remove")
                    }
                } catch (e) {}
            }
            orig(elems)
        }
    })($.cleanData);
    $.widget = function(name, base, prototype) {
        var existingConstructor, constructor, basePrototype;
        var proxiedPrototype = {};
        var namespace = name.split(".")[0];
        name = name.split(".")[1];
        var fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget
        }
        if ($.isArray(prototype)) {
            prototype = $.extend.apply(null, [{}].concat(prototype))
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName)
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) {
                return new constructor(options, element)
            }
            if (arguments.length) {
                this._createWidget(options, element)
            }
        };
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return
            }
            proxiedPrototype[prop] = (function() {
                function _super() {
                    return base.prototype[prop].apply(this, arguments)
                }

                function _superApply(args) {
                    return base.prototype[prop].apply(this, args)
                }
                return function() {
                    var __super = this._super;
                    var __superApply = this._superApply;
                    var returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue
                }
            })()
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto)
            });
            delete existingConstructor._childConstructors
        } else {
            base._childConstructors.push(constructor)
        }
        $.widget.bridge(name, constructor);
        return constructor
    };
    $.widget.extend = function(target) {
        var input = widgetSlice.call(arguments, 1);
        var inputIndex = 0;
        var inputLength = input.length;
        var key;
        var value;
        for (; inputIndex < inputLength; inputIndex++) {
            for (key in input[inputIndex]) {
                value = input[inputIndex][key];
                try {
                    if (typeof input[inputIndex].hasOwnProperty === "function" && input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                        if ($.isPlainObject(value)) {
                            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value)
                        } else {
                            target[key] = value
                        }
                    }
                } catch (err) {
                    console.log("FF $.widget.extend exception: " + err)
                }
            }
        }
        return target
    };
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = typeof options === "string";
            var args = widgetSlice.call(arguments, 1);
            var returnValue = this;
            if (isMethodCall) {
                if (!this.length && options === "instance") {
                    returnValue = undefined
                } else {
                    this.each(function() {
                        var methodValue;
                        var instance = $.data(this, fullName);
                        if (options === "instance") {
                            returnValue = instance;
                            return false
                        }
                        if (!instance) {
                            return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'")
                        }
                        if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                            return $.error("no such method '" + options + "' for " + name + " widget instance")
                        }
                        methodValue = instance[options].apply(instance, args);
                        if (methodValue !== instance && methodValue !== undefined) {
                            returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                            return false
                        }
                    })
                }
            } else {
                if (args.length) {
                    options = $.widget.extend.apply(null, [options].concat(args))
                }
                this.each(function() {
                    var instance = $.data(this, fullName);
                    if (instance) {
                        instance.option(options || {});
                        if (instance._init) {
                            instance._init()
                        }
                    } else {
                        $.data(this, fullName, new object(options, this))
                    }
                })
            }
            return returnValue
        }
    };
    $.Widget = function() {};
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            classes: {},
            disabled: false,
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = widgetUuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            this.classesElementLookup = {};
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function(event) {
                        if (event.target === element) {
                            this.destroy()
                        }
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow)
            }
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this._create();
            if (this.options.disabled) {
                this._setOptionDisabled(this.options.disabled)
            }
            this._trigger("create", null, this._getCreateEventData());
            this._init()
        },
        _getCreateOptions: function() {
            return {}
        },
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            var that = this;
            this._destroy();
            $.each(this.classesElementLookup, function(key, value) {
                that._removeClass(value, key)
            });
            this.element.off(this.eventNamespace).removeData(this.widgetFullName);
            this.widget().off(this.eventNamespace).removeAttr("aria-disabled");
            this.bindings.off(this.eventNamespace)
        },
        _destroy: $.noop,
        widget: function() {
            return this.element
        },
        option: function(key, value) {
            var options = key;
            var parts;
            var curOption;
            var i;
            if (arguments.length === 0) {
                return $.widget.extend({}, this.options)
            }
            if (typeof key === "string") {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]]
                    }
                    key = parts.pop();
                    if (arguments.length === 1) {
                        return curOption[key] === undefined ? null : curOption[key]
                    }
                    curOption[key] = value
                } else {
                    if (arguments.length === 1) {
                        return this.options[key] === undefined ? null : this.options[key]
                    }
                    options[key] = value
                }
            }
            this._setOptions(options);
            return this
        },
        _setOptions: function(options) {
            var key;
            for (key in options) {
                this._setOption(key, options[key])
            }
            return this
        },
        _setOption: function(key, value) {
            if (key === "classes") {
                this._setOptionClasses(value)
            }
            this.options[key] = value;
            if (key === "disabled") {
                this._setOptionDisabled(value)
            }
            return this
        },
        _setOptionClasses: function(value) {
            var classKey, elements, currentElements;
            for (classKey in value) {
                currentElements = this.classesElementLookup[classKey];
                if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {
                    continue
                }
                elements = $(currentElements.get());
                this._removeClass(currentElements, classKey);
                elements.addClass(this._classes({
                    element: elements,
                    keys: classKey,
                    classes: value,
                    add: true
                }))
            }
        },
        _setOptionDisabled: function(value) {
            this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value);
            if (value) {
                this._removeClass(this.hoverable, null, "ui-state-hover");
                this._removeClass(this.focusable, null, "ui-state-focus")
            }
        },
        enable: function() {
            return this._setOptions({
                disabled: false
            })
        },
        disable: function() {
            return this._setOptions({
                disabled: true
            })
        },
        _classes: function(options) {
            var full = [];
            var that = this;
            options = $.extend({
                element: this.element,
                classes: this.options.classes || {}
            }, options);

            function processClassString(classes, checkOption) {
                var current, i;
                for (i = 0; i < classes.length; i++) {
                    current = that.classesElementLookup[classes[i]] || $();
                    if (options.add) {
                        current = $($.unique(current.get().concat(options.element.get())))
                    } else {
                        current = $(current.not(options.element).get())
                    }
                    that.classesElementLookup[classes[i]] = current;
                    full.push(classes[i]);
                    if (checkOption && options.classes[classes[i]]) {
                        full.push(options.classes[classes[i]])
                    }
                }
            }
            this._on(options.element, {
                remove: "_untrackClassesElement"
            });
            if (options.keys) {
                processClassString(options.keys.match(/\S+/g) || [], true)
            }
            if (options.extra) {
                processClassString(options.extra.match(/\S+/g) || [])
            }
            return full.join(" ")
        },
        _untrackClassesElement: function(event) {
            var that = this;
            $.each(that.classesElementLookup, function(key, value) {
                if ($.inArray(event.target, value) !== -1) {
                    that.classesElementLookup[key] = $(value.not(event.target).get())
                }
            })
        },
        _removeClass: function(element, keys, extra) {
            return this._toggleClass(element, keys, extra, false)
        },
        _addClass: function(element, keys, extra) {
            return this._toggleClass(element, keys, extra, true)
        },
        _toggleClass: function(element, keys, extra, add) {
            add = (typeof add === "boolean") ? add : extra;
            var shift = (typeof element === "string" || element === null),
                options = {
                    extra: shift ? keys : extra,
                    keys: shift ? element : keys,
                    element: shift ? this.element : element,
                    add: add
                };
            options.element.toggleClass(this._classes(options), add);
            return this
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement;
            var instance = this;
            if (typeof suppressDisabledCheck !== "boolean") {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget()
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element)
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                        return
                    }
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments)
                }
                if (typeof handler !== "string") {
                    handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++
                }
                var match = event.match(/^([\w:-]*)\s*(.*)$/);
                var eventName = match[1] + instance.eventNamespace;
                var selector = match[2];
                if (selector) {
                    delegateElement.on(eventName, selector, handlerProxy)
                } else {
                    element.on(eventName, handlerProxy)
                }
            })
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.off(eventName).off(eventName);
            this.bindings = $(this.bindings.not(element).get());
            this.focusable = $(this.focusable.not(element).get());
            this.hoverable = $(this.hoverable.not(element).get())
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments)
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0)
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    this._addClass($(event.currentTarget), null, "ui-state-hover")
                },
                mouseleave: function(event) {
                    this._removeClass($(event.currentTarget), null, "ui-state-hover")
                }
            })
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    this._addClass($(event.currentTarget), null, "ui-state-focus")
                },
                focusout: function(event) {
                    this._removeClass($(event.currentTarget), null, "ui-state-focus")
                }
            })
        },
        _trigger: function(type, event, data) {
            var prop, orig;
            var callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop]
                    }
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented())
        }
    };
    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if (typeof options === "string") {
                options = {
                    effect: options
                }
            }
            var hasOptions;
            var effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if (typeof options === "number") {
                options = {
                    duration: options
                }
            }
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) {
                element.delay(options.delay)
            }
            if (hasOptions && $.effects && $.effects.effect[effectName]) {
                element[method](options)
            } else {
                if (effectName !== method && element[effectName]) {
                    element[effectName](options.duration, options.easing, callback)
                } else {
                    element.queue(function(next) {
                        $(this)[method]();
                        if (callback) {
                            callback.call(element[0])
                        }
                        next()
                    })
                }
            }
        }
    });
    var widget = $.widget;
    /*!
     * jQuery UI Position 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/position/
     */
    (function() {
        var cachedScrollbarWidth, max = Math.max,
            abs = Math.abs,
            rhorizontal = /left|center|right/,
            rvertical = /top|center|bottom/,
            roffset = /[\+\-]\d+(\.[\d]+)?%?/,
            rposition = /^\w+/,
            rpercent = /%$/,
            _position = $.fn.position;

        function getOffsets(offsets, width, height) {
            return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)]
        }

        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0
        }

        function getDimensions(elem) {
            var raw = elem[0];
            if (raw.nodeType === 9) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: 0,
                        left: 0
                    }
                }
            }
            if ($.isWindow(raw)) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: elem.scrollTop(),
                        left: elem.scrollLeft()
                    }
                }
            }
            if (raw.preventDefault) {
                return {
                    width: 0,
                    height: 0,
                    offset: {
                        top: raw.pageY,
                        left: raw.pageX
                    }
                }
            }
            return {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            }
        }
        $.position = {
            scrollbarWidth: function() {
                if (cachedScrollbarWidth !== undefined) {
                    return cachedScrollbarWidth
                }
                var w1, w2, div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
                    innerDiv = div.children()[0];
                $("body").append(div);
                w1 = innerDiv.offsetWidth;
                div.css("overflow", "scroll");
                w2 = innerDiv.offsetWidth;
                if (w1 === w2) {
                    w2 = div[0].clientWidth
                }
                div.remove();
                return (cachedScrollbarWidth = w1 - w2)
            },
            getScrollInfo: function(within) {
                var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"),
                    overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"),
                    hasOverflowX = overflowX === "scroll" || (overflowX === "auto" && within.width < within.element[0].scrollWidth),
                    hasOverflowY = overflowY === "scroll" || (overflowY === "auto" && within.height < within.element[0].scrollHeight);
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                }
            },
            getWithinInfo: function(element) {
                var withinElement = $(element || window),
                    isWindow = $.isWindow(withinElement[0]),
                    isDocument = !!withinElement[0] && withinElement[0].nodeType === 9,
                    hasOffset = !isWindow && !isDocument;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: hasOffset ? $(element).offset() : {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    width: withinElement.outerWidth(),
                    height: withinElement.outerHeight()
                }
            }
        };
        $.fn.position = function(options) {
            if (!options || !options.of) {
                return _position.apply(this, arguments)
            }
            options = $.extend({}, options);
            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of),
                within = $.position.getWithinInfo(options.within),
                scrollInfo = $.position.getScrollInfo(within),
                collision = (options.collision || "flip").split(" "),
                offsets = {};
            dimensions = getDimensions(target);
            if (target[0].preventDefault) {
                options.at = "left top"
            }
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;
            basePosition = $.extend({}, targetOffset);
            $.each(["my", "at"], function() {
                var pos = (options[this] || "").split(" "),
                    horizontalOffset, verticalOffset;
                if (pos.length === 1) {
                    pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"]
                }
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
                horizontalOffset = roffset.exec(pos[0]);
                verticalOffset = roffset.exec(pos[1]);
                offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];
                options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]]
            });
            if (collision.length === 1) {
                collision[1] = collision[0]
            }
            if (options.at[0] === "right") {
                basePosition.left += targetWidth
            } else {
                if (options.at[0] === "center") {
                    basePosition.left += targetWidth / 2
                }
            }
            if (options.at[1] === "bottom") {
                basePosition.top += targetHeight
            } else {
                if (options.at[1] === "center") {
                    basePosition.top += targetHeight / 2
                }
            }
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
            basePosition.left += atOffset[0];
            basePosition.top += atOffset[1];
            return this.each(function() {
                var collisionPosition, using, elem = $(this),
                    elemWidth = elem.outerWidth(),
                    elemHeight = elem.outerHeight(),
                    marginLeft = parseCss(this, "marginLeft"),
                    marginTop = parseCss(this, "marginTop"),
                    collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width,
                    collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height,
                    position = $.extend({}, basePosition),
                    myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                if (options.my[0] === "right") {
                    position.left -= elemWidth
                } else {
                    if (options.my[0] === "center") {
                        position.left -= elemWidth / 2
                    }
                }
                if (options.my[1] === "bottom") {
                    position.top -= elemHeight
                } else {
                    if (options.my[1] === "center") {
                        position.top -= elemHeight / 2
                    }
                }
                position.left += myOffset[0];
                position.top += myOffset[1];
                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };
                $.each(["left", "top"], function(i, dir) {
                    if ($.ui.position[collision[i]]) {
                        $.ui.position[collision[i]][dir](position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        })
                    }
                });
                if (options.using) {
                    using = function(props) {
                        var left = targetOffset.left - position.left,
                            right = left + targetWidth - elemWidth,
                            top = targetOffset.top - position.top,
                            bottom = top + targetHeight - elemHeight,
                            feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                            };
                        if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                            feedback.horizontal = "center"
                        }
                        if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                            feedback.vertical = "middle"
                        }
                        if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                            feedback.important = "horizontal"
                        } else {
                            feedback.important = "vertical"
                        }
                        options.using.call(this, props, feedback)
                    }
                }
                elem.offset($.extend(position, {
                    using: using
                }))
            })
        };
        $.ui.position = {
            fit: {
                left: function(position, data) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                        outerWidth = within.width,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = withinOffset - collisionPosLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                        newOverRight;
                    if (data.collisionWidth > outerWidth) {
                        if (overLeft > 0 && overRight <= 0) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                            position.left += overLeft - newOverRight
                        } else {
                            if (overRight > 0 && overLeft <= 0) {
                                position.left = withinOffset
                            } else {
                                if (overLeft > overRight) {
                                    position.left = withinOffset + outerWidth - data.collisionWidth
                                } else {
                                    position.left = withinOffset
                                }
                            }
                        }
                    } else {
                        if (overLeft > 0) {
                            position.left += overLeft
                        } else {
                            if (overRight > 0) {
                                position.left -= overRight
                            } else {
                                position.left = max(position.left - collisionPosLeft, position.left)
                            }
                        }
                    }
                },
                top: function(position, data) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                        outerHeight = data.within.height,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = withinOffset - collisionPosTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                        newOverBottom;
                    if (data.collisionHeight > outerHeight) {
                        if (overTop > 0 && overBottom <= 0) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                            position.top += overTop - newOverBottom
                        } else {
                            if (overBottom > 0 && overTop <= 0) {
                                position.top = withinOffset
                            } else {
                                if (overTop > overBottom) {
                                    position.top = withinOffset + outerHeight - data.collisionHeight
                                } else {
                                    position.top = withinOffset
                                }
                            }
                        }
                    } else {
                        if (overTop > 0) {
                            position.top += overTop
                        } else {
                            if (overBottom > 0) {
                                position.top -= overBottom
                            } else {
                                position.top = max(position.top - collisionPosTop, position.top)
                            }
                        }
                    }
                }
            },
            flip: {
                left: function(position, data) {
                    var within = data.within,
                        withinOffset = within.offset.left + within.scrollLeft,
                        outerWidth = within.width,
                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = collisionPosLeft - offsetLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                        myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0,
                        atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0,
                        offset = -2 * data.offset[0],
                        newOverRight, newOverLeft;
                    if (overLeft < 0) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                        if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                            position.left += myOffset + atOffset + offset
                        }
                    } else {
                        if (overRight > 0) {
                            newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                                position.left += myOffset + atOffset + offset
                            }
                        }
                    }
                },
                top: function(position, data) {
                    var within = data.within,
                        withinOffset = within.offset.top + within.scrollTop,
                        outerHeight = within.height,
                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = collisionPosTop - offsetTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                        top = data.my[1] === "top",
                        myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0,
                        atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0,
                        offset = -2 * data.offset[1],
                        newOverTop, newOverBottom;
                    if (overTop < 0) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                        if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                            position.top += myOffset + atOffset + offset
                        }
                    } else {
                        if (overBottom > 0) {
                            newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                            if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                                position.top += myOffset + atOffset + offset
                            }
                        }
                    }
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply(this, arguments);
                    $.ui.position.fit.left.apply(this, arguments)
                },
                top: function() {
                    $.ui.position.flip.top.apply(this, arguments);
                    $.ui.position.fit.top.apply(this, arguments)
                }
            }
        }
    })();
    var position = $.ui.position;
    /*!
     * jQuery UI :data 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var data = $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName)
            }
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3])
        }
    });
    /*!
     * jQuery UI Disable Selection 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var disableSelection = $.fn.extend({
        disableSelection: (function() {
            var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
            return function() {
                return this.on(eventType + ".ff-ui-disableSelection", function(event) {
                    event.preventDefault()
                })
            }
        })(),
        enableSelection: function() {
            return this.off(".ff-ui-disableSelection")
        }
    });
    /*!
     * jQuery UI Effects 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var dataSpace = "ui-effects-",
        dataSpaceStyle = "ui-effects-style",
        dataSpaceAnimated = "ui-effects-animated",
        jQuery = $;
    $.effects = {
        effect: {}
    };
    /*!
     * jQuery Color Animations v2.1.2
     * https://github.com/jquery/jquery-color
     *
     * Copyright 2014 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * Date: Wed Jan 16 08:47:09 2013 -0600
     */
    (function(jQuery, undefined) {
        var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
            rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
            stringParsers = [{
                re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function(execResult) {
                    return [execResult[1], execResult[2], execResult[3], execResult[4]]
                }
            }, {
                re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function(execResult) {
                    return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]]
                }
            }, {
                re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                parse: function(execResult) {
                    return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)]
                }
            }, {
                re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                parse: function(execResult) {
                    return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)]
                }
            }, {
                re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                space: "hsla",
                parse: function(execResult) {
                    return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]]
                }
            }],
            color = jQuery.Color = function(color, green, blue, alpha) {
                return new jQuery.Color.fn.parse(color, green, blue, alpha)
            },
            spaces = {
                rgba: {
                    props: {
                        red: {
                            idx: 0,
                            type: "byte"
                        },
                        green: {
                            idx: 1,
                            type: "byte"
                        },
                        blue: {
                            idx: 2,
                            type: "byte"
                        }
                    }
                },
                hsla: {
                    props: {
                        hue: {
                            idx: 0,
                            type: "degrees"
                        },
                        saturation: {
                            idx: 1,
                            type: "percent"
                        },
                        lightness: {
                            idx: 2,
                            type: "percent"
                        }
                    }
                }
            },
            propTypes = {
                "byte": {
                    floor: true,
                    max: 255
                },
                percent: {
                    max: 1
                },
                degrees: {
                    mod: 360,
                    floor: true
                }
            },
            support = color.support = {},
            supportElem = jQuery("<p>")[0],
            colors, each = jQuery.each;
        supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
        support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
        each(spaces, function(spaceName, space) {
            space.cache = "_" + spaceName;
            space.props.alpha = {
                idx: 3,
                type: "percent",
                def: 1
            }
        });

        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            if (value == null) {
                return (allowEmpty || !prop.def) ? null : prop.def
            }
            value = type.floor ? ~~value : parseFloat(value);
            if (isNaN(value)) {
                return prop.def
            }
            if (type.mod) {
                return (value + type.mod) % type.mod
            }
            return 0 > value ? 0 : type.max < value ? type.max : value
        }

        function stringParse(string) {
            var inst = color(),
                rgba = inst._rgba = [];
            string = string.toLowerCase();
            each(stringParsers, function(i, parser) {
                var parsed, match = parser.re.exec(string),
                    values = match && parser.parse(match),
                    spaceName = parser.space || "rgba";
                if (values) {
                    parsed = inst[spaceName](values);
                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                    rgba = inst._rgba = parsed._rgba;
                    return false
                }
            });
            if (rgba.length) {
                if (rgba.join() === "0,0,0,0") {
                    jQuery.extend(rgba, colors.transparent)
                }
                return inst
            }
            return colors[string]
        }
        color.fn = jQuery.extend(color.prototype, {
            parse: function(red, green, blue, alpha) {
                if (red === undefined) {
                    this._rgba = [null, null, null, null];
                    return this
                }
                if (red.jquery || red.nodeType) {
                    red = jQuery(red).css(green);
                    green = undefined
                }
                var inst = this,
                    type = jQuery.type(red),
                    rgba = this._rgba = [];
                if (green !== undefined) {
                    red = [red, green, blue, alpha];
                    type = "array"
                }
                if (type === "string") {
                    return this.parse(stringParse(red) || colors._default)
                }
                if (type === "array") {
                    each(spaces.rgba.props, function(key, prop) {
                        rgba[prop.idx] = clamp(red[prop.idx], prop)
                    });
                    return this
                }
                if (type === "object") {
                    if (red instanceof color) {
                        each(spaces, function(spaceName, space) {
                            if (red[space.cache]) {
                                inst[space.cache] = red[space.cache].slice()
                            }
                        })
                    } else {
                        each(spaces, function(spaceName, space) {
                            var cache = space.cache;
                            each(space.props, function(key, prop) {
                                if (!inst[cache] && space.to) {
                                    if (key === "alpha" || red[key] == null) {
                                        return
                                    }
                                    inst[cache] = space.to(inst._rgba)
                                }
                                inst[cache][prop.idx] = clamp(red[key], prop, true)
                            });
                            if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                inst[cache][3] = 1;
                                if (space.from) {
                                    inst._rgba = space.from(inst[cache])
                                }
                            }
                        })
                    }
                    return this
                }
            },
            is: function(compare) {
                var is = color(compare),
                    same = true,
                    inst = this;
                each(spaces, function(_, space) {
                    var localCache, isCache = is[space.cache];
                    if (isCache) {
                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                        each(space.props, function(_, prop) {
                            if (isCache[prop.idx] != null) {
                                same = (isCache[prop.idx] === localCache[prop.idx]);
                                return same
                            }
                        })
                    }
                    return same
                });
                return same
            },
            _space: function() {
                var used = [],
                    inst = this;
                each(spaces, function(spaceName, space) {
                    if (inst[space.cache]) {
                        used.push(spaceName)
                    }
                });
                return used.pop()
            },
            transition: function(other, distance) {
                var end = color(other),
                    spaceName = end._space(),
                    space = spaces[spaceName],
                    startColor = this.alpha() === 0 ? color("transparent") : this,
                    start = startColor[space.cache] || space.to(startColor._rgba),
                    result = start.slice();
                end = end[space.cache];
                each(space.props, function(key, prop) {
                    var index = prop.idx,
                        startValue = start[index],
                        endValue = end[index],
                        type = propTypes[prop.type] || {};
                    if (endValue === null) {
                        return
                    }
                    if (startValue === null) {
                        result[index] = endValue
                    } else {
                        if (type.mod) {
                            if (endValue - startValue > type.mod / 2) {
                                startValue += type.mod
                            } else {
                                if (startValue - endValue > type.mod / 2) {
                                    startValue -= type.mod
                                }
                            }
                        }
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop)
                    }
                });
                return this[spaceName](result)
            },
            blend: function(opaque) {
                if (this._rgba[3] === 1) {
                    return this
                }
                var rgb = this._rgba.slice(),
                    a = rgb.pop(),
                    blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function(v, i) {
                    return (1 - a) * blend[i] + a * v
                }))
            },
            toRgbaString: function() {
                var prefix = "rgba(",
                    rgba = jQuery.map(this._rgba, function(v, i) {
                        return v == null ? (i > 2 ? 1 : 0) : v
                    });
                if (rgba[3] === 1) {
                    rgba.pop();
                    prefix = "rgb("
                }
                return prefix + rgba.join() + ")"
            },
            toHslaString: function() {
                var prefix = "hsla(",
                    hsla = jQuery.map(this.hsla(), function(v, i) {
                        if (v == null) {
                            v = i > 2 ? 1 : 0
                        }
                        if (i && i < 3) {
                            v = Math.round(v * 100) + "%"
                        }
                        return v
                    });
                if (hsla[3] === 1) {
                    hsla.pop();
                    prefix = "hsl("
                }
                return prefix + hsla.join() + ")"
            },
            toHexString: function(includeAlpha) {
                var rgba = this._rgba.slice(),
                    alpha = rgba.pop();
                if (includeAlpha) {
                    rgba.push(~~(alpha * 255))
                }
                return "#" + jQuery.map(rgba, function(v) {
                    v = (v || 0).toString(16);
                    return v.length === 1 ? "0" + v : v
                }).join("")
            },
            toString: function() {
                return this._rgba[3] === 0 ? "transparent" : this.toRgbaString()
            }
        });
        color.fn.parse.prototype = color.fn;

        function hue2rgb(p, q, h) {
            h = (h + 1) % 1;
            if (h * 6 < 1) {
                return p + (q - p) * h * 6
            }
            if (h * 2 < 1) {
                return q
            }
            if (h * 3 < 2) {
                return p + (q - p) * ((2 / 3) - h) * 6
            }
            return p
        }
        spaces.hsla.to = function(rgba) {
            if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                return [null, null, null, rgba[3]]
            }
            var r = rgba[0] / 255,
                g = rgba[1] / 255,
                b = rgba[2] / 255,
                a = rgba[3],
                max = Math.max(r, g, b),
                min = Math.min(r, g, b),
                diff = max - min,
                add = max + min,
                l = add * 0.5,
                h, s;
            if (min === max) {
                h = 0
            } else {
                if (r === max) {
                    h = (60 * (g - b) / diff) + 360
                } else {
                    if (g === max) {
                        h = (60 * (b - r) / diff) + 120
                    } else {
                        h = (60 * (r - g) / diff) + 240
                    }
                }
            }
            if (diff === 0) {
                s = 0
            } else {
                if (l <= 0.5) {
                    s = diff / add
                } else {
                    s = diff / (2 - add)
                }
            }
            return [Math.round(h) % 360, s, l, a == null ? 1 : a]
        };
        spaces.hsla.from = function(hsla) {
            if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                return [null, null, null, hsla[3]]
            }
            var h = hsla[0] / 360,
                s = hsla[1],
                l = hsla[2],
                a = hsla[3],
                q = l <= 0.5 ? l * (1 + s) : l + s - l * s,
                p = 2 * l - q;
            return [Math.round(hue2rgb(p, q, h + (1 / 3)) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - (1 / 3)) * 255), a]
        };
        each(spaces, function(spaceName, space) {
            var props = space.props,
                cache = space.cache,
                to = space.to,
                from = space.from;
            color.fn[spaceName] = function(value) {
                if (to && !this[cache]) {
                    this[cache] = to(this._rgba)
                }
                if (value === undefined) {
                    return this[cache].slice()
                }
                var ret, type = jQuery.type(value),
                    arr = (type === "array" || type === "object") ? value : arguments,
                    local = this[cache].slice();
                each(props, function(key, prop) {
                    var val = arr[type === "object" ? key : prop.idx];
                    if (val == null) {
                        val = local[prop.idx]
                    }
                    local[prop.idx] = clamp(val, prop)
                });
                if (from) {
                    ret = color(from(local));
                    ret[cache] = local;
                    return ret
                } else {
                    return color(local)
                }
            };
            each(props, function(key, prop) {
                if (color.fn[key]) {
                    return
                }
                color.fn[key] = function(value) {
                    var vtype = jQuery.type(value),
                        fn = (key === "alpha" ? (this._hsla ? "hsla" : "rgba") : spaceName),
                        local = this[fn](),
                        cur = local[prop.idx],
                        match;
                    if (vtype === "undefined") {
                        return cur
                    }
                    if (vtype === "function") {
                        value = value.call(this, cur);
                        vtype = jQuery.type(value)
                    }
                    if (value == null && prop.empty) {
                        return this
                    }
                    if (vtype === "string") {
                        match = rplusequals.exec(value);
                        if (match) {
                            value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1)
                        }
                    }
                    local[prop.idx] = value;
                    return this[fn](local)
                }
            })
        });
        color.hook = function(hook) {
            var hooks = hook.split(" ");
            each(hooks, function(i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function(elem, value) {
                        var parsed, curElem, backgroundColor = "";
                        if (value !== "transparent" && (jQuery.type(value) !== "string" || (parsed = stringParse(value)))) {
                            value = color(parsed || value);
                            if (!support.rgba && value._rgba[3] !== 1) {
                                curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                                while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                                    try {
                                        backgroundColor = jQuery.css(curElem, "backgroundColor");
                                        curElem = curElem.parentNode
                                    } catch (e) {}
                                }
                                value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default")
                            }
                            value = value.toRgbaString()
                        }
                        try {
                            elem.style[hook] = value
                        } catch (e) {}
                    }
                };
                jQuery.fx.step[hook] = function(fx) {
                    if (!fx.colorInit) {
                        fx.start = color(fx.elem, hook);
                        fx.end = color(fx.end);
                        fx.colorInit = true
                    }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos))
                }
            })
        };
        color.hook(stepHooks);
        jQuery.cssHooks.borderColor = {
            expand: function(value) {
                var expanded = {};
                each(["Top", "Right", "Bottom", "Left"], function(i, part) {
                    expanded["border" + part + "Color"] = value
                });
                return expanded
            }
        };
        colors = jQuery.Color.names = {
            aqua: "#00ffff",
            black: "#000000",
            blue: "#0000ff",
            fuchsia: "#ff00ff",
            gray: "#808080",
            green: "#008000",
            lime: "#00ff00",
            maroon: "#800000",
            navy: "#000080",
            olive: "#808000",
            purple: "#800080",
            red: "#ff0000",
            silver: "#c0c0c0",
            teal: "#008080",
            white: "#ffffff",
            yellow: "#ffff00",
            transparent: [null, null, null, 0],
            _default: "#ffffff"
        }
    })(jQuery);
    (function() {
        var classAnimationActions = ["add", "remove", "toggle"],
            shorthandStyles = {
                border: 1,
                borderBottom: 1,
                borderColor: 1,
                borderLeft: 1,
                borderRight: 1,
                borderTop: 1,
                borderWidth: 1,
                margin: 1,
                padding: 1
            };
        $.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function(_, prop) {
            $.fx.step[prop] = function(fx) {
                if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                    jQuery.style(fx.elem, prop, fx.end);
                    fx.setAttr = true
                }
            }
        });

        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,
                styles = {};
            if (style && style.length && style[0] && style[style[0]]) {
                len = style.length;
                while (len--) {
                    key = style[len];
                    if (typeof style[key] === "string") {
                        styles[$.camelCase(key)] = style[key]
                    }
                }
            } else {
                for (key in style) {
                    if (typeof style[key] === "string") {
                        styles[key] = style[key]
                    }
                }
            }
            return styles
        }

        function styleDifference(oldStyle, newStyle) {
            var diff = {},
                name, value;
            for (name in newStyle) {
                value = newStyle[name];
                if (oldStyle[name] !== value) {
                    if (!shorthandStyles[name]) {
                        if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                            diff[name] = value
                        }
                    }
                }
            }
            return diff
        }
        if (!$.fn.addBack) {
            $.fn.addBack = function(selector) {
                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
            }
        }
        $.effects.animateClass = function(value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function() {
                var animated = $(this),
                    baseClass = animated.attr("class") || "",
                    applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
                allAnimations = allAnimations.map(function() {
                    var el = $(this);
                    return {
                        el: el,
                        start: getElementStyles(this)
                    }
                });
                applyClassChange = function() {
                    $.each(classAnimationActions, function(i, action) {
                        if (value[action]) {
                            animated[action + "Class"](value[action])
                        }
                    })
                };
                applyClassChange();
                allAnimations = allAnimations.map(function() {
                    this.end = getElementStyles(this.el[0]);
                    this.diff = styleDifference(this.start, this.end);
                    return this
                });
                animated.attr("class", baseClass);
                allAnimations = allAnimations.map(function() {
                    var styleInfo = this,
                        dfd = $.Deferred(),
                        opts = $.extend({}, o, {
                            queue: false,
                            complete: function() {
                                dfd.resolve(styleInfo)
                            }
                        });
                    this.el.animate(this.diff, opts);
                    return dfd.promise()
                });
                $.when.apply($, allAnimations.get()).done(function() {
                    applyClassChange();
                    $.each(arguments, function() {
                        var el = this.el;
                        $.each(this.diff, function(key) {
                            el.css(key, "")
                        })
                    });
                    o.complete.call(animated[0])
                })
            })
        };
        $.fn.extend({
            addClass: (function(orig) {
                return function(classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, {
                        add: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments)
                }
            })($.fn.addClass),
            removeClass: (function(orig) {
                return function(classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments)
                }
            })($.fn.removeClass),
            toggleClass: (function(orig) {
                return function(classNames, force, speed, easing, callback) {
                    if (typeof force === "boolean" || force === undefined) {
                        if (!speed) {
                            return orig.apply(this, arguments)
                        } else {
                            return $.effects.animateClass.call(this, (force ? {
                                add: classNames
                            } : {
                                remove: classNames
                            }), speed, easing, callback)
                        }
                    } else {
                        return $.effects.animateClass.call(this, {
                            toggle: classNames
                        }, force, speed, easing)
                    }
                }
            })($.fn.toggleClass),
            switchClass: function(remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    add: add,
                    remove: remove
                }, speed, easing, callback)
            }
        })
    })();
    (function() {
        if ($.expr && $.expr.filters && $.expr.filters.animated) {
            $.expr.filters.animated = (function(orig) {
                return function(elem) {
                    return !!$(elem).data(dataSpaceAnimated) || orig(elem)
                }
            })($.expr.filters.animated)
        }
        if ($.uiBackCompat !== false) {
            $.extend($.effects, {
                save: function(element, set) {
                    var i = 0,
                        length = set.length;
                    for (; i < length; i++) {
                        if (set[i] !== null) {
                            element.data(dataSpace + set[i], element[0].style[set[i]])
                        }
                    }
                },
                restore: function(element, set) {
                    var val, i = 0,
                        length = set.length;
                    for (; i < length; i++) {
                        if (set[i] !== null) {
                            val = element.data(dataSpace + set[i]);
                            element.css(set[i], val)
                        }
                    }
                },
                setMode: function(el, mode) {
                    if (mode === "toggle") {
                        mode = el.is(":hidden") ? "show" : "hide"
                    }
                    return mode
                },
                createWrapper: function(element) {
                    if (element.parent().is(".ui-effects-wrapper")) {
                        return element.parent()
                    }
                    var props = {
                            width: element.outerWidth(true),
                            height: element.outerHeight(true),
                            "float": element.css("float")
                        },
                        wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                            fontSize: "100%",
                            background: "transparent",
                            border: "none",
                            margin: 0,
                            padding: 0
                        }),
                        size = {
                            width: element.width(),
                            height: element.height()
                        },
                        active = document.activeElement;
                    try {
                        active.id
                    } catch (e) {
                        active = document.body
                    }
                    element.wrap(wrapper);
                    if (element[0] === active || $.contains(element[0], active)) {
                        $(active).trigger("focus")
                    }
                    wrapper = element.parent();
                    if (element.css("position") === "static") {
                        wrapper.css({
                            position: "relative"
                        });
                        element.css({
                            position: "relative"
                        })
                    } else {
                        $.extend(props, {
                            position: element.css("position"),
                            zIndex: element.css("z-index")
                        });
                        $.each(["top", "left", "bottom", "right"], function(i, pos) {
                            props[pos] = element.css(pos);
                            if (isNaN(parseInt(props[pos], 10))) {
                                props[pos] = "auto"
                            }
                        });
                        element.css({
                            position: "relative",
                            top: 0,
                            left: 0,
                            right: "auto",
                            bottom: "auto"
                        })
                    }
                    element.css(size);
                    return wrapper.css(props).show()
                },
                removeWrapper: function(element) {
                    var active = document.activeElement;
                    if (element.parent().is(".ui-effects-wrapper")) {
                        element.parent().replaceWith(element);
                        if (element[0] === active || $.contains(element[0], active)) {
                            $(active).trigger("focus")
                        }
                    }
                    return element
                }
            })
        }
        $.extend($.effects, {
            version: "1.12.1",
            define: function(name, mode, effect) {
                if (!effect) {
                    effect = mode;
                    mode = "effect"
                }
                $.effects.effect[name] = effect;
                $.effects.effect[name].mode = mode;
                return effect
            },
            scaledDimensions: function(element, percent, direction) {
                if (percent === 0) {
                    return {
                        height: 0,
                        width: 0,
                        outerHeight: 0,
                        outerWidth: 0
                    }
                }
                var x = direction !== "horizontal" ? ((percent || 100) / 100) : 1,
                    y = direction !== "vertical" ? ((percent || 100) / 100) : 1;
                return {
                    height: element.height() * y,
                    width: element.width() * x,
                    outerHeight: element.outerHeight() * y,
                    outerWidth: element.outerWidth() * x
                }
            },
            clipToBox: function(animation) {
                return {
                    width: animation.clip.right - animation.clip.left,
                    height: animation.clip.bottom - animation.clip.top,
                    left: animation.clip.left,
                    top: animation.clip.top
                }
            },
            unshift: function(element, queueLength, count) {
                var queue = element.queue();
                if (queueLength > 1) {
                    queue.splice.apply(queue, [1, 0].concat(queue.splice(queueLength, count)))
                }
                element.dequeue()
            },
            saveStyle: function(element) {
                element.data(dataSpaceStyle, element[0].style.cssText)
            },
            restoreStyle: function(element) {
                element[0].style.cssText = element.data(dataSpaceStyle) || "";
                element.removeData(dataSpaceStyle)
            },
            mode: function(element, mode) {
                var hidden = element.is(":hidden");
                if (mode === "toggle") {
                    mode = hidden ? "show" : "hide"
                }
                if (hidden ? mode === "hide" : mode === "show") {
                    mode = "none"
                }
                return mode
            },
            getBaseline: function(origin, original) {
                var y, x;
                switch (origin[0]) {
                    case "top":
                        y = 0;
                        break;
                    case "middle":
                        y = 0.5;
                        break;
                    case "bottom":
                        y = 1;
                        break;
                    default:
                        y = origin[0] / original.height
                }
                switch (origin[1]) {
                    case "left":
                        x = 0;
                        break;
                    case "center":
                        x = 0.5;
                        break;
                    case "right":
                        x = 1;
                        break;
                    default:
                        x = origin[1] / original.width
                }
                return {
                    x: x,
                    y: y
                }
            },
            createPlaceholder: function(element) {
                var placeholder, cssPosition = element.css("position"),
                    position = element.position();
                element.css({
                    marginTop: element.css("marginTop"),
                    marginBottom: element.css("marginBottom"),
                    marginLeft: element.css("marginLeft"),
                    marginRight: element.css("marginRight")
                }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());
                if (/^(static|relative)/.test(cssPosition)) {
                    cssPosition = "absolute";
                    placeholder = $("<" + element[0].nodeName + ">").insertAfter(element).css({
                        display: /^(inline|ruby)/.test(element.css("display")) ? "inline-block" : "block",
                        visibility: "hidden",
                        marginTop: element.css("marginTop"),
                        marginBottom: element.css("marginBottom"),
                        marginLeft: element.css("marginLeft"),
                        marginRight: element.css("marginRight"),
                        "float": element.css("float")
                    }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass("ui-effects-placeholder");
                    element.data(dataSpace + "placeholder", placeholder)
                }
                element.css({
                    position: cssPosition,
                    left: position.left,
                    top: position.top
                });
                return placeholder
            },
            removePlaceholder: function(element) {
                var dataKey = dataSpace + "placeholder",
                    placeholder = element.data(dataKey);
                if (placeholder) {
                    placeholder.remove();
                    element.removeData(dataKey)
                }
            },
            cleanUp: function(element) {
                $.effects.restoreStyle(element);
                $.effects.removePlaceholder(element)
            },
            setTransition: function(element, list, factor, value) {
                value = value || {};
                $.each(list, function(i, x) {
                    var unit = element.cssUnit(x);
                    if (unit[0] > 0) {
                        value[x] = unit[0] * factor + unit[1]
                    }
                });
                return value
            }
        });

        function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) {
                options = effect;
                effect = effect.effect
            }
            effect = {
                effect: effect
            };
            if (options == null) {
                options = {}
            }
            if ($.isFunction(options)) {
                callback = options;
                speed = null;
                options = {}
            }
            if (typeof options === "number" || $.fx.speeds[options]) {
                callback = speed;
                speed = options;
                options = {}
            }
            if ($.isFunction(speed)) {
                callback = speed;
                speed = null
            }
            if (options) {
                $.extend(effect, options)
            }
            speed = speed || options.duration;
            effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
            effect.complete = callback || options.complete;
            return effect
        }

        function standardAnimationOption(option) {
            if (!option || typeof option === "number" || $.fx.speeds[option]) {
                return true
            }
            if (typeof option === "string" && !$.effects.effect[option]) {
                return true
            }
            if ($.isFunction(option)) {
                return true
            }
            if (typeof option === "object" && !option.effect) {
                return true
            }
            return false
        }
        $.fn.extend({
            effect: function() {
                var args = _normalizeArguments.apply(this, arguments),
                    effectMethod = $.effects.effect[args.effect],
                    defaultMode = effectMethod.mode,
                    queue = args.queue,
                    queueName = queue || "fx",
                    complete = args.complete,
                    mode = args.mode,
                    modes = [],
                    prefilter = function(next) {
                        var el = $(this),
                            normalizedMode = $.effects.mode(el, mode) || defaultMode;
                        el.data(dataSpaceAnimated, true);
                        modes.push(normalizedMode);
                        if (defaultMode && (normalizedMode === "show" || (normalizedMode === defaultMode && normalizedMode === "hide"))) {
                            el.show()
                        }
                        if (!defaultMode || normalizedMode !== "none") {
                            $.effects.saveStyle(el)
                        }
                        if ($.isFunction(next)) {
                            next()
                        }
                    };
                if ($.fx.off || !effectMethod) {
                    if (mode) {
                        return this[mode](args.duration, complete)
                    } else {
                        return this.each(function() {
                            if (complete) {
                                complete.call(this)
                            }
                        })
                    }
                }

                function run(next) {
                    var elem = $(this);

                    function cleanup() {
                        elem.removeData(dataSpaceAnimated);
                        $.effects.cleanUp(elem);
                        if (args.mode === "hide") {
                            elem.hide()
                        }
                        done()
                    }

                    function done() {
                        if ($.isFunction(complete)) {
                            complete.call(elem[0])
                        }
                        if ($.isFunction(next)) {
                            next()
                        }
                    }
                    args.mode = modes.shift();
                    if ($.uiBackCompat !== false && !defaultMode) {
                        if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                            elem[mode]();
                            done()
                        } else {
                            effectMethod.call(elem[0], args, done)
                        }
                    } else {
                        if (args.mode === "none") {
                            elem[mode]();
                            done()
                        } else {
                            effectMethod.call(elem[0], args, cleanup)
                        }
                    }
                }
                return queue === false ? this.each(prefilter).each(run) : this.queue(queueName, prefilter).queue(queueName, run)
            },
            show: (function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) {
                        return orig.apply(this, arguments)
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "show";
                        return this.effect.call(this, args)
                    }
                }
            })($.fn.show),
            hide: (function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) {
                        return orig.apply(this, arguments)
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "hide";
                        return this.effect.call(this, args)
                    }
                }
            })($.fn.hide),
            toggle: (function(orig) {
                return function(option) {
                    if (standardAnimationOption(option) || typeof option === "boolean") {
                        return orig.apply(this, arguments)
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "toggle";
                        return this.effect.call(this, args)
                    }
                }
            })($.fn.toggle),
            cssUnit: function(key) {
                var style = this.css(key),
                    val = [];
                $.each(["em", "px", "%", "pt"], function(i, unit) {
                    if (style.indexOf(unit) > 0) {
                        val = [parseFloat(style), unit]
                    }
                });
                return val
            },
            cssClip: function(clipObj) {
                if (clipObj) {
                    return this.css("clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " + clipObj.bottom + "px " + clipObj.left + "px)")
                }
                return parseClip(this.css("clip"), this)
            },
            transfer: function(options, done) {
                var element = $(this),
                    target = $(options.to),
                    targetFixed = target.css("position") === "fixed",
                    body = $("body"),
                    fixTop = targetFixed ? body.scrollTop() : 0,
                    fixLeft = targetFixed ? body.scrollLeft() : 0,
                    endPosition = target.offset(),
                    animation = {
                        top: endPosition.top - fixTop,
                        left: endPosition.left - fixLeft,
                        height: target.innerHeight(),
                        width: target.innerWidth()
                    },
                    startPosition = element.offset(),
                    transfer = $("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(options.className).css({
                        top: startPosition.top - fixTop,
                        left: startPosition.left - fixLeft,
                        height: element.innerHeight(),
                        width: element.innerWidth(),
                        position: targetFixed ? "fixed" : "absolute"
                    }).animate(animation, options.duration, options.easing, function() {
                        transfer.remove();
                        if ($.isFunction(done)) {
                            done()
                        }
                    })
            }
        });

        function parseClip(str, element) {
            var outerWidth = element.outerWidth(),
                outerHeight = element.outerHeight(),
                clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
                values = clipRegex.exec(str) || ["", 0, outerWidth, outerHeight, 0];
            return {
                top: parseFloat(values[1]) || 0,
                right: values[2] === "auto" ? outerWidth : parseFloat(values[2]),
                bottom: values[3] === "auto" ? outerHeight : parseFloat(values[3]),
                left: parseFloat(values[4]) || 0
            }
        }
        $.fx.step.clip = function(fx) {
            if (!fx.clipInit) {
                fx.start = $(fx.elem).cssClip();
                if (typeof fx.end === "string") {
                    fx.end = parseClip(fx.end, fx.elem)
                }
                fx.clipInit = true
            }
            $(fx.elem).cssClip({
                top: fx.pos * (fx.end.top - fx.start.top) + fx.start.top,
                right: fx.pos * (fx.end.right - fx.start.right) + fx.start.right,
                bottom: fx.pos * (fx.end.bottom - fx.start.bottom) + fx.start.bottom,
                left: fx.pos * (fx.end.left - fx.start.left) + fx.start.left
            })
        }
    })();
    (function() {
        var baseEasings = {};
        $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function(i, name) {
            baseEasings[name] = function(p) {
                return Math.pow(p, i + 2)
            }
        });
        $.extend(baseEasings, {
            Sine: function(p) {
                return 1 - Math.cos(p * Math.PI / 2)
            },
            Circ: function(p) {
                return 1 - Math.sqrt(1 - p * p)
            },
            Elastic: function(p) {
                return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15)
            },
            Back: function(p) {
                return p * p * (3 * p - 2)
            },
            Bounce: function(p) {
                var pow2, bounce = 4;
                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2)
            }
        });
        $.each(baseEasings, function(name, easeIn) {
            $.easing["easeIn" + name] = easeIn;
            $.easing["easeOut" + name] = function(p) {
                return 1 - easeIn(1 - p)
            };
            $.easing["easeInOut" + name] = function(p) {
                return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2
            }
        })
    })();
    var effect = $.effects;
    /*!
     * jQuery UI Effects Blind 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectBlind = $.effects.define("blind", "hide", function(options, done) {
        var map = {
                up: ["bottom", "top"],
                vertical: ["bottom", "top"],
                down: ["top", "bottom"],
                left: ["right", "left"],
                horizontal: ["right", "left"],
                right: ["left", "right"]
            },
            element = $(this),
            direction = options.direction || "up",
            start = element.cssClip(),
            animate = {
                clip: $.extend({}, start)
            },
            placeholder = $.effects.createPlaceholder(element);
        animate.clip[map[direction][0]] = animate.clip[map[direction][1]];
        if (options.mode === "show") {
            element.cssClip(animate.clip);
            if (placeholder) {
                placeholder.css($.effects.clipToBox(animate))
            }
            animate.clip = start
        }
        if (placeholder) {
            placeholder.animate($.effects.clipToBox(animate), options.duration, options.easing)
        }
        element.animate(animate, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    /*!
     * jQuery UI Effects Bounce 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectBounce = $.effects.define("bounce", function(options, done) {
        var upAnim, downAnim, refValue, element = $(this),
            mode = options.mode,
            hide = mode === "hide",
            show = mode === "show",
            direction = options.direction || "up",
            distance = options.distance,
            times = options.times || 5,
            anims = times * 2 + (show || hide ? 1 : 0),
            speed = options.duration / anims,
            easing = options.easing,
            ref = (direction === "up" || direction === "down") ? "top" : "left",
            motion = (direction === "up" || direction === "left"),
            i = 0,
            queuelen = element.queue().length;
        $.effects.createPlaceholder(element);
        refValue = element.css(ref);
        if (!distance) {
            distance = element[ref === "top" ? "outerHeight" : "outerWidth"]() / 3
        }
        if (show) {
            downAnim = {
                opacity: 1
            };
            downAnim[ref] = refValue;
            element.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing)
        }
        if (hide) {
            distance = distance / Math.pow(2, times - 1)
        }
        downAnim = {};
        downAnim[ref] = refValue;
        for (; i < times; i++) {
            upAnim = {};
            upAnim[ref] = (motion ? "-=" : "+=") + distance;
            element.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
            distance = hide ? distance * 2 : distance / 2
        }
        if (hide) {
            upAnim = {
                opacity: 0
            };
            upAnim[ref] = (motion ? "-=" : "+=") + distance;
            element.animate(upAnim, speed, easing)
        }
        element.queue(done);
        $.effects.unshift(element, queuelen, anims + 1)
    });
    /*!
     * jQuery UI Effects Clip 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectClip = $.effects.define("clip", "hide", function(options, done) {
        var start, animate = {},
            element = $(this),
            direction = options.direction || "vertical",
            both = direction === "both",
            horizontal = both || direction === "horizontal",
            vertical = both || direction === "vertical";
        start = element.cssClip();
        animate.clip = {
            top: vertical ? (start.bottom - start.top) / 2 : start.top,
            right: horizontal ? (start.right - start.left) / 2 : start.right,
            bottom: vertical ? (start.bottom - start.top) / 2 : start.bottom,
            left: horizontal ? (start.right - start.left) / 2 : start.left
        };
        $.effects.createPlaceholder(element);
        if (options.mode === "show") {
            element.cssClip(animate.clip);
            animate.clip = start
        }
        element.animate(animate, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    /*!
     * jQuery UI Effects Drop 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectDrop = $.effects.define("drop", "hide", function(options, done) {
        var distance, element = $(this),
            mode = options.mode,
            show = mode === "show",
            direction = options.direction || "left",
            ref = (direction === "up" || direction === "down") ? "top" : "left",
            motion = (direction === "up" || direction === "left") ? "-=" : "+=",
            oppositeMotion = (motion === "+=") ? "-=" : "+=",
            animation = {
                opacity: 0
            };
        $.effects.createPlaceholder(element);
        distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2;
        animation[ref] = motion + distance;
        if (show) {
            element.css(animation);
            animation[ref] = oppositeMotion + distance;
            animation.opacity = 1
        }
        element.animate(animation, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    /*!
     * jQuery UI Effects Explode 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectExplode = $.effects.define("explode", "hide", function(options, done) {
        var i, j, left, top, mx, my, rows = options.pieces ? Math.round(Math.sqrt(options.pieces)) : 3,
            cells = rows,
            element = $(this),
            mode = options.mode,
            show = mode === "show",
            offset = element.show().css("visibility", "hidden").offset(),
            width = Math.ceil(element.outerWidth() / cells),
            height = Math.ceil(element.outerHeight() / rows),
            pieces = [];

        function childComplete() {
            pieces.push(this);
            if (pieces.length === rows * cells) {
                animComplete()
            }
        }
        for (i = 0; i < rows; i++) {
            top = offset.top + i * height;
            my = i - (rows - 1) / 2;
            for (j = 0; j < cells; j++) {
                left = offset.left + j * width;
                mx = j - (cells - 1) / 2;
                element.clone().appendTo("body").wrap("<div></div>").css({
                    position: "absolute",
                    visibility: "visible",
                    left: -j * width,
                    top: -i * height
                }).parent().addClass("ui-effects-explode").css({
                    position: "absolute",
                    overflow: "hidden",
                    width: width,
                    height: height,
                    left: left + (show ? mx * width : 0),
                    top: top + (show ? my * height : 0),
                    opacity: show ? 0 : 1
                }).animate({
                    left: left + (show ? 0 : mx * width),
                    top: top + (show ? 0 : my * height),
                    opacity: show ? 1 : 0
                }, options.duration || 500, options.easing, childComplete)
            }
        }

        function animComplete() {
            element.css({
                visibility: "visible"
            });
            $(pieces).remove();
            done()
        }
    });
    /*!
     * jQuery UI Effects Fade 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectFade = $.effects.define("fade", "toggle", function(options, done) {
        var show = options.mode === "show";
        $(this).css("opacity", show ? 0 : 1).animate({
            opacity: show ? 1 : 0
        }, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    /*!
     * jQuery UI Effects Fold 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectFold = $.effects.define("fold", "hide", function(options, done) {
        var element = $(this),
            mode = options.mode,
            show = mode === "show",
            hide = mode === "hide",
            size = options.size || 15,
            percent = /([0-9]+)%/.exec(size),
            horizFirst = !!options.horizFirst,
            ref = horizFirst ? ["right", "bottom"] : ["bottom", "right"],
            duration = options.duration / 2,
            placeholder = $.effects.createPlaceholder(element),
            start = element.cssClip(),
            animation1 = {
                clip: $.extend({}, start)
            },
            animation2 = {
                clip: $.extend({}, start)
            },
            distance = [start[ref[0]], start[ref[1]]],
            queuelen = element.queue().length;
        if (percent) {
            size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1]
        }
        animation1.clip[ref[0]] = size;
        animation2.clip[ref[0]] = size;
        animation2.clip[ref[1]] = 0;
        if (show) {
            element.cssClip(animation2.clip);
            if (placeholder) {
                placeholder.css($.effects.clipToBox(animation2))
            }
            animation2.clip = start
        }
        element.queue(function(next) {
            if (placeholder) {
                placeholder.animate($.effects.clipToBox(animation1), duration, options.easing).animate($.effects.clipToBox(animation2), duration, options.easing)
            }
            next()
        }).animate(animation1, duration, options.easing).animate(animation2, duration, options.easing).queue(done);
        $.effects.unshift(element, queuelen, 4)
    });
    /*!
     * jQuery UI Effects Highlight 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectHighlight = $.effects.define("highlight", "show", function(options, done) {
        var element = $(this),
            animation = {
                backgroundColor: element.css("backgroundColor")
            };
        if (options.mode === "hide") {
            animation.opacity = 0
        }
        $.effects.saveStyle(element);
        element.css({
            backgroundImage: "none",
            backgroundColor: options.color || "#ffff99"
        }).animate(animation, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    /*!
     * jQuery UI Effects Size 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectSize = $.effects.define("size", function(options, done) {
        var baseline, factor, temp, element = $(this),
            cProps = ["fontSize"],
            vProps = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"],
            hProps = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"],
            mode = options.mode,
            restore = mode !== "effect",
            scale = options.scale || "both",
            origin = options.origin || ["middle", "center"],
            position = element.css("position"),
            pos = element.position(),
            original = $.effects.scaledDimensions(element),
            from = options.from || original,
            to = options.to || $.effects.scaledDimensions(element, 0);
        $.effects.createPlaceholder(element);
        if (mode === "show") {
            temp = from;
            from = to;
            to = temp
        }
        factor = {
            from: {
                y: from.height / original.height,
                x: from.width / original.width
            },
            to: {
                y: to.height / original.height,
                x: to.width / original.width
            }
        };
        if (scale === "box" || scale === "both") {
            if (factor.from.y !== factor.to.y) {
                from = $.effects.setTransition(element, vProps, factor.from.y, from);
                to = $.effects.setTransition(element, vProps, factor.to.y, to)
            }
            if (factor.from.x !== factor.to.x) {
                from = $.effects.setTransition(element, hProps, factor.from.x, from);
                to = $.effects.setTransition(element, hProps, factor.to.x, to)
            }
        }
        if (scale === "content" || scale === "both") {
            if (factor.from.y !== factor.to.y) {
                from = $.effects.setTransition(element, cProps, factor.from.y, from);
                to = $.effects.setTransition(element, cProps, factor.to.y, to)
            }
        }
        if (origin) {
            baseline = $.effects.getBaseline(origin, original);
            from.top = (original.outerHeight - from.outerHeight) * baseline.y + pos.top;
            from.left = (original.outerWidth - from.outerWidth) * baseline.x + pos.left;
            to.top = (original.outerHeight - to.outerHeight) * baseline.y + pos.top;
            to.left = (original.outerWidth - to.outerWidth) * baseline.x + pos.left
        }
        element.css(from);
        if (scale === "content" || scale === "both") {
            vProps = vProps.concat(["marginTop", "marginBottom"]).concat(cProps);
            hProps = hProps.concat(["marginLeft", "marginRight"]);
            element.find("*[width]").each(function() {
                var child = $(this),
                    childOriginal = $.effects.scaledDimensions(child),
                    childFrom = {
                        height: childOriginal.height * factor.from.y,
                        width: childOriginal.width * factor.from.x,
                        outerHeight: childOriginal.outerHeight * factor.from.y,
                        outerWidth: childOriginal.outerWidth * factor.from.x
                    },
                    childTo = {
                        height: childOriginal.height * factor.to.y,
                        width: childOriginal.width * factor.to.x,
                        outerHeight: childOriginal.height * factor.to.y,
                        outerWidth: childOriginal.width * factor.to.x
                    };
                if (factor.from.y !== factor.to.y) {
                    childFrom = $.effects.setTransition(child, vProps, factor.from.y, childFrom);
                    childTo = $.effects.setTransition(child, vProps, factor.to.y, childTo)
                }
                if (factor.from.x !== factor.to.x) {
                    childFrom = $.effects.setTransition(child, hProps, factor.from.x, childFrom);
                    childTo = $.effects.setTransition(child, hProps, factor.to.x, childTo)
                }
                if (restore) {
                    $.effects.saveStyle(child)
                }
                child.css(childFrom);
                child.animate(childTo, options.duration, options.easing, function() {
                    if (restore) {
                        $.effects.restoreStyle(child)
                    }
                })
            })
        }
        element.animate(to, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: function() {
                var offset = element.offset();
                if (to.opacity === 0) {
                    element.css("opacity", from.opacity)
                }
                if (!restore) {
                    element.css("position", position === "static" ? "relative" : position).offset(offset);
                    $.effects.saveStyle(element)
                }
                done()
            }
        })
    });
    /*!
     * jQuery UI Effects Scale 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectScale = $.effects.define("scale", function(options, done) {
        var el = $(this),
            mode = options.mode,
            percent = parseInt(options.percent, 10) || (parseInt(options.percent, 10) === 0 ? 0 : (mode !== "effect" ? 0 : 100)),
            newOptions = $.extend(true, {
                from: $.effects.scaledDimensions(el),
                to: $.effects.scaledDimensions(el, percent, options.direction || "both"),
                origin: options.origin || ["middle", "center"]
            }, options);
        if (options.fade) {
            newOptions.from.opacity = 1;
            newOptions.to.opacity = 0
        }
        $.effects.effect.size.call(this, newOptions, done)
    });
    /*!
     * jQuery UI Effects Puff 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectPuff = $.effects.define("puff", "hide", function(options, done) {
        var newOptions = $.extend(true, {}, options, {
            fade: true,
            percent: parseInt(options.percent, 10) || 150
        });
        $.effects.effect.scale.call(this, newOptions, done)
    });
    /*!
     * jQuery UI Effects Pulsate 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectPulsate = $.effects.define("pulsate", "show", function(options, done) {
        var element = $(this),
            mode = options.mode,
            show = mode === "show",
            hide = mode === "hide",
            showhide = show || hide,
            anims = ((options.times || 5) * 2) + (showhide ? 1 : 0),
            duration = options.duration / anims,
            animateTo = 0,
            i = 1,
            queuelen = element.queue().length;
        if (show || !element.is(":visible")) {
            element.css("opacity", 0).show();
            animateTo = 1
        }
        for (; i < anims; i++) {
            element.animate({
                opacity: animateTo
            }, duration, options.easing);
            animateTo = 1 - animateTo
        }
        element.animate({
            opacity: animateTo
        }, duration, options.easing);
        element.queue(done);
        $.effects.unshift(element, queuelen, anims + 1)
    });
    /*!
     * jQuery UI Effects Shake 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectShake = $.effects.define("shake", function(options, done) {
        var i = 1,
            element = $(this),
            direction = options.direction || "left",
            distance = options.distance || 20,
            times = options.times || 3,
            anims = times * 2 + 1,
            speed = Math.round(options.duration / anims),
            ref = (direction === "up" || direction === "down") ? "top" : "left",
            positiveMotion = (direction === "up" || direction === "left"),
            animation = {},
            animation1 = {},
            animation2 = {},
            queuelen = element.queue().length;
        $.effects.createPlaceholder(element);
        animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
        animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2;
        animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2;
        element.animate(animation, speed, options.easing);
        for (; i < times; i++) {
            element.animate(animation1, speed, options.easing).animate(animation2, speed, options.easing)
        }
        element.animate(animation1, speed, options.easing).animate(animation, speed / 2, options.easing).queue(done);
        $.effects.unshift(element, queuelen, anims + 1)
    });
    /*!
     * jQuery UI Effects Slide 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effectsEffectSlide = $.effects.define("slide", "show", function(options, done) {
        var startClip, startRef, element = $(this),
            map = {
                up: ["bottom", "top"],
                down: ["top", "bottom"],
                left: ["right", "left"],
                right: ["left", "right"]
            },
            mode = options.mode,
            direction = options.direction || "left",
            ref = (direction === "up" || direction === "down") ? "top" : "left",
            positiveMotion = (direction === "up" || direction === "left"),
            distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true),
            animation = {};
        $.effects.createPlaceholder(element);
        startClip = element.cssClip();
        startRef = element.position()[ref];
        animation[ref] = (positiveMotion ? -1 : 1) * distance + startRef;
        animation.clip = element.cssClip();
        animation.clip[map[direction][1]] = animation.clip[map[direction][0]];
        if (mode === "show") {
            element.cssClip(animation.clip);
            element.css(ref, animation[ref]);
            animation.clip = startClip;
            animation[ref] = startRef
        }
        element.animate(animation, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    /*!
     * jQuery UI Effects Transfer 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var effect;
    if ($.uiBackCompat !== false) {
        effect = $.effects.define("transfer", function(options, done) {
            $(this).transfer(options, done)
        })
    }
    var effectsEffectTransfer = effect;
    /*!
     * jQuery UI Focusable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.ui.focusable = function(element, hasTabindex) {
        var map, mapName, img, focusableIfVisible, fieldset, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false
            }
            img = $("img[usemap='#" + mapName + "']");
            return img.length > 0 && img.is(":visible")
        }
        if (/^(input|select|textarea|button|object)$/.test(nodeName)) {
            focusableIfVisible = !element.disabled;
            if (focusableIfVisible) {
                fieldset = $(element).closest("fieldset")[0];
                if (fieldset) {
                    focusableIfVisible = !fieldset.disabled
                }
            }
        } else {
            if ("a" === nodeName) {
                focusableIfVisible = element.href || hasTabindex
            } else {
                focusableIfVisible = hasTabindex
            }
        }
        return focusableIfVisible && $(element).is(":visible") && visible($(element))
    };

    function visible(element) {
        var visibility = element.css("visibility");
        while (visibility === "inherit") {
            element = element.parent();
            visibility = element.css("visibility")
        }
        return visibility !== "hidden"
    }
    $.extend($.expr[":"], {
        focusable: function(element) {
            return $.ui.focusable(element, $.attr(element, "tabindex") != null)
        }
    });
    var focusable = $.ui.focusable;
    var form = $.fn.form = function() {
        return typeof this[0].form === "string" ? this.closest("form") : $(this[0].form)
    };
    /*!
     * jQuery UI Form Reset Mixin 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var formResetMixin = $.ui.formResetMixin = {
        _formResetHandler: function() {
            var form = $(this);
            setTimeout(function() {
                var instances = form.data("ui-form-reset-instances");
                $.each(instances, function() {
                    this.refresh()
                })
            })
        },
        _bindFormResetHandler: function() {
            this.form = this.element.form();
            if (!this.form.length) {
                return
            }
            var instances = this.form.data("ui-form-reset-instances") || [];
            if (!instances.length) {
                this.form.on("reset.ui-form-reset", this._formResetHandler)
            }
            instances.push(this);
            this.form.data("ui-form-reset-instances", instances)
        },
        _unbindFormResetHandler: function() {
            if (!this.form.length) {
                return
            }
            var instances = this.form.data("ui-form-reset-instances");
            instances.splice($.inArray(this, instances), 1);
            if (instances.length) {
                this.form.data("ui-form-reset-instances", instances)
            } else {
                this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")
            }
        }
    };
    /*!
     * jQuery UI Support for jQuery core 1.7.x 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     */
    ;
    if ($.fn.jquery.substring(0, 3) === "1.7") {
        $.each(["Width", "Height"], function(i, name) {
            var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
                type = name.toLowerCase(),
                orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };

            function reduce(elem, size, border, margin) {
                $.each(side, function() {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0;
                    if (border) {
                        size -= parseFloat($.css(elem, "border" + this + "Width")) || 0
                    }
                    if (margin) {
                        size -= parseFloat($.css(elem, "margin" + this)) || 0
                    }
                });
                return size
            }
            $.fn["inner" + name] = function(size) {
                if (size === undefined) {
                    return orig["inner" + name].call(this)
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size) + "px")
                })
            };
            $.fn["outer" + name] = function(size, margin) {
                if (typeof size !== "number") {
                    return orig["outer" + name].call(this, size)
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size, true, margin) + "px")
                })
            }
        });
        $.fn.addBack = function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
        }
    }
    /*!
     * jQuery UI Keycode 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var keycode = $.ui.keyCode = {
        BACKSPACE: 8,
        COMMA: 188,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        PERIOD: 190,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38
    };
    var escapeSelector = $.ui.escapeSelector = (function() {
        var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
        return function(selector) {
            return selector.replace(selectorEscape, "\\$1")
        }
    })();
    /*!
     * jQuery UI Labels 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var labels = $.fn.labels = function() {
        var ancestor, selector, id, labels, ancestors;
        if (this[0].labels && this[0].labels.length) {
            return this.pushStack(this[0].labels)
        }
        labels = this.eq(0).parents("label");
        id = this.attr("id");
        if (id) {
            ancestor = this.eq(0).parents().last();
            ancestors = ancestor.add(ancestor.length ? ancestor.siblings() : this.siblings());
            selector = "label[for='" + $.ui.escapeSelector(id) + "']";
            labels = labels.add(ancestors.find(selector).addBack(selector))
        }
        return this.pushStack(labels)
    };
    /*!
     * jQuery UI Scroll Parent 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var scrollParent = $.fn.scrollParent = function(includeHidden) {
        var position = this.css("position"),
            excludeStaticParent = position === "absolute",
            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
            scrollParent = this.parents().filter(function() {
                var parent = $(this);
                if (excludeStaticParent && parent.css("position") === "static") {
                    return false
                }
                return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"))
            }).eq(0);
        return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent
    };
    /*!
     * jQuery UI Tabbable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var tabbable = $.extend($.expr[":"], {
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"),
                hasTabindex = tabIndex != null;
            return (!hasTabindex || tabIndex >= 0) && $.ui.focusable(element, hasTabindex)
        }
    });
    /*!
     * jQuery UI Unique ID 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var uniqueId = $.fn.extend({
        uniqueId: (function() {
            var uuid = 0;
            return function() {
                return this.each(function() {
                    if (!this.id) {
                        this.id = "ui-id-" + (++uuid)
                    }
                })
            }
        })(),
        removeUniqueId: function() {
            return this.each(function() {
                if (/^ui-id-\d+$/.test(this.id)) {
                    $(this).removeAttr("id")
                }
            })
        }
    });
    /*!
     * jQuery UI Accordion 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsAccordion = $.widget("ui.accordion", {
        version: "1.12.1",
        options: {
            active: 0,
            animate: {},
            classes: {
                "ui-accordion-header": "ui-corner-top",
                "ui-accordion-header-collapsed": "ui-corner-all",
                "ui-accordion-content": "ui-corner-bottom"
            },
            collapsible: false,
            event: "click",
            header: "> li > :first-child, > :not(li):even",
            heightStyle: "auto",
            icons: {
                activeHeader: "ui-icon-triangle-1-s",
                header: "ui-icon-triangle-1-e"
            },
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: "hide",
            borderBottomWidth: "hide",
            paddingTop: "hide",
            paddingBottom: "hide",
            height: "hide"
        },
        showProps: {
            borderTopWidth: "show",
            borderBottomWidth: "show",
            paddingTop: "show",
            paddingBottom: "show",
            height: "show"
        },
        _create: function() {
            var options = this.options;
            this.prevShow = this.prevHide = $();
            this._addClass("ui-accordion", "ui-widget ui-helper-reset");
            this.element.attr("role", "tablist");
            if (!options.collapsible && (options.active === false || options.active == null)) {
                options.active = 0
            }
            this._processPanels();
            if (options.active < 0) {
                options.active += this.headers.length
            }
            this._refresh()
        },
        _getCreateEventData: function() {
            return {
                header: this.active,
                panel: !this.active.length ? $() : this.active.next()
            }
        },
        _createIcons: function() {
            var icon, children, icons = this.options.icons;
            if (icons) {
                icon = $("<span>");
                this._addClass(icon, "ui-accordion-header-icon", "ui-icon " + icons.header);
                icon.prependTo(this.headers);
                children = this.active.children(".ui-accordion-header-icon");
                this._removeClass(children, icons.header)._addClass(children, null, icons.activeHeader)._addClass(this.headers, "ui-accordion-icons")
            }
        },
        _destroyIcons: function() {
            this._removeClass(this.headers, "ui-accordion-icons");
            this.headers.children(".ui-accordion-header-icon").remove()
        },
        _destroy: function() {
            var contents;
            this.element.removeAttr("role");
            this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId();
            this._destroyIcons();
            contents = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId();
            if (this.options.heightStyle !== "content") {
                contents.css("height", "")
            }
        },
        _setOption: function(key, value) {
            if (key === "active") {
                this._activate(value);
                return
            }
            if (key === "event") {
                if (this.options.event) {
                    this._off(this.headers, this.options.event)
                }
                this._setupEvents(value)
            }
            this._super(key, value);
            if (key === "collapsible" && !value && this.options.active === false) {
                this._activate(0)
            }
            if (key === "icons") {
                this._destroyIcons();
                if (value) {
                    this._createIcons()
                }
            }
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.element.attr("aria-disabled", value);
            this._toggleClass(null, "ui-state-disabled", !!value);
            this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!value)
        },
        _keydown: function(event) {
            if (event.altKey || event.ctrlKey) {
                return
            }
            var keyCode = $.ui.keyCode,
                length = this.headers.length,
                currentIndex = this.headers.index(event.target),
                toFocus = false;
            switch (event.keyCode) {
                case keyCode.RIGHT:
                case keyCode.DOWN:
                    toFocus = this.headers[(currentIndex + 1) % length];
                    break;
                case keyCode.LEFT:
                case keyCode.UP:
                    toFocus = this.headers[(currentIndex - 1 + length) % length];
                    break;
                case keyCode.SPACE:
                case keyCode.ENTER:
                    this._eventHandler(event);
                    break;
                case keyCode.HOME:
                    toFocus = this.headers[0];
                    break;
                case keyCode.END:
                    toFocus = this.headers[length - 1];
                    break
            }
            if (toFocus) {
                $(event.target).attr("tabIndex", -1);
                $(toFocus).attr("tabIndex", 0);
                $(toFocus).trigger("focus");
                event.preventDefault()
            }
        },
        _panelKeyDown: function(event) {
            if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
                $(event.currentTarget).prev().trigger("focus")
            }
        },
        refresh: function() {
            var options = this.options;
            this._processPanels();
            if ((options.active === false && options.collapsible === true) || !this.headers.length) {
                options.active = false;
                this.active = $()
            } else {
                if (options.active === false) {
                    this._activate(0)
                } else {
                    if (this.active.length && !$.contains(this.element[0], this.active[0])) {
                        if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
                            options.active = false;
                            this.active = $()
                        } else {
                            this._activate(Math.max(0, options.active - 1))
                        }
                    } else {
                        options.active = this.headers.index(this.active)
                    }
                }
            }
            this._destroyIcons();
            this._refresh()
        },
        _processPanels: function() {
            var prevHeaders = this.headers,
                prevPanels = this.panels;
            this.headers = this.element.find(this.options.header);
            this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default");
            this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide();
            this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content");
            if (prevPanels) {
                this._off(prevHeaders.not(this.headers));
                this._off(prevPanels.not(this.panels))
            }
        },
        _refresh: function() {
            var maxHeight, options = this.options,
                heightStyle = options.heightStyle,
                parent = this.element.parent();
            this.active = this._findActive(options.active);
            this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed");
            this._addClass(this.active.next(), "ui-accordion-content-active");
            this.active.next().show();
            this.headers.attr("role", "tab").each(function() {
                var header = $(this),
                    headerId = header.uniqueId().attr("id"),
                    panel = header.next(),
                    panelId = panel.uniqueId().attr("id");
                header.attr("aria-controls", panelId);
                panel.attr("aria-labelledby", headerId)
            }).next().attr("role", "tabpanel");
            this.headers.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }).next().attr({
                "aria-hidden": "true"
            }).hide();
            if (!this.active.length) {
                this.headers.eq(0).attr("tabIndex", 0)
            } else {
                this.active.attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                }).next().attr({
                    "aria-hidden": "false"
                })
            }
            this._createIcons();
            this._setupEvents(options.event);
            if (heightStyle === "fill") {
                maxHeight = parent.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this),
                        position = elem.css("position");
                    if (position === "absolute" || position === "fixed") {
                        return
                    }
                    maxHeight -= elem.outerHeight(true)
                });
                this.headers.each(function() {
                    maxHeight -= $(this).outerHeight(true)
                });
                this.headers.next().each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()))
                }).css("overflow", "auto")
            } else {
                if (heightStyle === "auto") {
                    maxHeight = 0;
                    this.headers.next().each(function() {
                        var isVisible = $(this).is(":visible");
                        if (!isVisible) {
                            $(this).show()
                        }
                        maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
                        if (!isVisible) {
                            $(this).hide()
                        }
                    }).height(maxHeight)
                }
            }
        },
        _activate: function(index) {
            var active = this._findActive(index)[0];
            if (active === this.active[0]) {
                return
            }
            active = active || this.active[0];
            this._eventHandler({
                target: active,
                currentTarget: active,
                preventDefault: $.noop
            })
        },
        _findActive: function(selector) {
            return typeof selector === "number" ? this.headers.eq(selector) : $()
        },
        _setupEvents: function(event) {
            var events = {
                keydown: "_keydown"
            };
            if (event) {
                $.each(event.split(" "), function(index, eventName) {
                    events[eventName] = "_eventHandler"
                })
            }
            this._off(this.headers.add(this.headers.next()));
            this._on(this.headers, events);
            this._on(this.headers.next(), {
                keydown: "_panelKeyDown"
            });
            this._hoverable(this.headers);
            this._focusable(this.headers)
        },
        _eventHandler: function(event) {
            var activeChildren, clickedChildren, options = this.options,
                active = this.active,
                clicked = $(event.currentTarget),
                clickedIsActive = clicked[0] === active[0],
                collapsing = clickedIsActive && options.collapsible,
                toShow = collapsing ? $() : clicked.next(),
                toHide = active.next(),
                eventData = {
                    oldHeader: active,
                    oldPanel: toHide,
                    newHeader: collapsing ? $() : clicked,
                    newPanel: toShow
                };
            event.preventDefault();
            if ((clickedIsActive && !options.collapsible) || (this._trigger("beforeActivate", event, eventData) === false)) {
                return
            }
            options.active = collapsing ? false : this.headers.index(clicked);
            this.active = clickedIsActive ? $() : clicked;
            this._toggle(eventData);
            this._removeClass(active, "ui-accordion-header-active", "ui-state-active");
            if (options.icons) {
                activeChildren = active.children(".ui-accordion-header-icon");
                this._removeClass(activeChildren, null, options.icons.activeHeader)._addClass(activeChildren, null, options.icons.header)
            }
            if (!clickedIsActive) {
                this._removeClass(clicked, "ui-accordion-header-collapsed")._addClass(clicked, "ui-accordion-header-active", "ui-state-active");
                if (options.icons) {
                    clickedChildren = clicked.children(".ui-accordion-header-icon");
                    this._removeClass(clickedChildren, null, options.icons.header)._addClass(clickedChildren, null, options.icons.activeHeader)
                }
                this._addClass(clicked.next(), "ui-accordion-content-active")
            }
        },
        _toggle: function(data) {
            var toShow = data.newPanel,
                toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
            this.prevShow.add(this.prevHide).stop(true, true);
            this.prevShow = toShow;
            this.prevHide = toHide;
            if (this.options.animate) {
                this._animate(toShow, toHide, data)
            } else {
                toHide.hide();
                toShow.show();
                this._toggleComplete(data)
            }
            toHide.attr({
                "aria-hidden": "true"
            });
            toHide.prev().attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            });
            if (toShow.length && toHide.length) {
                toHide.prev().attr({
                    tabIndex: -1,
                    "aria-expanded": "false"
                })
            } else {
                if (toShow.length) {
                    this.headers.filter(function() {
                        return parseInt($(this).attr("tabIndex"), 10) === 0
                    }).attr("tabIndex", -1)
                }
            }
            toShow.attr("aria-hidden", "false").prev().attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            })
        },
        _animate: function(toShow, toHide, data) {
            var total, easing, duration, that = this,
                adjust = 0,
                boxSizing = toShow.css("box-sizing"),
                down = toShow.length && (!toHide.length || (toShow.index() < toHide.index())),
                animate = this.options.animate || {},
                options = down && animate.down || animate,
                complete = function() {
                    that._toggleComplete(data)
                };
            if (typeof options === "number") {
                duration = options
            }
            if (typeof options === "string") {
                easing = options
            }
            easing = easing || options.easing || animate.easing;
            duration = duration || options.duration || animate.duration;
            if (!toHide.length) {
                return toShow.animate(this.showProps, duration, easing, complete)
            }
            if (!toShow.length) {
                return toHide.animate(this.hideProps, duration, easing, complete)
            }
            total = toShow.show().outerHeight();
            toHide.animate(this.hideProps, {
                duration: duration,
                easing: easing,
                step: function(now, fx) {
                    fx.now = Math.round(now)
                }
            });
            toShow.hide().animate(this.showProps, {
                duration: duration,
                easing: easing,
                complete: complete,
                step: function(now, fx) {
                    fx.now = Math.round(now);
                    if (fx.prop !== "height") {
                        if (boxSizing === "content-box") {
                            adjust += fx.now
                        }
                    } else {
                        if (that.options.heightStyle !== "content") {
                            fx.now = Math.round(total - toHide.outerHeight() - adjust);
                            adjust = 0
                        }
                    }
                }
            })
        },
        _toggleComplete: function(data) {
            var toHide = data.oldPanel,
                prev = toHide.prev();
            this._removeClass(toHide, "ui-accordion-content-active");
            this._removeClass(prev, "ui-accordion-header-active")._addClass(prev, "ui-accordion-header-collapsed");
            if (toHide.length) {
                toHide.parent()[0].className = toHide.parent()[0].className
            }
            this._trigger("activate", null, data)
        }
    });
    var safeActiveElement = $.ui.safeActiveElement = function(document) {
        var activeElement;
        try {
            activeElement = document.activeElement
        } catch (error) {
            activeElement = document.body
        }
        if (!activeElement) {
            activeElement = document.body
        }
        if (!activeElement.nodeName) {
            activeElement = document.body
        }
        return activeElement
    };
    /*!
     * jQuery UI Menu 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsMenu = $.widget("ui.menu", {
        version: "1.12.1",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-caret-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left top",
                at: "right top"
            },
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element;
            this.mouseHandled = false;
            this.element.uniqueId().attr({
                role: this.options.role,
                tabIndex: 0
            });
            this._addClass("ui-menu", "ui-widget ui-widget-content");
            this._on({
                "mousedown .ui-menu-item": function(event) {
                    event.preventDefault()
                },
                "click .ui-menu-item": function(event) {
                    var target = $(event.target);
                    var active = $($.ui.safeActiveElement(this.document[0]));
                    if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                        this.select(event);
                        if (!event.isPropagationStopped()) {
                            this.mouseHandled = true
                        }
                        if (target.has(".ui-menu").length) {
                            this.expand(event)
                        } else {
                            if (!this.element.is(":focus") && active.closest(".ui-menu").length) {
                                this.element.trigger("focus", [true]);
                                if (this.active && this.active.parents(".ui-menu").length === 1) {
                                    clearTimeout(this.timer)
                                }
                            }
                        }
                    }
                },
                "mouseenter .ui-menu-item": function(event) {
                    if (this.previousFilter) {
                        return
                    }
                    var actualTarget = $(event.target).closest(".ui-menu-item"),
                        target = $(event.currentTarget);
                    if (actualTarget[0] !== target[0]) {
                        return
                    }
                    this._removeClass(target.siblings().children(".ui-state-active"), null, "ui-state-active");
                    this.focus(event, target)
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    var item = this.active || this.element.find(this.options.items).eq(0);
                    if (!keepActiveItem) {
                        this.focus(event, item)
                    }
                },
                blur: function(event) {
                    this._delay(function() {
                        var notContained = !$.contains(this.element[0], $.ui.safeActiveElement(this.document[0]));
                        if (notContained) {
                            this.collapseAll(event)
                        }
                    })
                },
                keydown: "_keydown"
            });
            this.refresh();
            this._on(this.document, {
                click: function(event) {
                    if (this._closeOnDocumentClick(event)) {
                        this.collapseAll(event)
                    }
                    this.mouseHandled = false
                }
            })
        },
        _destroy: function() {
            var items = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),
                submenus = items.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show();
            submenus.children().each(function() {
                var elem = $(this);
                if (elem.data("ui-menu-submenu-caret")) {
                    elem.remove()
                }
            })
        },
        _keydown: function(event) {
            var match, prev, character, skip, preventDefault = true;
            switch (event.keyCode) {
                case $.ui.keyCode.PAGE_UP:
                    this.previousPage(event);
                    break;
                case $.ui.keyCode.PAGE_DOWN:
                    this.nextPage(event);
                    break;
                case $.ui.keyCode.HOME:
                    this._move("first", "first", event);
                    break;
                case $.ui.keyCode.END:
                    this._move("last", "last", event);
                    break;
                case $.ui.keyCode.UP:
                    this.previous(event);
                    break;
                case $.ui.keyCode.DOWN:
                    this.next(event);
                    break;
                case $.ui.keyCode.LEFT:
                    this.collapse(event);
                    break;
                case $.ui.keyCode.RIGHT:
                    if (this.active && !this.active.is(".ui-state-disabled")) {
                        this.expand(event)
                    }
                    break;
                case $.ui.keyCode.ENTER:
                case $.ui.keyCode.SPACE:
                    this._activate(event);
                    break;
                case $.ui.keyCode.ESCAPE:
                    this.collapse(event);
                    break;
                default:
                    preventDefault = false;
                    prev = this.previousFilter || "";
                    skip = false;
                    character = event.keyCode >= 96 && event.keyCode <= 105 ? (event.keyCode - 96).toString() : String.fromCharCode(event.keyCode);
                    clearTimeout(this.filterTimer);
                    if (character === prev) {
                        skip = true
                    } else {
                        character = prev + character
                    }
                    match = this._filterMenuItems(character);
                    match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;
                    if (!match.length) {
                        character = String.fromCharCode(event.keyCode);
                        match = this._filterMenuItems(character)
                    }
                    if (match.length) {
                        this.focus(event, match);
                        this.previousFilter = character;
                        this.filterTimer = this._delay(function() {
                            delete this.previousFilter
                        }, 1000)
                    } else {
                        delete this.previousFilter
                    }
            }
            if (preventDefault) {
                event.preventDefault()
            }
        },
        _activate: function(event) {
            if (this.active && !this.active.is(".ui-state-disabled")) {
                if (this.active.children("[aria-haspopup='true']").length) {
                    this.expand(event)
                } else {
                    this.select(event)
                }
            }
        },
        refresh: function() {
            var menus, items, newSubmenus, newItems, newWrappers, that = this,
                icon = this.options.icons.submenu,
                submenus = this.element.find(this.options.menus);
            this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length);
            newSubmenus = submenus.filter(":not(.ui-menu)").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var menu = $(this),
                    item = menu.prev(),
                    submenuCaret = $("<span>").data("ui-menu-submenu-caret", true);
                that._addClass(submenuCaret, "ui-menu-icon", "ui-icon " + icon);
                item.attr("aria-haspopup", "true").prepend(submenuCaret);
                menu.attr("aria-labelledby", item.attr("id"))
            });
            this._addClass(newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front");
            menus = submenus.add(this.element);
            items = menus.find(this.options.items);
            items.not(".ui-menu-item").each(function() {
                var item = $(this);
                if (that._isDivider(item)) {
                    that._addClass(item, "ui-menu-divider", "ui-widget-content")
                }
            });
            newItems = items.not(".ui-menu-item, .ui-menu-divider");
            newWrappers = newItems.children().not(".ui-menu").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            });
            this._addClass(newItems, "ui-menu-item")._addClass(newWrappers, "ui-menu-item-wrapper");
            items.filter(".ui-state-disabled").attr("aria-disabled", "true");
            if (this.active && !$.contains(this.element[0], this.active[0])) {
                this.blur()
            }
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role]
        },
        _setOption: function(key, value) {
            if (key === "icons") {
                var icons = this.element.find(".ui-menu-icon");
                this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu)
            }
            this._super(key, value)
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.element.attr("aria-disabled", String(value));
            this._toggleClass(null, "ui-state-disabled", !!value)
        },
        focus: function(event, item) {
            var nested, focused, activeParent;
            this.blur(event, event && event.type === "focus");
            this._scrollIntoView(item);
            this.active = item.first();
            focused = this.active.children(".ui-menu-item-wrapper");
            this._addClass(focused, null, "ui-state-active");
            if (this.options.role) {
                this.element.attr("aria-activedescendant", focused.attr("id"))
            }
            activeParent = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper");
            this._addClass(activeParent, null, "ui-state-active");
            if (event && event.type === "keydown") {
                this._close()
            } else {
                this.timer = this._delay(function() {
                    this._close()
                }, this.delay)
            }
            nested = item.children(".ui-menu");
            if (nested.length && event && (/^mouse/.test(event.type))) {
                this._startOpening(nested)
            }
            this.activeMenu = item.parent();
            this._trigger("focus", event, {
                item: item
            })
        },
        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();
                if (offset < 0) {
                    this.activeMenu.scrollTop(scroll + offset)
                } else {
                    if (offset + itemHeight > elementHeight) {
                        this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight)
                    }
                }
            }
        },
        blur: function(event, fromFocus) {
            if (!fromFocus) {
                clearTimeout(this.timer)
            }
            if (!this.active) {
                return
            }
            this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active");
            this._trigger("blur", event, {
                item: this.active
            });
            this.active = null
        },
        _startOpening: function(submenu) {
            clearTimeout(this.timer);
            if (submenu.attr("aria-hidden") !== "true") {
                return
            }
            this.timer = this._delay(function() {
                this._close();
                this._open(submenu)
            }, this.delay)
        },
        _open: function(submenu) {
            var position = $.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer);
            this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
            submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position)
        },
        collapseAll: function(event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                if (!currentMenu.length) {
                    currentMenu = this.element
                }
                this._close(currentMenu);
                this.blur(event);
                this._removeClass(currentMenu.find(".ui-state-active"), null, "ui-state-active");
                this.activeMenu = currentMenu
            }, this.delay)
        },
        _close: function(startMenu) {
            if (!startMenu) {
                startMenu = this.active ? this.active.parent() : this.element
            }
            startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false")
        },
        _closeOnDocumentClick: function(event) {
            return !$(event.target).closest(".ui-menu").length
        },
        _isDivider: function(item) {
            return !/[^\-\u2014\u2013\s]/.test(item.text())
        },
        collapse: function(event) {
            var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem)
            }
        },
        expand: function(event) {
            var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
            if (newItem && newItem.length) {
                this._open(newItem.parent());
                this._delay(function() {
                    this.focus(event, newItem)
                })
            }
        },
        next: function(event) {
            this._move("next", "first", event)
        },
        previous: function(event) {
            this._move("prev", "last", event)
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length
        },
        _move: function(direction, filter, event) {
            var next;
            if (this.active) {
                if (direction === "first" || direction === "last") {
                    next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1)
                } else {
                    next = this.active[direction + "All"](".ui-menu-item").eq(0)
                }
            }
            if (!next || !next.length || !this.active) {
                next = this.activeMenu.find(this.options.items)[filter]()
            }
            this.focus(event, next)
        },
        nextPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return
            }
            if (this.isLastItem()) {
                return
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base - height < 0
                });
                this.focus(event, item)
            } else {
                this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? "first" : "last"]())
            }
        },
        previousPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return
            }
            if (this.isFirstItem()) {
                return
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base + height > 0
                });
                this.focus(event, item)
            } else {
                this.focus(event, this.activeMenu.find(this.options.items).first())
            }
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight")
        },
        select: function(event) {
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            if (!this.active.has(".ui-menu").length) {
                this.collapseAll(event, true)
            }
            this._trigger("select", event, ui)
        },
        _filterMenuItems: function(character) {
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
                regex = new RegExp("^" + escapedCharacter, "i");
            return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
                return regex.test($.trim($(this).children(".ui-menu-item-wrapper").text()))
            })
        }
    });
    /*!
     * jQuery UI Autocomplete 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.autocomplete", {
        version: "1.12.1",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function() {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(),
                isTextarea = nodeName === "textarea",
                isInput = nodeName === "input";
            this.isMultiLine = isTextarea || !isInput && this._isContentEditable(this.element);
            this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
            this.isNewMenu = true;
            this._addClass("ui-autocomplete-input");
            this.element.attr("autocomplete", "off");
            this._on(this.element, {
                keydown: function(event) {
                    if (this.element.prop("readOnly")) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return
                    }
                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                            suppressKeyPress = true;
                            this._move("previousPage", event);
                            break;
                        case keyCode.PAGE_DOWN:
                            suppressKeyPress = true;
                            this._move("nextPage", event);
                            break;
                        case keyCode.UP:
                            suppressKeyPress = true;
                            this._keyEvent("previous", event);
                            break;
                        case keyCode.DOWN:
                            suppressKeyPress = true;
                            this._keyEvent("next", event);
                            break;
                        case keyCode.ENTER:
                            if (this.menu.active) {
                                suppressKeyPress = true;
                                event.preventDefault();
                                this.menu.select(event)
                            }
                            break;
                        case keyCode.TAB:
                            if (this.menu.active) {
                                this.menu.select(event)
                            }
                            break;
                        case keyCode.ESCAPE:
                            if (this.menu.element.is(":visible")) {
                                if (!this.isMultiLine) {
                                    this._value(this.term)
                                }
                                this.close(event);
                                event.preventDefault()
                            }
                            break;
                        default:
                            suppressKeyPressRepeat = true;
                            this._searchTimeout(event);
                            break
                    }
                },
                keypress: function(event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        if (!this.isMultiLine || this.menu.element.is(":visible")) {
                            event.preventDefault()
                        }
                        return
                    }
                    if (suppressKeyPressRepeat) {
                        return
                    }
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                            this._move("previousPage", event);
                            break;
                        case keyCode.PAGE_DOWN:
                            this._move("nextPage", event);
                            break;
                        case keyCode.UP:
                            this._keyEvent("previous", event);
                            break;
                        case keyCode.DOWN:
                            this._keyEvent("next", event);
                            break
                    }
                },
                input: function(event) {
                    if (suppressInput) {
                        suppressInput = false;
                        event.preventDefault();
                        return
                    }
                    this._searchTimeout(event)
                },
                focus: function() {
                    this.selectedItem = null;
                    this.previous = this._value()
                },
                blur: function(event) {
                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return
                    }
                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event)
                }
            });
            this._initSource();
            this.menu = $("<ul>").appendTo(this._appendTo()).menu({
                role: null
            }).hide().menu("instance");
            this._addClass(this.menu.element, "ui-autocomplete", "ui-front");
            this._on(this.menu.element, {
                mousedown: function(event) {
                    event.preventDefault();
                    this.cancelBlur = true;
                    this._delay(function() {
                        delete this.cancelBlur;
                        if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {
                            this.element.trigger("focus")
                        }
                    })
                },
                menufocus: function(event, ui) {
                    var label, item;
                    if (this.isNewMenu) {
                        this.isNewMenu = false;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            this.document.one("mousemove", function() {
                                $(event.target).trigger(event.originalEvent)
                            });
                            return
                        }
                    }
                    item = ui.item.data("ui-autocomplete-item");
                    if (false !== this._trigger("focus", event, {
                            item: item
                        })) {
                        if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                            this._value(item.value)
                        }
                    }
                    label = ui.item.attr("aria-label") || item.value;
                    if (label && $.trim(label).length) {
                        this.liveRegion.children().hide();
                        $("<div>").text(label).appendTo(this.liveRegion)
                    }
                },
                menuselect: function(event, ui) {
                    var item = ui.item.data("ui-autocomplete-item"),
                        previous = this.previous;
                    if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {
                        this.element.trigger("focus");
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                            this.selectedItem = item
                        })
                    }
                    if (false !== this._trigger("select", event, {
                            item: item
                        })) {
                        this._value(item.value)
                    }
                    this.term = this._value();
                    this.close(event);
                    this.selectedItem = item
                }
            });
            this.liveRegion = $("<div>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).appendTo(this.document[0].body);
            this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete")
                }
            })
        },
        _destroy: function() {
            clearTimeout(this.searching);
            this.element.removeAttr("autocomplete");
            this.menu.element.remove();
            this.liveRegion.remove()
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "source") {
                this._initSource()
            }
            if (key === "appendTo") {
                this.menu.element.appendTo(this._appendTo())
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort()
            }
        },
        _isEventTargetInWidget: function(event) {
            var menuElement = this.menu.element[0];
            return event.target === this.element[0] || event.target === menuElement || $.contains(menuElement, event.target)
        },
        _closeOnClickOutside: function(event) {
            if (!this._isEventTargetInWidget(event)) {
                this.close()
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0)
            }
            if (!element || !element[0]) {
                element = this.element.closest(".ui-front, dialog")
            }
            if (!element.length) {
                element = this.document[0].body
            }
            return element
        },
        _initSource: function() {
            var array, url, that = this;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function(request, response) {
                    response($.ui.autocomplete.filter(array, request.term))
                }
            } else {
                if (typeof this.options.source === "string") {
                    url = this.options.source;
                    this.source = function(request, response) {
                        if (that.xhr) {
                            that.xhr.abort()
                        }
                        that.xhr = $.ajax({
                            url: url,
                            data: request,
                            dataType: "json",
                            success: function(data) {
                                response(data)
                            },
                            error: function() {
                                response([])
                            }
                        })
                    }
                } else {
                    this.source = this.options.source
                }
            }
        },
        _searchTimeout: function(event) {
            clearTimeout(this.searching);
            this.searching = this._delay(function() {
                var equalValues = this.term === this._value(),
                    menuVisible = this.menu.element.is(":visible"),
                    modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
                if (!equalValues || (equalValues && !menuVisible && !modifierKey)) {
                    this.selectedItem = null;
                    this.search(null, event)
                }
            }, this.options.delay)
        },
        search: function(value, event) {
            value = value != null ? value : this._value();
            this.term = this._value();
            if (value.length < this.options.minLength) {
                return this.close(event)
            }
            if (this._trigger("search", event) === false) {
                return
            }
            return this._search(value)
        },
        _search: function(value) {
            this.pending++;
            this._addClass("ui-autocomplete-loading");
            this.cancelSearch = false;
            this.source({
                term: value
            }, this._response())
        },
        _response: function() {
            var index = ++this.requestIndex;
            return $.proxy(function(content) {
                if (index === this.requestIndex) {
                    this.__response(content)
                }
                this.pending--;
                if (!this.pending) {
                    this._removeClass("ui-autocomplete-loading")
                }
            }, this)
        },
        __response: function(content) {
            if (content) {
                content = this._normalize(content)
            }
            this._trigger("response", null, {
                content: content
            });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
                this._trigger("open")
            } else {
                this._close()
            }
        },
        close: function(event) {
            this.cancelSearch = true;
            this._close(event)
        },
        _close: function(event) {
            this._off(this.document, "mousedown");
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = true;
                this._trigger("close", event)
            }
        },
        _change: function(event) {
            if (this.previous !== this._value()) {
                this._trigger("change", event, {
                    item: this.selectedItem
                })
            }
        },
        _normalize: function(items) {
            if (items.length && items[0].label && items[0].value) {
                return items
            }
            return $.map(items, function(item) {
                if (typeof item === "string") {
                    return {
                        label: item,
                        value: item
                    }
                }
                return $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                })
            })
        },
        _suggest: function(items) {
            var ul = this.menu.element.empty();
            this._renderMenu(ul, items);
            this.isNewMenu = true;
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({
                of: this.element
            }, this.options.position));
            if (this.options.autoFocus) {
                this.menu.next()
            }
            this._on(this.document, {
                mousedown: "_closeOnClickOutside"
            })
        },
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth()))
        },
        _renderMenu: function(ul, items) {
            var that = this;
            $.each(items, function(index, item) {
                that._renderItemData(ul, item)
            })
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-autocomplete-item", item)
        },
        _renderItem: function(ul, item) {
            return $("<li>").append($("<div>").text(item.label)).appendTo(ul)
        },
        _move: function(direction, event) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, event);
                return
            }
            if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                if (!this.isMultiLine) {
                    this._value(this.term)
                }
                this.menu.blur();
                return
            }
            this.menu[direction](event)
        },
        widget: function() {
            return this.menu.element
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments)
        },
        _keyEvent: function(keyEvent, event) {
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
                this._move(keyEvent, event);
                event.preventDefault()
            }
        },
        _isContentEditable: function(element) {
            if (!element.length) {
                return false
            }
            var editable = element.prop("contentEditable");
            if (editable === "inherit") {
                return this._isContentEditable(element.parent())
            }
            return editable === "true"
        }
    });
    $.extend($.ui.autocomplete, {
        escapeRegex: function(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
        },
        filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value)
            })
        }
    });
    $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(amount) {
                    return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate."
                }
            }
        },
        __response: function(content) {
            var message;
            this._superApply(arguments);
            if (this.options.disabled || this.cancelSearch) {
                return
            }
            if (content && content.length) {
                message = this.options.messages.results(content.length)
            } else {
                message = this.options.messages.noResults
            }
            this.liveRegion.children().hide();
            $("<div>").text(message).appendTo(this.liveRegion)
        }
    });
    var widgetsAutocomplete = $.ui.autocomplete;
    /*!
     * jQuery UI Controlgroup 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;
    var widgetsControlgroup = $.widget("ui.controlgroup", {
        version: "1.12.1",
        defaultElement: "<div>",
        options: {
            direction: "horizontal",
            disabled: null,
            onlyVisible: true,
            items: {
                button: "input[type=button], input[type=submit], input[type=reset], button, a",
                controlgroupLabel: ".ui-controlgroup-label",
                checkboxradio: "input[type='checkbox'], input[type='radio']",
                selectmenu: "select",
                spinner: ".ui-spinner-input"
            }
        },
        _create: function() {
            this._enhance()
        },
        _enhance: function() {
            this.element.attr("role", "toolbar");
            this.refresh()
        },
        _destroy: function() {
            this._callChildMethod("destroy");
            this.childWidgets.removeData("ui-controlgroup-data");
            this.element.removeAttr("role");
            if (this.options.items.controlgroupLabel) {
                this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()
            }
        },
        _initWidgets: function() {
            var that = this,
                childWidgets = [];
            $.each(this.options.items, function(widget, selector) {
                var labels;
                var options = {};
                if (!selector) {
                    return
                }
                if (widget === "controlgroupLabel") {
                    labels = that.element.find(selector);
                    labels.each(function() {
                        var element = $(this);
                        if (element.children(".ui-controlgroup-label-contents").length) {
                            return
                        }
                        element.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")
                    });
                    that._addClass(labels, null, "ui-widget ui-widget-content ui-state-default");
                    childWidgets = childWidgets.concat(labels.get());
                    return
                }
                if (!$.fn[widget]) {
                    return
                }
                if (that["_" + widget + "Options"]) {
                    options = that["_" + widget + "Options"]("middle")
                } else {
                    options = {
                        classes: {}
                    }
                }
                that.element.find(selector).each(function() {
                    var element = $(this);
                    var instance = element[widget]("instance");
                    var instanceOptions = $.widget.extend({}, options);
                    if (widget === "button" && element.parent(".ui-spinner").length) {
                        return
                    }
                    if (!instance) {
                        instance = element[widget]()[widget]("instance")
                    }
                    if (instance) {
                        instanceOptions.classes = that._resolveClassesValues(instanceOptions.classes, instance)
                    }
                    element[widget](instanceOptions);
                    var widgetElement = element[widget]("widget");
                    $.data(widgetElement[0], "ui-controlgroup-data", instance ? instance : element[widget]("instance"));
                    childWidgets.push(widgetElement[0])
                })
            });
            this.childWidgets = $($.unique(childWidgets));
            this._addClass(this.childWidgets, "ui-controlgroup-item")
        },
        _callChildMethod: function(method) {
            this.childWidgets.each(function() {
                var element = $(this),
                    data = element.data("ui-controlgroup-data");
                if (data && data[method]) {
                    data[method]()
                }
            })
        },
        _updateCornerClass: function(element, position) {
            var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
            var add = this._buildSimpleOptions(position, "label").classes.label;
            this._removeClass(element, null, remove);
            this._addClass(element, null, add)
        },
        _buildSimpleOptions: function(position, key) {
            var direction = this.options.direction === "vertical";
            var result = {
                classes: {}
            };
            result.classes[key] = {
                middle: "",
                first: "ui-corner-" + (direction ? "top" : "left"),
                last: "ui-corner-" + (direction ? "bottom" : "right"),
                only: "ui-corner-all"
            }[position];
            return result
        },
        _spinnerOptions: function(position) {
            var options = this._buildSimpleOptions(position, "ui-spinner");
            options.classes["ui-spinner-up"] = "";
            options.classes["ui-spinner-down"] = "";
            return options
        },
        _buttonOptions: function(position) {
            return this._buildSimpleOptions(position, "ui-button")
        },
        _checkboxradioOptions: function(position) {
            return this._buildSimpleOptions(position, "ui-checkboxradio-label")
        },
        _selectmenuOptions: function(position) {
            var direction = this.options.direction === "vertical";
            return {
                width: direction ? "auto" : false,
                classes: {
                    middle: {
                        "ui-selectmenu-button-open": "",
                        "ui-selectmenu-button-closed": ""
                    },
                    first: {
                        "ui-selectmenu-button-open": "ui-corner-" + (direction ? "top" : "tl"),
                        "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "top" : "left")
                    },
                    last: {
                        "ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
                        "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "bottom" : "right")
                    },
                    only: {
                        "ui-selectmenu-button-open": "ui-corner-top",
                        "ui-selectmenu-button-closed": "ui-corner-all"
                    }
                }[position]
            }
        },
        _resolveClassesValues: function(classes, instance) {
            var result = {};
            $.each(classes, function(key) {
                var current = instance.options.classes[key] || "";
                current = $.trim(current.replace(controlgroupCornerRegex, ""));
                result[key] = (current + " " + classes[key]).replace(/\s+/g, " ")
            });
            return result
        },
        _setOption: function(key, value) {
            if (key === "direction") {
                this._removeClass("ui-controlgroup-" + this.options.direction)
            }
            this._super(key, value);
            if (key === "disabled") {
                this._callChildMethod(value ? "disable" : "enable");
                return
            }
            this.refresh()
        },
        refresh: function() {
            var children, that = this;
            this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction);
            if (this.options.direction === "horizontal") {
                this._addClass(null, "ui-helper-clearfix")
            }
            this._initWidgets();
            children = this.childWidgets;
            if (this.options.onlyVisible) {
                children = children.filter(":visible")
            }
            if (children.length) {
                $.each(["first", "last"], function(index, value) {
                    var instance = children[value]().data("ui-controlgroup-data");
                    if (instance && that["_" + instance.widgetName + "Options"]) {
                        var options = that["_" + instance.widgetName + "Options"](children.length === 1 ? "only" : value);
                        options.classes = that._resolveClassesValues(options.classes, instance);
                        instance.element[instance.widgetName](options)
                    } else {
                        that._updateCornerClass(children[value](), value)
                    }
                });
                this._callChildMethod("refresh")
            }
        }
    });
    /*!
     * jQuery UI Checkboxradio 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.checkboxradio", [$.ui.formResetMixin, {
        version: "1.12.1",
        options: {
            disabled: null,
            label: null,
            icon: true,
            classes: {
                "ui-checkboxradio-label": "ui-corner-all",
                "ui-checkboxradio-icon": "ui-corner-all"
            }
        },
        _getCreateOptions: function() {
            var disabled, labels;
            var that = this;
            var options = this._super() || {};
            this._readType();
            labels = this.element.labels();
            this.label = $(labels[labels.length - 1]);
            if (!this.label.length) {
                $.error("No label found for checkboxradio widget")
            }
            this.originalLabel = "";
            this.label.contents().not(this.element[0]).each(function() {
                that.originalLabel += this.nodeType === 3 ? $(this).text() : this.outerHTML
            });
            if (this.originalLabel) {
                options.label = this.originalLabel
            }
            disabled = this.element[0].disabled;
            if (disabled != null) {
                options.disabled = disabled
            }
            return options
        },
        _create: function() {
            var checked = this.element[0].checked;
            this._bindFormResetHandler();
            if (this.options.disabled == null) {
                this.options.disabled = this.element[0].disabled
            }
            this._setOption("disabled", this.options.disabled);
            this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible");
            this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget");
            if (this.type === "radio") {
                this._addClass(this.label, "ui-checkboxradio-radio-label")
            }
            if (this.options.label && this.options.label !== this.originalLabel) {
                this._updateLabel()
            } else {
                if (this.originalLabel) {
                    this.options.label = this.originalLabel
                }
            }
            this._enhance();
            if (checked) {
                this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active");
                if (this.icon) {
                    this._addClass(this.icon, null, "ui-state-hover")
                }
            }
            this._on({
                change: "_toggleClasses",
                focus: function() {
                    this._addClass(this.label, null, "ui-state-focus ui-visual-focus")
                },
                blur: function() {
                    this._removeClass(this.label, null, "ui-state-focus ui-visual-focus")
                }
            })
        },
        _readType: function() {
            var nodeName = this.element[0].nodeName.toLowerCase();
            this.type = this.element[0].type;
            if (nodeName !== "input" || !/radio|checkbox/.test(this.type)) {
                $.error("Can't create checkboxradio on element.nodeName=" + nodeName + " and element.type=" + this.type)
            }
        },
        _enhance: function() {
            this._updateIcon(this.element[0].checked)
        },
        widget: function() {
            return this.label
        },
        _getRadioGroup: function() {
            var group;
            var name = this.element[0].name;
            var nameSelector = "input[name='" + $.ui.escapeSelector(name) + "']";
            if (!name) {
                return $([])
            }
            if (this.form.length) {
                group = $(this.form[0].elements).filter(nameSelector)
            } else {
                group = $(nameSelector).filter(function() {
                    return $(this).form().length === 0
                })
            }
            return group.not(this.element)
        },
        _toggleClasses: function() {
            var checked = this.element[0].checked;
            this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
            if (this.options.icon && this.type === "checkbox") {
                this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", checked)._toggleClass(this.icon, null, "ui-icon-blank", !checked)
            }
            if (this.type === "radio") {
                this._getRadioGroup().each(function() {
                    var instance = $(this).checkboxradio("instance");
                    if (instance) {
                        instance._removeClass(instance.label, "ui-checkboxradio-checked", "ui-state-active")
                    }
                })
            }
        },
        _destroy: function() {
            this._unbindFormResetHandler();
            if (this.icon) {
                this.icon.remove();
                this.iconSpace.remove()
            }
        },
        _setOption: function(key, value) {
            if (key === "label" && !value) {
                return
            }
            this._super(key, value);
            if (key === "disabled") {
                this._toggleClass(this.label, null, "ui-state-disabled", value);
                this.element[0].disabled = value;
                return
            }
            this.refresh()
        },
        _updateIcon: function(checked) {
            var toAdd = "ui-icon ui-icon-background ";
            if (this.options.icon) {
                if (!this.icon) {
                    this.icon = $("<span>");
                    this.iconSpace = $("<span> </span>");
                    this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")
                }
                if (this.type === "checkbox") {
                    toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
                    this._removeClass(this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check")
                } else {
                    toAdd += "ui-icon-blank"
                }
                this._addClass(this.icon, "ui-checkboxradio-icon", toAdd);
                if (!checked) {
                    this._removeClass(this.icon, null, "ui-icon-check ui-state-checked")
                }
                this.icon.prependTo(this.label).after(this.iconSpace)
            } else {
                if (this.icon !== undefined) {
                    this.icon.remove();
                    this.iconSpace.remove();
                    delete this.icon
                }
            }
        },
        _updateLabel: function() {
            var contents = this.label.contents().not(this.element[0]);
            if (this.icon) {
                contents = contents.not(this.icon[0])
            }
            if (this.iconSpace) {
                contents = contents.not(this.iconSpace[0])
            }
            contents.remove();
            this.label.append(this.options.label)
        },
        refresh: function() {
            var checked = this.element[0].checked,
                isDisabled = this.element[0].disabled;
            this._updateIcon(checked);
            this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
            if (this.options.label !== null) {
                this._updateLabel()
            }
            if (isDisabled !== this.options.disabled) {
                this._setOptions({
                    disabled: isDisabled
                })
            }
        }
    }]);
    var widgetsCheckboxradio = $.ui.checkboxradio;
    /*!
     * jQuery UI Button 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.button", {
        version: "1.12.1",
        defaultElement: "<button>",
        options: {
            classes: {
                "ui-button": "ui-corner-all"
            },
            disabled: null,
            icon: null,
            iconPosition: "beginning",
            label: null,
            showLabel: true
        },
        _getCreateOptions: function() {
            var disabled, options = this._super() || {};
            this.isInput = this.element.is("input");
            disabled = this.element[0].disabled;
            if (disabled != null) {
                options.disabled = disabled
            }
            this.originalLabel = this.isInput ? this.element.val() : this.element.html();
            if (this.originalLabel) {
                options.label = this.originalLabel
            }
            return options
        },
        _create: function() {
            if (!this.option.showLabel & !this.options.icon) {
                this.options.showLabel = true
            }
            if (this.options.disabled == null) {
                this.options.disabled = this.element[0].disabled || false
            }
            this.hasTitle = !!this.element.attr("title");
            if (this.options.label && this.options.label !== this.originalLabel) {
                if (this.isInput) {
                    this.element.val(this.options.label)
                } else {
                    this.element.html(this.options.label)
                }
            }
            this._addClass("ui-button", "ui-widget");
            this._setOption("disabled", this.options.disabled);
            this._enhance();
            if (this.element.is("a")) {
                this._on({
                    keyup: function(event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            event.preventDefault();
                            if (this.element[0].click) {
                                this.element[0].click()
                            } else {
                                this.element.trigger("click")
                            }
                        }
                    }
                })
            }
        },
        _enhance: function() {
            if (!this.element.is("button")) {
                this.element.attr("role", "button")
            }
            if (this.options.icon) {
                this._updateIcon("icon", this.options.icon);
                this._updateTooltip()
            }
        },
        _updateTooltip: function() {
            this.title = this.element.attr("title");
            if (!this.options.showLabel && !this.title) {
                this.element.attr("title", this.options.label)
            }
        },
        _updateIcon: function(option, value) {
            var icon = option !== "iconPosition",
                position = icon ? this.options.iconPosition : value,
                displayBlock = position === "top" || position === "bottom";
            if (!this.icon) {
                this.icon = $("<span>");
                this._addClass(this.icon, "ui-button-icon", "ui-icon");
                if (!this.options.showLabel) {
                    this._addClass("ui-button-icon-only")
                }
            } else {
                if (icon) {
                    this._removeClass(this.icon, null, this.options.icon)
                }
            }
            if (icon) {
                this._addClass(this.icon, null, value)
            }
            this._attachIcon(position);
            if (displayBlock) {
                this._addClass(this.icon, null, "ui-widget-icon-block");
                if (this.iconSpace) {
                    this.iconSpace.remove()
                }
            } else {
                if (!this.iconSpace) {
                    this.iconSpace = $("<span> </span>");
                    this._addClass(this.iconSpace, "ui-button-icon-space")
                }
                this._removeClass(this.icon, null, "ui-wiget-icon-block");
                this._attachIconSpace(position)
            }
        },
        _destroy: function() {
            this.element.removeAttr("role");
            if (this.icon) {
                this.icon.remove()
            }
            if (this.iconSpace) {
                this.iconSpace.remove()
            }
            if (!this.hasTitle) {
                this.element.removeAttr("title")
            }
        },
        _attachIconSpace: function(iconPosition) {
            this.icon[/^(?:end|bottom)/.test(iconPosition) ? "before" : "after"](this.iconSpace)
        },
        _attachIcon: function(iconPosition) {
            this.element[/^(?:end|bottom)/.test(iconPosition) ? "append" : "prepend"](this.icon)
        },
        _setOptions: function(options) {
            var newShowLabel = options.showLabel === undefined ? this.options.showLabel : options.showLabel,
                newIcon = options.icon === undefined ? this.options.icon : options.icon;
            if (!newShowLabel && !newIcon) {
                options.showLabel = true
            }
            this._super(options)
        },
        _setOption: function(key, value) {
            if (key === "icon") {
                if (value) {
                    this._updateIcon(key, value)
                } else {
                    if (this.icon) {
                        this.icon.remove();
                        if (this.iconSpace) {
                            this.iconSpace.remove()
                        }
                    }
                }
            }
            if (key === "iconPosition") {
                this._updateIcon(key, value)
            }
            if (key === "showLabel") {
                this._toggleClass("ui-button-icon-only", null, !value);
                this._updateTooltip()
            }
            if (key === "label") {
                if (this.isInput) {
                    this.element.val(value)
                } else {
                    this.element.html(value);
                    if (this.icon) {
                        this._attachIcon(this.options.iconPosition);
                        this._attachIconSpace(this.options.iconPosition)
                    }
                }
            }
            this._super(key, value);
            if (key === "disabled") {
                this._toggleClass(null, "ui-state-disabled", value);
                this.element[0].disabled = value;
                if (value) {
                    this.element.blur()
                }
            }
        },
        refresh: function() {
            var isDisabled = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");
            if (isDisabled !== this.options.disabled) {
                this._setOptions({
                    disabled: isDisabled
                })
            }
            this._updateTooltip()
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.button", $.ui.button, {
            options: {
                text: true,
                icons: {
                    primary: null,
                    secondary: null
                }
            },
            _create: function() {
                if (this.options.showLabel && !this.options.text) {
                    this.options.showLabel = this.options.text
                }
                if (!this.options.showLabel && this.options.text) {
                    this.options.text = this.options.showLabel
                }
                if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) {
                    if (this.options.icons.primary) {
                        this.options.icon = this.options.icons.primary
                    } else {
                        this.options.icon = this.options.icons.secondary;
                        this.options.iconPosition = "end"
                    }
                } else {
                    if (this.options.icon) {
                        this.options.icons.primary = this.options.icon
                    }
                }
                this._super()
            },
            _setOption: function(key, value) {
                if (key === "text") {
                    this._super("showLabel", value);
                    return
                }
                if (key === "showLabel") {
                    this.options.text = value
                }
                if (key === "icon") {
                    this.options.icons.primary = value
                }
                if (key === "icons") {
                    if (value.primary) {
                        this._super("icon", value.primary);
                        this._super("iconPosition", "beginning")
                    } else {
                        if (value.secondary) {
                            this._super("icon", value.secondary);
                            this._super("iconPosition", "end")
                        }
                    }
                }
                this._superApply(arguments)
            }
        });
        $.fn.button = (function(orig) {
            return function() {
                if (!this.length || (this.length && this[0].tagName !== "INPUT") || (this.length && this[0].tagName === "INPUT" && (this.attr("type") !== "checkbox" && this.attr("type") !== "radio"))) {
                    return orig.apply(this, arguments)
                }
                if (!$.ui.checkboxradio) {
                    $.error("Checkboxradio widget missing")
                }
                if (arguments.length === 0) {
                    return this.checkboxradio({
                        icon: false
                    })
                }
                return this.checkboxradio.apply(this, arguments)
            }
        })($.fn.button);
        $.fn.buttonset = function() {
            if (!$.ui.controlgroup) {
                $.error("Controlgroup widget missing")
            }
            if (arguments[0] === "option" && arguments[1] === "items" && arguments[2]) {
                return this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]])
            }
            if (arguments[0] === "option" && arguments[1] === "items") {
                return this.controlgroup.apply(this, [arguments[0], "items.button"])
            }
            if (typeof arguments[0] === "object" && arguments[0].items) {
                arguments[0].items = {
                    button: arguments[0].items
                }
            }
            return this.controlgroup.apply(this, arguments)
        }
    }
    var widgetsButton = $.ui.button;
    /*!
     * jQuery UI Datepicker 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.extend($.ui, {
        datepicker: {
            version: "1.12.1"
        }
    });
    var datepicker_instActive;

    function datepicker_getZindex(elem) {
        var position, value;
        while (elem.length && elem[0] !== document) {
            position = elem.css("position");
            if (position === "absolute" || position === "relative" || position === "fixed") {
                value = parseInt(elem.css("zIndex"), 10);
                if (!isNaN(value) && value !== 0) {
                    return value
                }
            }
            elem = elem.parent()
        }
        return 0
    }

    function Datepicker() {
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = "ff-ui-datepicker-div";
        this._inlineClass = "ff-ui-datepicker-inline";
        this._appendClass = "ff-ui-datepicker-append";
        this._triggerClass = "ff-ui-datepicker-trigger";
        this._dialogClass = "ff-ui-datepicker-dialog";
        this._disableClass = "ff-ui-datepicker-disabled";
        this._unselectableClass = "ff-ui-datepicker-unselectable";
        this._currentClass = "ff-ui-datepicker-current-day";
        this._dayOverClass = "ff-ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            yearRange: "c-10:c+10",
            showOtherMonths: false,
            selectOtherMonths: false,
            showWeek: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: true,
            showButtonPanel: false,
            autoSize: false,
            disabled: false
        };
        $.extend(this._defaults, this.regional[""]);
        this.regional.en = $.extend(true, {}, this.regional[""]);
        this.regional["en-US"] = $.extend(true, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ff-ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
    }
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function() {
            return this.dpDiv
        },
        setDefaults: function(settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this
        },
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = (nodeName === "div" || nodeName === "span");
            if (!target.id) {
                this.uuid += 1;
                target.id = "dp" + this.uuid
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            if (nodeName === "input") {
                this._connectDatepicker(target, inst)
            } else {
                if (inline) {
                    this._inlineDatepicker(target, inst)
                }
            }
        },
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: (!inline ? this.dpDiv : datepicker_bindHover($("<div class='" + this._inlineClass + " ff-ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))
            }
        },
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target)
            }
        },
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"),
                isRTL = this._get(inst, "isRTL");
            if (inst.append) {
                inst.append.remove()
            }
            if (appendText) {
                inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append)
            }
            input.off("focus", this._showDatepicker);
            if (inst.trigger) {
                inst.trigger.remove()
            }
            showOn = this._get(inst, "showOn");
            if (showOn === "focus" || showOn === "both") {
                input.on("focus", this._showDatepicker)
            }
            if (showOn === "button" || showOn === "both") {
                buttonText = this._get(inst, "buttonText");
                buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                })));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.on("click", function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                        $.datepicker._hideDatepicker()
                    } else {
                        if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                            $.datepicker._hideDatepicker();
                            $.datepicker._showDatepicker(input[0])
                        } else {
                            $.datepicker._showDatepicker(input[0])
                        }
                    }
                    return false
                })
            }
        },
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009, 12 - 1, 20),
                    dateFormat = this._get(inst, "dateFormat");
                if (dateFormat.match(/[DM]/)) {
                    findMax = function(names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i
                            }
                        }
                        return maxI
                    };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort"))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort"))) + 20 - date.getDay())
                }
                inst.input.attr("size", this._formatDate(inst, date).length)
            }
        },
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target)
            }
            inst.dpDiv.css("display", "block")
        },
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
            if (!inst) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.on("keydown", this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], "datepicker", inst)
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
            this._dialogInput.val(date);
            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY]
            }
            this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv)
            }
            $.data(this._dialogInput[0], "datepicker", inst);
            return this
        },
        _destroyDatepicker: function(target) {
            var nodeName, $target = $(target),
                inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if (nodeName === "input") {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)
            } else {
                if (nodeName === "div" || nodeName === "span") {
                    $target.removeClass(this.markerClassName).empty()
                }
            }
            if (datepicker_instActive === inst) {
                datepicker_instActive = null
            }
        },
        _enableDatepicker: function(target) {
            var nodeName, inline, $target = $(target),
                inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = false;
                inst.trigger.filter("button").each(function() {
                    this.disabled = false
                }).end().filter("img").css({
                    opacity: "1.0",
                    cursor: ""
                })
            } else {
                if (nodeName === "div" || nodeName === "span") {
                    inline = $target.children("." + this._inlineClass);
                    inline.children().removeClass("ui-state-disabled");
                    inline.find("select.ff-ui-datepicker-month, select.ff-ui-datepicker-year").prop("disabled", false)
                }
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return (value === target ? null : value)
            })
        },
        _disableDatepicker: function(target) {
            var nodeName, inline, $target = $(target),
                inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = true;
                inst.trigger.filter("button").each(function() {
                    this.disabled = true
                }).end().filter("img").css({
                    opacity: "0.5",
                    cursor: "default"
                })
            } else {
                if (nodeName === "div" || nodeName === "span") {
                    inline = $target.children("." + this._inlineClass);
                    inline.children().addClass("ui-state-disabled");
                    inline.find("select.ff-ui-datepicker-month, select.ff-ui-datepicker-year").prop("disabled", true)
                }
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return (value === target ? null : value)
            });
            this._disabledInputs[this._disabledInputs.length] = target
        },
        _isDisabledDatepicker: function(target) {
            if (!target) {
                return false
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true
                }
            }
            return false
        },
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker")
            } catch (err) {
                throw "Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target);
            if (arguments.length === 2 && typeof name === "string") {
                return (name === "defaults" ? $.extend({}, $.datepicker._defaults) : (inst ? (name === "all" ? $.extend({}, inst.settings) : this._get(inst, name)) : null))
            }
            settings = name || {};
            if (typeof name === "string") {
                settings = {};
                settings[name] = value
            }
            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker()
                }
                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, "min");
                maxDate = this._getMinMaxDate(inst, "max");
                datepicker_extendRemove(inst.settings, settings);
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate)
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate)
                }
                if ("disabled" in settings) {
                    if (settings.disabled) {
                        this._disableDatepicker(target)
                    } else {
                        this._enableDatepicker(target)
                    }
                }
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst)
            }
        },
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value)
        },
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst)
            }
        },
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst)
            }
        },
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault)
            }
            return (inst ? this._getDate(inst) : null)
        },
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target),
                handled = true,
                isRTL = inst.dpDiv.is(".ff-ui-datepicker-rtl");
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                    case 9:
                        $.datepicker._hideDatepicker();
                        handled = false;
                        break;
                    case 13:
                        sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
                        if (sel[0]) {
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0])
                        }
                        onSelect = $.datepicker._get(inst, "onSelect");
                        if (onSelect) {
                            dateStr = $.datepicker._formatDate(inst);
                            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst])
                        } else {
                            $.datepicker._hideDatepicker()
                        }
                        return false;
                    case 27:
                        $.datepicker._hideDatepicker();
                        break;
                    case 33:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M");
                        break;
                    case 34:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M");
                        break;
                    case 35:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._clearDate(event.target)
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 36:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._gotoToday(event.target)
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 37:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M")
                        }
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, -7, "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 39:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M")
                        }
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, +7, "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    default:
                        handled = false
                }
            } else {
                if (event.keyCode === 36 && event.ctrlKey) {
                    $.datepicker._showDatepicker(this)
                } else {
                    handled = false
                }
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation()
            }
        },
        _doKeyPress: function(event) {
            var chars, chr, inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, "constrainInput")) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1)
            }
        },
        _doKeyUp: function(event) {
            var date, inst = $.datepicker._getInst(event.target);
            if (inst.input.val() !== inst.lastVal) {
                try {
                    date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), (inst.input ? inst.input.val() : null), $.datepicker._getFormatConfig(inst));
                    if (date) {
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst)
                    }
                } catch (err) {}
            }
            return true
        },
        _showDatepicker: function(input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() !== "input") {
                input = $("input", input.parentNode)[0]
            }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
                return
            }
            var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if (inst && $.datepicker._datepickerShowing) {
                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0])
                }
            }
            beforeShow = $.datepicker._get(inst, "beforeShow");
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
            if (beforeShowSettings === false) {
                return
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) {
                input.value = ""
            }
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight
            }
            isFixed = false;
            $(input).parents().each(function() {
                isFixed |= $(this).css("position") === "fixed";
                return !isFixed
            });
            offset = {
                left: $.datepicker._pos[0],
                top: $.datepicker._pos[1]
            };
            $.datepicker._pos = null;
            inst.dpDiv.empty();
            inst.dpDiv.css({
                position: "absolute",
                display: "block",
                top: "-1000px"
            });
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: ($.datepicker._inDialog && $.blockUI ? "static" : (isFixed ? "fixed" : "absolute")),
                display: "none",
                left: offset.left + "px",
                top: offset.top + "px"
            });
            if (!inst.inline) {
                showAnim = $.datepicker._get(inst, "showAnim");
                duration = $.datepicker._get(inst, "duration");
                inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                $.datepicker._datepickerShowing = true;
                if ($.effects && $.effects.effect[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration)
                } else {
                    inst.dpDiv[showAnim || "show"](showAnim ? duration : null)
                }
                if ($.datepicker._shouldFocusInput(inst)) {
                    inst.input.trigger("focus")
                }
                $.datepicker._curInst = inst
            }
        },
        _updateDatepicker: function(inst) {
            this.maxRows = 4;
            datepicker_instActive = inst;
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);
            var origyearshtml, numMonths = this._getNumberOfMonths(inst),
                cols = numMonths[1],
                width = 17,
                activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");
            if (activeCell.length > 0) {
                datepicker_handleMouseover.apply(activeCell.get(0))
            }
            inst.dpDiv.removeClass("ff-ui-datepicker-multi-2 ff-ui-datepicker-multi-3 ff-ui-datepicker-multi-4").width("");
            if (cols > 1) {
                inst.dpDiv.addClass("ff-ui-datepicker-multi-" + cols).css("width", (width * cols) + "em")
            }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ff-ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ff-ui-datepicker-rtl");
            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
                inst.input.trigger("focus")
            }
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml;
                setTimeout(function() {
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find("select.ff-ui-datepicker-year:first").replaceWith(inst.yearshtml)
                    }
                    origyearshtml = inst.yearshtml = null
                }, 0)
            }
        },
        _shouldFocusInput: function(inst) {
            return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus")
        },
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(),
                dpHeight = inst.dpDiv.outerHeight(),
                inputWidth = inst.input ? inst.input.outerWidth() : 0,
                inputHeight = inst.input ? inst.input.outerHeight() : 0,
                viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
                viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
            offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight) : 0);
            return offset
        },
        _findPos: function(obj) {
            var position, inst = this._getInst(obj),
                isRTL = this._get(inst, "isRTL");
            while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? "previousSibling" : "nextSibling"]
            }
            position = $(obj).offset();
            return [position.left, position.top]
        },
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst;
            if (!inst || (input && inst !== $.data(input, "datepicker"))) {
                return
            }
            if (this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim");
                duration = this._get(inst, "duration");
                postProcess = function() {
                    $.datepicker._tidyDialog(inst)
                };
                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
                } else {
                    inst.dpDiv[(showAnim === "slideDown" ? "slideUp" : (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess)
                }
                if (!showAnim) {
                    postProcess()
                }
                this._datepickerShowing = false;
                onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst])
                }
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: "absolute",
                        left: "0",
                        top: "-100px"
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv)
                    }
                }
                this._inDialog = false
            }
        },
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).off(".ff-ui-datepicker-calendar")
        },
        _checkExternalClick: function(event) {
            if (!$.datepicker._curInst) {
                return
            }
            var $target = $(event.target),
                inst = $.datepicker._getInst($target[0]);
            if ((($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))) || ($target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst)) {
                $.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function(id, offset, period) {
            var target = $(id),
                inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return
            }
            this._adjustInstDate(inst, offset + (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), period);
            this._updateDatepicker(inst)
        },
        _gotoToday: function(id) {
            var date, target = $(id),
                inst = this._getInst(target[0]);
            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear()
            }
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _selectMonthYear: function(id, select, period) {
            var target = $(id),
                inst = this._getInst(target[0]);
            inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _selectDay: function(id, month, year, td) {
            var inst, target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return
            }
            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear))
        },
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "")
        },
        _selectDate: function(id, dateStr) {
            var onSelect, target = $(id),
                inst = this._getInst(target[0]);
            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input) {
                inst.input.val(dateStr)
            }
            this._updateAlternate(inst);
            onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst])
            } else {
                if (inst.input) {
                    inst.input.trigger("change")
                }
            }
            if (inst.inline) {
                this._updateDatepicker(inst)
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof(inst.input[0]) !== "object") {
                    inst.input.trigger("focus")
                }
                this._lastInput = null
            }
        },
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr, altField = this._get(inst, "altField");
            if (altField) {
                altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).val(dateStr)
            }
        },
        noWeekends: function(date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ""]
        },
        iso8601Week: function(date) {
            var time, checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1
        },
        parseDate: function(format, value, settings) {
            if (format == null || value == null) {
                throw "Invalid arguments"
            }
            value = (typeof value === "object" ? value.toString() : value + "");
            if (value === "") {
                return null
            }
            var iFormat, dim, extra, iValue = 0,
                shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                year = -1,
                month = -1,
                day = -1,
                doy = -1,
                literal = false,
                date, lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++
                    }
                    return matches
                },
                getNumber = function(match) {
                    var isDoubled = lookAhead(match),
                        size = (match === "@" ? 14 : (match === "!" ? 20 : (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
                        minSize = (match === "y" ? size : 1),
                        digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
                        num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw "Missing number at position " + iValue
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10)
                },
                getName = function(match, shortNames, longNames) {
                    var index = -1,
                        names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                            return [
                                [k, v]
                            ]
                        }).sort(function(a, b) {
                            return -(a[1].length - b[1].length)
                        });
                    $.each(names, function(i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false
                        }
                    });
                    if (index !== -1) {
                        return index + 1
                    } else {
                        throw "Unknown name at position " + iValue
                    }
                },
                checkLiteral = function() {
                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw "Unexpected literal at position " + iValue
                    }
                    iValue++
                };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        checkLiteral()
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                            day = getNumber("d");
                            break;
                        case "D":
                            getName("D", dayNamesShort, dayNames);
                            break;
                        case "o":
                            doy = getNumber("o");
                            break;
                        case "m":
                            month = getNumber("m");
                            break;
                        case "M":
                            month = getName("M", monthNamesShort, monthNames);
                            break;
                        case "y":
                            year = getNumber("y");
                            break;
                        case "@":
                            date = new Date(getNumber("@"));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "!":
                            date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                checkLiteral()
                            } else {
                                literal = true
                            }
                            break;
                        default:
                            checkLiteral()
                    }
                }
            }
            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw "Extra/unparsed characters found in date: " + extra
                }
            }
            if (year === -1) {
                year = new Date().getFullYear()
            } else {
                if (year < 100) {
                    year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100)
                }
            }
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break
                    }
                    month++;
                    day -= dim
                } while (true)
            }
            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw "Invalid date"
            }
            return date
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),
        formatDate: function(format, date, settings) {
            if (!date) {
                return ""
            }
            var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++
                    }
                    return matches
                },
                formatNumber = function(match, value, len) {
                    var num = "" + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = "0" + num
                        }
                    }
                    return num
                },
                formatName = function(match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value])
                },
                output = "",
                literal = false;
            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false
                        } else {
                            output += format.charAt(iFormat)
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case "d":
                                output += formatNumber("d", date.getDate(), 2);
                                break;
                            case "D":
                                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                break;
                            case "o":
                                output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case "m":
                                output += formatNumber("m", date.getMonth() + 1, 2);
                                break;
                            case "M":
                                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case "y":
                                output += (lookAhead("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100);
                                break;
                            case "@":
                                output += date.getTime();
                                break;
                            case "!":
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if (lookAhead("'")) {
                                    output += "'"
                                } else {
                                    literal = true
                                }
                                break;
                            default:
                                output += format.charAt(iFormat)
                        }
                    }
                }
            }
            return output
        },
        _possibleChars: function(format) {
            var iFormat, chars = "",
                literal = false,
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++
                    }
                    return matches
                };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        chars += format.charAt(iFormat)
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                        case "m":
                        case "y":
                        case "@":
                            chars += "0123456789";
                            break;
                        case "D":
                        case "M":
                            return null;
                        case "'":
                            if (lookAhead("'")) {
                                chars += "'"
                            } else {
                                literal = true
                            }
                            break;
                        default:
                            chars += format.charAt(iFormat)
                    }
                }
            }
            return chars
        },
        _get: function(inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name]
        },
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() === inst.lastVal) {
                return
            }
            var dateFormat = this._get(inst, "dateFormat"),
                dates = inst.lastVal = inst.input ? inst.input.val() : null,
                defaultDate = this._getDefaultDate(inst),
                date = defaultDate,
                settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate
            } catch (event) {
                dates = (noDefault ? "" : dates)
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst)
        },
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()))
        },
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date
                },
                offsetString = function(offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst))
                    } catch (e) {}
                    var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),
                        year = date.getFullYear(),
                        month = date.getMonth(),
                        day = date.getDate(),
                        pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        matches = pattern.exec(offset);
                    while (matches) {
                        switch (matches[2] || "d") {
                            case "d":
                            case "D":
                                day += parseInt(matches[1], 10);
                                break;
                            case "w":
                            case "W":
                                day += parseInt(matches[1], 10) * 7;
                                break;
                            case "m":
                            case "M":
                                month += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                            case "y":
                            case "Y":
                                year += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break
                        }
                        matches = pattern.exec(offset)
                    }
                    return new Date(year, month, day)
                },
                newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) : (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
            newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0)
            }
            return this._daylightSavingAdjust(newDate)
        },
        _daylightSavingAdjust: function(date) {
            if (!date) {
                return null
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date
        },
        _setDate: function(inst, date, noChange) {
            var clear = !date,
                origMonth = inst.selectedMonth,
                origYear = inst.selectedYear,
                newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst)
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst))
            }
        },
        _getDate: function(inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate
        },
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths"),
                id = "#" + inst.id.replace(/\\\\/g, "\\");
            inst.dpDiv.find("[data-handler]").map(function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate(id, -stepMonths, "M")
                    },
                    next: function() {
                        $.datepicker._adjustDate(id, +stepMonths, "M")
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker()
                    },
                    today: function() {
                        $.datepicker._gotoToday(id)
                    },
                    selectDay: function() {
                        $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return false
                    },
                    selectMonth: function() {
                        $.datepicker._selectMonthYear(id, this, "M");
                        return false
                    },
                    selectYear: function() {
                        $.datepicker._selectMonthYear(id, this, "Y");
                        return false
                    }
                };
                $(this).on(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")])
            })
        },
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(),
                today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),
                isRTL = this._get(inst, "isRTL"),
                showButtonPanel = this._get(inst, "showButtonPanel"),
                hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
                navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
                numMonths = this._getNumberOfMonths(inst),
                showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
                stepMonths = this._get(inst, "stepMonths"),
                isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
                currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
                minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                drawMonth = inst.drawMonth - showCurrentAtPos,
                drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            prevText = this._get(inst, "prevText");
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)));
            prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ff-ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : (hideIfNoPrevNext ? "" : "<a class='ff-ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));
            nextText = this._get(inst, "nextText");
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)));
            next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ff-ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : (hideIfNoPrevNext ? "" : "<a class='ff-ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));
            currentText = this._get(inst, "currentText");
            gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
            controls = (!inst.inline ? "<button type='button' class='ff-ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>" : "");
            buttonPanel = (showButtonPanel) ? "<div class='ff-ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ff-ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
            firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);
            showWeek = this._get(inst, "showWeek");
            dayNames = this._get(inst, "dayNames");
            dayNamesMin = this._get(inst, "dayNamesMin");
            monthNames = this._get(inst, "monthNames");
            monthNamesShort = this._get(inst, "monthNamesShort");
            beforeShowDay = this._get(inst, "beforeShowDay");
            showOtherMonths = this._get(inst, "showOtherMonths");
            selectOtherMonths = this._get(inst, "selectOtherMonths");
            defaultDate = this._getDefaultDate(inst);
            html = "";
            for (row = 0; row < numMonths[0]; row++) {
                group = "";
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if (isMultiMonth) {
                        calender += "<div class='ff-ui-datepicker-group";
                        if (numMonths[1] > 1) {
                            switch (col) {
                                case 0:
                                    calender += " ff-ui-datepicker-group-first";
                                    cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                    break;
                                case numMonths[1] - 1:
                                    calender += " ff-ui-datepicker-group-last";
                                    cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                    break;
                                default:
                                    calender += " ff-ui-datepicker-group-middle";
                                    cornerClass = "";
                                    break
                            }
                        }
                        calender += "'>"
                    }
                    calender += "<div class='ff-ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") + (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + "</div><table class='ff-ui-datepicker-calendar'><thead><tr>";
                    thead = (showWeek ? "<th class='ff-ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
                    for (dow = 0; dow < 7; dow++) {
                        day = (dow + firstDay) % 7;
                        thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ff-ui-datepicker-week-end'" : "") + "><span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>"
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth)
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7);
                    numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows);
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) {
                        calender += "<tr>";
                        tbody = (!showWeek ? "" : "<td class='ff-ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>");
                        for (dow = 0; dow < 7; dow++) {
                            daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                            otherMonth = (printDate.getMonth() !== drawMonth);
                            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ff-ui-datepicker-week-end" : "") + (otherMonth ? " ff-ui-datepicker-other-month" : "") + ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() === today.getTime() ? " ff-ui-datepicker-today" : "")) + "'" + ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (otherMonth && !showOtherMonths ? "&#xa0;" : (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + "' href='#'>" + printDate.getDate() + "</a>")) + "</td>";
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate)
                        }
                        calender += tbody + "</tr>"
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" + ((numMonths[0] > 0 && col === numMonths[1] - 1) ? "<div class='ff-ui-datepicker-row-break'></div>" : "") : "");
                    group += calender
                }
                html += group
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html
        },
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"),
                changeYear = this._get(inst, "changeYear"),
                showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
                html = "<div class='ff-ui-datepicker-title'>",
                monthHtml = "";
            if (secondary || !changeMonth) {
                monthHtml += "<span class='ff-ui-datepicker-month'>" + monthNames[drawMonth] + "</span>"
            } else {
                inMinYear = (minDate && minDate.getFullYear() === drawYear);
                inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
                monthHtml += "<select class='ff-ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                for (month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>"
                    }
                }
                monthHtml += "</select>"
            }
            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "")
            }
            if (!inst.yearshtml) {
                inst.yearshtml = "";
                if (secondary || !changeYear) {
                    html += "<span class='ff-ui-datepicker-year'>" + drawYear + "</span>"
                } else {
                    years = this._get(inst, "yearRange").split(":");
                    thisYear = new Date().getFullYear();
                    determineYear = function(value) {
                        var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year)
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ""));
                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                    inst.yearshtml += "<select class='ff-ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                    for (; year <= endYear; year++) {
                        inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>"
                    }
                    inst.yearshtml += "</select>";
                    html += inst.yearshtml;
                    inst.yearshtml = null
                }
            }
            html += this._get(inst, "yearSuffix");
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml
            }
            html += "</div>";
            return html
        },
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.selectedYear + (period === "Y" ? offset : 0),
                month = inst.selectedMonth + (period === "M" ? offset : 0),
                day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
                date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === "M" || period === "Y") {
                this._notifyChange(inst)
            }
        },
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                newDate = (minDate && date < minDate ? minDate : date);
            return (maxDate && newDate > maxDate ? maxDate : newDate)
        },
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst])
            }
        },
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths))
        },
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null)
        },
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate()
        },
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay()
        },
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst),
                date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()))
            }
            return this._isInRange(inst, date)
        },
        _isInRange: function(inst, date) {
            var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                minYear = null,
                maxYear = null,
                years = this._get(inst, "yearRange");
            if (years) {
                yearSplit = years.split(":");
                currentYear = new Date().getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                if (yearSplit[0].match(/[+\-].*/)) {
                    minYear += currentYear
                }
                if (yearSplit[1].match(/[+\-].*/)) {
                    maxYear += currentYear
                }
            }
            return ((!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear))
        },
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            }
        },
        _formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear
            }
            var date = (day ? (typeof day === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day))) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst))
        }
    });

    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ff-ui-datepicker-prev, .ff-ui-datepicker-next, .ff-ui-datepicker-calendar td a";
        return dpDiv.on("mouseout", selector, function() {
            $(this).removeClass("ui-state-hover");
            if (this.className.indexOf("ff-ui-datepicker-prev") !== -1) {
                $(this).removeClass("ff-ui-datepicker-prev-hover")
            }
            if (this.className.indexOf("ff-ui-datepicker-next") !== -1) {
                $(this).removeClass("ff-ui-datepicker-next-hover")
            }
        }).on("mouseover", selector, datepicker_handleMouseover)
    }

    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ff-ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            $(this).addClass("ui-state-hover");
            if (this.className.indexOf("ff-ui-datepicker-prev") !== -1) {
                $(this).addClass("ff-ui-datepicker-prev-hover")
            }
            if (this.className.indexOf("ff-ui-datepicker-next") !== -1) {
                $(this).addClass("ff-ui-datepicker-next-hover")
            }
        }
    }

    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name]
            }
        }
        return target
    }
    $.fn.datepicker = function(options) {
        if (!this.length) {
            return this
        }
        if (!$.datepicker.initialized) {
            $(document).on("mousedown", $.datepicker._checkExternalClick);
            $.datepicker.initialized = true
        }
        if ($("#" + $.datepicker._mainDivId).length === 0) {
            $("body").append($.datepicker.dpDiv)
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        return this.each(function() {
            typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options)
        })
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.12.1";
    var widgetsDatepicker = $.datepicker;
    var ie = $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    /*!
     * jQuery UI Mouse 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var mouseHandled = false;
    $(document).on("mouseup", function() {
        mouseHandled = false
    });
    var widgetsMouse = $.widget("ui.mouse", {
        version: "1.12.1",
        options: {
            cancel: "input, textarea, button, select, option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
            this.element.on("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event)
            }).on("click." + this.widgetName, function(event) {
                if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, that.widgetName + ".preventClickEvent");
                    event.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function() {
            this.element.off("." + this.widgetName);
            if (this._mouseMoveDelegate) {
                this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate)
            }
        },
        _mouseDown: function(event) {
            if (mouseHandled) {
                return
            }
            this._mouseMoved = false;
            (this._mouseStarted && this._mouseUp(event));
            this._mouseDownEvent = event;
            var that = this,
                btnIsLeft = (event.which === 1),
                elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = true
                }, this.options.delay)
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true
                }
            }
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                $.removeData(event.target, this.widgetName + ".preventClickEvent")
            }
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event)
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event)
            };
            this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true
        },
        _mouseMove: function(event) {
            if (this._mouseMoved) {
                if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                    return this._mouseUp(event)
                } else {
                    if (!event.which) {
                        if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {
                            this.ignoreMissingWhich = true
                        } else {
                            if (!this.ignoreMissingWhich) {
                                return this._mouseUp(event)
                            }
                        }
                    }
                }
            }
            if (event.which || event.button) {
                this._mouseMoved = true
            }
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault()
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event))
            }
            return !this._mouseStarted
        },
        _mouseUp: function(event) {
            this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target === this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + ".preventClickEvent", true)
                }
                this._mouseStop(event)
            }
            if (this._mouseDelayTimer) {
                clearTimeout(this._mouseDelayTimer);
                delete this._mouseDelayTimer
            }
            this.ignoreMissingWhich = false;
            mouseHandled = false;
            event.preventDefault()
        },
        _mouseDistanceMet: function(event) {
            return (Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance)
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return true
        }
    });
    var plugin = $.ui.plugin = {
        add: function(module, option, set) {
            var i, proto = $.ui[module].prototype;
            for (i in set) {
                proto.plugins[i] = proto.plugins[i] || [];
                proto.plugins[i].push([option, set[i]])
            }
        },
        call: function(instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name];
            if (!set) {
                return
            }
            if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
                return
            }
            for (i = 0; i < set.length; i++) {
                if (instance.options[set[i][0]]) {
                    set[i][1].apply(instance.element, args)
                }
            }
        }
    };
    var safeBlur = $.ui.safeBlur = function(element) {
        if (element && element.nodeName.toLowerCase() !== "body") {
            $(element).trigger("blur")
        }
    };
    /*!
     * jQuery UI Draggable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.draggable", $.ui.mouse, {
        version: "1.12.1",
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false,
            drag: null,
            start: null,
            stop: null
        },
        _create: function() {
            if (this.options.helper === "original") {
                this._setPositionRelative()
            }
            if (this.options.addClasses) {
                this._addClass("ui-draggable")
            }
            this._setHandleClassName();
            this._mouseInit()
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "handle") {
                this._removeHandleClassName();
                this._setHandleClassName()
            }
        },
        _destroy: function() {
            if ((this.helper || this.element).is(".ui-draggable-dragging")) {
                this.destroyOnClear = true;
                return
            }
            this._removeHandleClassName();
            this._mouseDestroy()
        },
        _mouseCapture: function(event) {
            var o = this.options;
            if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
                return false
            }
            this.handle = this._getHandle(event);
            if (!this.handle) {
                return false
            }
            this._blurActiveElement(event);
            this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);
            return true
        },
        _blockFrames: function(selector) {
            this.iframeBlocks = this.document.find(selector).map(function() {
                var iframe = $(this);
                return $("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0]
            })
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks
            }
        },
        _blurActiveElement: function(event) {
            var activeElement = $.ui.safeActiveElement(this.document[0]),
                target = $(event.target);
            if (target.closest(activeElement).length) {
                return
            }
            $.ui.safeBlur(activeElement)
        },
        _mouseStart: function(event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this._addClass(this.helper, "ui-draggable-dragging");
            this._cacheHelperProportions();
            if ($.ui.ddmanager) {
                $.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent(true);
            this.offsetParent = this.helper.offsetParent();
            this.hasFixedAncestor = this.helper.parents().filter(function() {
                return $(this).css("position") === "fixed"
            }).length > 0;
            this.positionAbs = this.element.offset();
            this._refreshOffsets(event);
            this.originalPosition = this.position = this._generatePosition(event, false);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
            this._setContainment();
            if (this._trigger("start", event) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event)
            }
            this._mouseDrag(event, true);
            if ($.ui.ddmanager) {
                $.ui.ddmanager.dragStart(this, event)
            }
            return true
        },
        _refreshOffsets: function(event) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: false,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            };
            this.offset.click = {
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            }
        },
        _mouseDrag: function(event, noPropagation) {
            if (this.hasFixedAncestor) {
                this.offset.parent = this._getParentOffset()
            }
            this.position = this._generatePosition(event, true);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!noPropagation) {
                var ui = this._uiHash();
                if (this._trigger("drag", event, ui) === false) {
                    this._mouseUp(new $.Event("mouseup", event));
                    return false
                }
                this.position = ui.position
            }
            this.helper[0].style.left = this.position.left + "px";
            this.helper[0].style.top = this.position.top + "px";
            if ($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event)
            }
            return false
        },
        _mouseStop: function(event) {
            var that = this,
                dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                dropped = $.ui.ddmanager.drop(this, event)
            }
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false
            }
            if ((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                    if (that._trigger("stop", event) !== false) {
                        that._clear()
                    }
                })
            } else {
                if (this._trigger("stop", event) !== false) {
                    this._clear()
                }
            }
            return false
        },
        _mouseUp: function(event) {
            this._unblockFrames();
            if ($.ui.ddmanager) {
                $.ui.ddmanager.dragStop(this, event)
            }
            if (this.handleElement.is(event.target)) {
                this.element.trigger("focus")
            }
            return $.ui.mouse.prototype._mouseUp.call(this, event)
        },
        cancel: function() {
            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp(new $.Event("mouseup", {
                    target: this.element[0]
                }))
            } else {
                this._clear()
            }
            return this
        },
        _getHandle: function(event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true
        },
        _setHandleClassName: function() {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
            this._addClass(this.handleElement, "ui-draggable-handle")
        },
        _removeHandleClassName: function() {
            this._removeClass(this.handleElement, "ui-draggable-handle")
        },
        _createHelper: function(event) {
            var o = this.options,
                helperIsFunction = $.isFunction(o.helper),
                helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);
            if (!helper.parents("body").length) {
                helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo))
            }
            if (helperIsFunction && helper[0] === this.element[0]) {
                this._setPositionRelative()
            }
            if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
                helper.css("position", "absolute")
            }
            return helper
        },
        _setPositionRelative: function() {
            if (!(/^(?:r|a|f)/).test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            }
        },
        _adjustOffsetFromHelper: function(obj) {
            if (typeof obj === "string") {
                obj = obj.split(" ")
            }
            if ($.isArray(obj)) {
                obj = {
                    left: +obj[0],
                    top: +obj[1] || 0
                }
            }
            if ("left" in obj) {
                this.offset.click.left = obj.left + this.margins.left
            }
            if ("right" in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left
            }
            if ("top" in obj) {
                this.offset.click.top = obj.top + this.margins.top
            }
            if ("bottom" in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top
            }
        },
        _isRootNode: function(element) {
            return (/(html|body)/i).test(element.tagName) || element === this.document[0]
        },
        _getParentOffset: function() {
            var po = this.offsetParent.offset(),
                document = this.document[0];
            if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop()
            }
            if (this._isRootNode(this.offsetParent[0])) {
                po = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition !== "relative") {
                return {
                    top: 0,
                    left: 0
                }
            }
            var p = this.element.position(),
                scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
                left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
            }
        },
        _cacheMargins: function() {
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0),
                right: (parseInt(this.element.css("marginRight"), 10) || 0),
                bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var isUserScrollable, c, ce, o = this.options,
                document = this.document[0];
            this.relativeContainer = null;
            if (!o.containment) {
                this.containment = null;
                return
            }
            if (o.containment === "window") {
                this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                return
            }
            if (o.containment === "document") {
                this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                return
            }
            if (o.containment.constructor === Array) {
                this.containment = o.containment;
                return
            }
            if (o.containment === "parent") {
                o.containment = this.helper[0].parentNode
            }
            c = $(o.containment);
            ce = c[0];
            if (!ce) {
                return
            }
            isUserScrollable = /(scroll|auto)/.test(c.css("overflow"));
            this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
            this.relativeContainer = c
        },
        _convertPositionTo: function(d, pos) {
            if (!pos) {
                pos = this.position
            }
            var mod = d === "absolute" ? 1 : -1,
                scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: (pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ((this.cssPosition === "fixed" ? -this.offset.scroll.top : (scrollIsRootNode ? 0 : this.offset.scroll.top)) * mod)),
                left: (pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ((this.cssPosition === "fixed" ? -this.offset.scroll.left : (scrollIsRootNode ? 0 : this.offset.scroll.left)) * mod))
            }
        },
        _generatePosition: function(event, constrainPosition) {
            var containment, co, top, left, o = this.options,
                scrollIsRootNode = this._isRootNode(this.scrollParent[0]),
                pageX = event.pageX,
                pageY = event.pageY;
            if (!scrollIsRootNode || !this.offset.scroll) {
                this.offset.scroll = {
                    top: this.scrollParent.scrollTop(),
                    left: this.scrollParent.scrollLeft()
                }
            }
            if (constrainPosition) {
                if (this.containment) {
                    if (this.relativeContainer) {
                        co = this.relativeContainer.offset();
                        containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top]
                    } else {
                        containment = this.containment
                    }
                    if (event.pageX - this.offset.click.left < containment[0]) {
                        pageX = containment[0] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top < containment[1]) {
                        pageY = containment[1] + this.offset.click.top
                    }
                    if (event.pageX - this.offset.click.left > containment[2]) {
                        pageX = containment[2] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top > containment[3]) {
                        pageY = containment[3] + this.offset.click.top
                    }
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left
                }
                if (o.axis === "y") {
                    pageX = this.originalPageX
                }
                if (o.axis === "x") {
                    pageY = this.originalPageY
                }
            }
            return {
                top: (pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === "fixed" ? -this.offset.scroll.top : (scrollIsRootNode ? 0 : this.offset.scroll.top))),
                left: (pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === "fixed" ? -this.offset.scroll.left : (scrollIsRootNode ? 0 : this.offset.scroll.left)))
            }
        },
        _clear: function() {
            this._removeClass(this.helper, "ui-draggable-dragging");
            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove()
            }
            this.helper = null;
            this.cancelHelperRemoval = false;
            if (this.destroyOnClear) {
                this.destroy()
            }
        },
        _trigger: function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [event, ui, this], true);
            if (/^(drag|start|stop)/.test(type)) {
                this.positionAbs = this._convertPositionTo("absolute");
                ui.offset = this.positionAbs
            }
            return $.Widget.prototype._trigger.call(this, type, event, ui)
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    $.ui.plugin.add("draggable", "connectToSortable", {
        start: function(event, ui, draggable) {
            var uiSortable = $.extend({}, ui, {
                item: draggable.element
            });
            draggable.sortables = [];
            $(draggable.options.connectToSortable).each(function() {
                var sortable = $(this).sortable("instance");
                if (sortable && !sortable.options.disabled) {
                    draggable.sortables.push(sortable);
                    sortable.refreshPositions();
                    sortable._trigger("activate", event, uiSortable)
                }
            })
        },
        stop: function(event, ui, draggable) {
            var uiSortable = $.extend({}, ui, {
                item: draggable.element
            });
            draggable.cancelHelperRemoval = false;
            $.each(draggable.sortables, function() {
                var sortable = this;
                if (sortable.isOver) {
                    sortable.isOver = 0;
                    draggable.cancelHelperRemoval = true;
                    sortable.cancelHelperRemoval = false;
                    sortable._storedCSS = {
                        position: sortable.placeholder.css("position"),
                        top: sortable.placeholder.css("top"),
                        left: sortable.placeholder.css("left")
                    };
                    sortable._mouseStop(event);
                    sortable.options.helper = sortable.options._helper
                } else {
                    sortable.cancelHelperRemoval = true;
                    sortable._trigger("deactivate", event, uiSortable)
                }
            })
        },
        drag: function(event, ui, draggable) {
            $.each(draggable.sortables, function() {
                var innermostIntersecting = false,
                    sortable = this;
                sortable.positionAbs = draggable.positionAbs;
                sortable.helperProportions = draggable.helperProportions;
                sortable.offset.click = draggable.offset.click;
                if (sortable._intersectsWith(sortable.containerCache)) {
                    innermostIntersecting = true;
                    $.each(draggable.sortables, function() {
                        this.positionAbs = draggable.positionAbs;
                        this.helperProportions = draggable.helperProportions;
                        this.offset.click = draggable.offset.click;
                        if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {
                            innermostIntersecting = false
                        }
                        return innermostIntersecting
                    })
                }
                if (innermostIntersecting) {
                    if (!sortable.isOver) {
                        sortable.isOver = 1;
                        draggable._parent = ui.helper.parent();
                        sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", true);
                        sortable.options._helper = sortable.options.helper;
                        sortable.options.helper = function() {
                            return ui.helper[0]
                        };
                        event.target = sortable.currentItem[0];
                        sortable._mouseCapture(event, true);
                        sortable._mouseStart(event, true, true);
                        sortable.offset.click.top = draggable.offset.click.top;
                        sortable.offset.click.left = draggable.offset.click.left;
                        sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
                        sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;
                        draggable._trigger("toSortable", event);
                        draggable.dropped = sortable.element;
                        $.each(draggable.sortables, function() {
                            this.refreshPositions()
                        });
                        draggable.currentItem = draggable.element;
                        sortable.fromOutside = draggable
                    }
                    if (sortable.currentItem) {
                        sortable._mouseDrag(event);
                        ui.position = sortable.position
                    }
                } else {
                    if (sortable.isOver) {
                        sortable.isOver = 0;
                        sortable.cancelHelperRemoval = true;
                        sortable.options._revert = sortable.options.revert;
                        sortable.options.revert = false;
                        sortable._trigger("out", event, sortable._uiHash(sortable));
                        sortable._mouseStop(event, true);
                        sortable.options.revert = sortable.options._revert;
                        sortable.options.helper = sortable.options._helper;
                        if (sortable.placeholder) {
                            sortable.placeholder.remove()
                        }
                        ui.helper.appendTo(draggable._parent);
                        draggable._refreshOffsets(event);
                        ui.position = draggable._generatePosition(event, true);
                        draggable._trigger("fromSortable", event);
                        draggable.dropped = false;
                        $.each(draggable.sortables, function() {
                            this.refreshPositions()
                        })
                    }
                }
            })
        }
    });
    $.ui.plugin.add("draggable", "cursor", {
        start: function(event, ui, instance) {
            var t = $("body"),
                o = instance.options;
            if (t.css("cursor")) {
                o._cursor = t.css("cursor")
            }
            t.css("cursor", o.cursor)
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            if (o._cursor) {
                $("body").css("cursor", o._cursor)
            }
        }
    });
    $.ui.plugin.add("draggable", "opacity", {
        start: function(event, ui, instance) {
            var t = $(ui.helper),
                o = instance.options;
            if (t.css("opacity")) {
                o._opacity = t.css("opacity")
            }
            t.css("opacity", o.opacity)
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            if (o._opacity) {
                $(ui.helper).css("opacity", o._opacity)
            }
        }
    });
    $.ui.plugin.add("draggable", "scroll", {
        start: function(event, ui, i) {
            if (!i.scrollParentNotHidden) {
                i.scrollParentNotHidden = i.helper.scrollParent(false)
            }
            if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== "HTML") {
                i.overflowOffset = i.scrollParentNotHidden.offset()
            }
        },
        drag: function(event, ui, i) {
            var o = i.options,
                scrolled = false,
                scrollParent = i.scrollParentNotHidden[0],
                document = i.document[0];
            if (scrollParent !== document && scrollParent.tagName !== "HTML") {
                if (!o.axis || o.axis !== "x") {
                    if ((i.overflowOffset.top + scrollParent.offsetHeight) - event.pageY < o.scrollSensitivity) {
                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed
                    } else {
                        if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
                            scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed
                        }
                    }
                }
                if (!o.axis || o.axis !== "y") {
                    if ((i.overflowOffset.left + scrollParent.offsetWidth) - event.pageX < o.scrollSensitivity) {
                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed
                    } else {
                        if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
                            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed
                        }
                    }
                }
            } else {
                if (!o.axis || o.axis !== "x") {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed)
                    } else {
                        if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed)
                        }
                    }
                }
                if (!o.axis || o.axis !== "y") {
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed)
                    } else {
                        if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed)
                        }
                    }
                }
            }
            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(i, event)
            }
        }
    });
    $.ui.plugin.add("draggable", "snap", {
        start: function(event, ui, i) {
            var o = i.options;
            i.snapElements = [];
            $(o.snap.constructor !== String ? (o.snap.items || ":data(ui-draggable)") : o.snap).each(function() {
                var $t = $(this),
                    $o = $t.offset();
                if (this !== i.element[0]) {
                    i.snapElements.push({
                        item: this,
                        width: $t.outerWidth(),
                        height: $t.outerHeight(),
                        top: $o.top,
                        left: $o.left
                    })
                }
            })
        },
        drag: function(event, ui, inst) {
            var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options,
                d = o.snapTolerance,
                x1 = ui.offset.left,
                x2 = x1 + inst.helperProportions.width,
                y1 = ui.offset.top,
                y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left - inst.margins.left;
                r = l + inst.snapElements[i].width;
                t = inst.snapElements[i].top - inst.margins.top;
                b = t + inst.snapElements[i].height;
                if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    if (inst.snapElements[i].snapping) {
                        (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                            snapItem: inst.snapElements[i].item
                        })))
                    }
                    inst.snapElements[i].snapping = false;
                    continue
                }
                if (o.snapMode !== "inner") {
                    ts = Math.abs(t - y2) <= d;
                    bs = Math.abs(b - y1) <= d;
                    ls = Math.abs(l - x2) <= d;
                    rs = Math.abs(r - x1) <= d;
                    if (ts) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: t - inst.helperProportions.height,
                            left: 0
                        }).top
                    }
                    if (bs) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: b,
                            left: 0
                        }).top
                    }
                    if (ls) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: l - inst.helperProportions.width
                        }).left
                    }
                    if (rs) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: r
                        }).left
                    }
                }
                first = (ts || bs || ls || rs);
                if (o.snapMode !== "outer") {
                    ts = Math.abs(t - y1) <= d;
                    bs = Math.abs(b - y2) <= d;
                    ls = Math.abs(l - x1) <= d;
                    rs = Math.abs(r - x2) <= d;
                    if (ts) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: t,
                            left: 0
                        }).top
                    }
                    if (bs) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: b - inst.helperProportions.height,
                            left: 0
                        }).top
                    }
                    if (ls) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: l
                        }).left
                    }
                    if (rs) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: r - inst.helperProportions.width
                        }).left
                    }
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
                    (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                        snapItem: inst.snapElements[i].item
                    })))
                }
                inst.snapElements[i].snapping = (ts || bs || ls || rs || first)
            }
        }
    });
    $.ui.plugin.add("draggable", "stack", {
        start: function(event, ui, instance) {
            var min, o = instance.options,
                group = $.makeArray($(o.stack)).sort(function(a, b) {
                    return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0)
                });
            if (!group.length) {
                return
            }
            min = parseInt($(group[0]).css("zIndex"), 10) || 0;
            $(group).each(function(i) {
                $(this).css("zIndex", min + i)
            });
            this.css("zIndex", (min + group.length))
        }
    });
    $.ui.plugin.add("draggable", "zIndex", {
        start: function(event, ui, instance) {
            var t = $(ui.helper),
                o = instance.options;
            if (t.css("zIndex")) {
                o._zIndex = t.css("zIndex")
            }
            t.css("zIndex", o.zIndex)
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            if (o._zIndex) {
                $(ui.helper).css("zIndex", o._zIndex)
            }
        }
    });
    var widgetsDraggable = $.ui.draggable;
    /*!
     * jQuery UI Resizable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.resizable", $.ui.mouse, {
        version: "1.12.1",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: false,
            animate: false,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: false,
            autoHide: false,
            classes: {
                "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
            },
            containment: false,
            ghost: false,
            grid: false,
            handles: "e,s,se",
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _num: function(value) {
            return parseFloat(value) || 0
        },
        _isNumber: function(value) {
            return !isNaN(parseFloat(value))
        },
        _hasScroll: function(el, a) {
            if ($(el).css("overflow") === "hidden") {
                return false
            }
            var scroll = (a && a === "left") ? "scrollLeft" : "scrollTop",
                has = false;
            if (el[scroll] > 0) {
                return true
            }
            el[scroll] = 1;
            has = (el[scroll] > 0);
            el[scroll] = 0;
            return has
        },
        _create: function() {
            var margins, o = this.options,
                that = this;
            this._addClass("ui-resizable");
            $.extend(this, {
                _aspectRatio: !!(o.aspectRatio),
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {
                this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                    position: this.element.css("position"),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css("top"),
                    left: this.element.css("left")
                }));
                this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance"));
                this.elementIsWrapper = true;
                margins = {
                    marginTop: this.originalElement.css("marginTop"),
                    marginRight: this.originalElement.css("marginRight"),
                    marginBottom: this.originalElement.css("marginBottom"),
                    marginLeft: this.originalElement.css("marginLeft")
                };
                this.element.css(margins);
                this.originalElement.css("margin", 0);
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: "static",
                    zoom: 1,
                    display: "block"
                }));
                this.originalElement.css(margins);
                this._proportionallyResize()
            }
            this._setupHandles();
            if (o.autoHide) {
                $(this.element).on("mouseenter", function() {
                    if (o.disabled) {
                        return
                    }
                    that._removeClass("ui-resizable-autohide");
                    that._handles.show()
                }).on("mouseleave", function() {
                    if (o.disabled) {
                        return
                    }
                    if (!that.resizing) {
                        that._addClass("ui-resizable-autohide");
                        that._handles.hide()
                    }
                })
            }
            this._mouseInit()
        },
        _destroy: function() {
            this._mouseDestroy();
            var wrapper, _destroy = function(exp) {
                $(exp).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()
            };
            if (this.elementIsWrapper) {
                _destroy(this.element);
                wrapper = this.element;
                this.originalElement.css({
                    position: wrapper.css("position"),
                    width: wrapper.outerWidth(),
                    height: wrapper.outerHeight(),
                    top: wrapper.css("top"),
                    left: wrapper.css("left")
                }).insertAfter(wrapper);
                wrapper.remove()
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            _destroy(this.originalElement);
            return this
        },
        _setOption: function(key, value) {
            this._super(key, value);
            switch (key) {
                case "handles":
                    this._removeHandles();
                    this._setupHandles();
                    break;
                default:
                    break
            }
        },
        _setupHandles: function() {
            var o = this.options,
                handle, i, n, hname, axis, that = this;
            this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            });
            this._handles = $();
            if (this.handles.constructor === String) {
                if (this.handles === "all") {
                    this.handles = "n,e,s,w,se,sw,ne,nw"
                }
                n = this.handles.split(",");
                this.handles = {};
                for (i = 0; i < n.length; i++) {
                    handle = $.trim(n[i]);
                    hname = "ui-resizable-" + handle;
                    axis = $("<div>");
                    this._addClass(axis, "ui-resizable-handle " + hname);
                    axis.css({
                        zIndex: o.zIndex
                    });
                    this.handles[handle] = ".ui-resizable-" + handle;
                    this.element.append(axis)
                }
            }
            this._renderAxis = function(target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) {
                    if (this.handles[i].constructor === String) {
                        this.handles[i] = this.element.children(this.handles[i]).first().show()
                    } else {
                        if (this.handles[i].jquery || this.handles[i].nodeType) {
                            this.handles[i] = $(this.handles[i]);
                            this._on(this.handles[i], {
                                mousedown: that._mouseDown
                            })
                        }
                    }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
                        axis = $(this.handles[i], this.element);
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                        padPos = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join("");
                        target.css(padPos, padWrapper);
                        this._proportionallyResize()
                    }
                    this._handles = this._handles.add(this.handles[i])
                }
            };
            this._renderAxis(this.element);
            this._handles = this._handles.add(this.element.find(".ui-resizable-handle"));
            this._handles.disableSelection();
            this._handles.on("mouseover", function() {
                if (!that.resizing) {
                    if (this.className) {
                        axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)
                    }
                    that.axis = axis && axis[1] ? axis[1] : "se"
                }
            });
            if (o.autoHide) {
                this._handles.hide();
                this._addClass("ui-resizable-autohide")
            }
        },
        _removeHandles: function() {
            this._handles.remove()
        },
        _mouseCapture: function(event) {
            var i, handle, capture = false;
            for (i in this.handles) {
                handle = $(this.handles[i])[0];
                if (handle === event.target || $.contains(handle, event.target)) {
                    capture = true
                }
            }
            return !this.options.disabled && capture
        },
        _mouseStart: function(event) {
            var curleft, curtop, cursor, o = this.options,
                el = this.element;
            this.resizing = true;
            this._renderProxy();
            curleft = this._num(this.helper.css("left"));
            curtop = this._num(this.helper.css("top"));
            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0
            }
            this.offset = this.helper.offset();
            this.position = {
                left: curleft,
                top: curtop
            };
            this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.originalSize = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.sizeDiff = {
                width: el.outerWidth() - el.width(),
                height: el.outerHeight() - el.height()
            };
            this.originalPosition = {
                left: curleft,
                top: curtop
            };
            this.originalMousePosition = {
                left: event.pageX,
                top: event.pageY
            };
            this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
            cursor = $(".ui-resizable-" + this.axis).css("cursor");
            $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);
            this._addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return true
        },
        _mouseDrag: function(event) {
            var data, props, smp = this.originalMousePosition,
                a = this.axis,
                dx = (event.pageX - smp.left) || 0,
                dy = (event.pageY - smp.top) || 0,
                trigger = this._change[a];
            this._updatePrevProperties();
            if (!trigger) {
                return false
            }
            data = trigger.apply(this, [event, dx, dy]);
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey) {
                data = this._updateRatio(data, event)
            }
            data = this._respectSize(data, event);
            this._updateCache(data);
            this._propagate("resize", event);
            props = this._applyChanges();
            if (!this._helper && this._proportionallyResizeElements.length) {
                this._proportionallyResize()
            }
            if (!$.isEmptyObject(props)) {
                this._updatePrevProperties();
                this._trigger("resize", event, this.ui());
                this._applyChanges()
            }
            return false
        },
        _mouseStop: function(event) {
            this.resizing = false;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options,
                that = this;
            if (this._helper) {
                pr = this._proportionallyResizeElements;
                ista = pr.length && (/textarea/i).test(pr[0].nodeName);
                soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                soffsetw = ista ? 0 : that.sizeDiff.width;
                s = {
                    width: (that.helper.width() - soffsetw),
                    height: (that.helper.height() - soffseth)
                };
                left = (parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left)) || null;
                top = (parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top)) || null;
                if (!o.animate) {
                    this.element.css($.extend(s, {
                        top: top,
                        left: left
                    }))
                }
                that.helper.height(that.size.height);
                that.helper.width(that.size.width);
                if (this._helper && !o.animate) {
                    this._proportionallyResize()
                }
            }
            $("body").css("cursor", "auto");
            this._removeClass("ui-resizable-resizing");
            this._propagate("stop", event);
            if (this._helper) {
                this.helper.remove()
            }
            return false
        },
        _updatePrevProperties: function() {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            };
            this.prevSize = {
                width: this.size.width,
                height: this.size.height
            }
        },
        _applyChanges: function() {
            var props = {};
            if (this.position.top !== this.prevPosition.top) {
                props.top = this.position.top + "px"
            }
            if (this.position.left !== this.prevPosition.left) {
                props.left = this.position.left + "px"
            }
            if (this.size.width !== this.prevSize.width) {
                props.width = this.size.width + "px"
            }
            if (this.size.height !== this.prevSize.height) {
                props.height = this.size.height + "px"
            }
            this.helper.css(props);
            return props
        },
        _updateVirtualBoundaries: function(forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
            };
            if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;
                if (pMinWidth > b.minWidth) {
                    b.minWidth = pMinWidth
                }
                if (pMinHeight > b.minHeight) {
                    b.minHeight = pMinHeight
                }
                if (pMaxWidth < b.maxWidth) {
                    b.maxWidth = pMaxWidth
                }
                if (pMaxHeight < b.maxHeight) {
                    b.maxHeight = pMaxHeight
                }
            }
            this._vBoundaries = b
        },
        _updateCache: function(data) {
            this.offset = this.helper.offset();
            if (this._isNumber(data.left)) {
                this.position.left = data.left
            }
            if (this._isNumber(data.top)) {
                this.position.top = data.top
            }
            if (this._isNumber(data.height)) {
                this.size.height = data.height
            }
            if (this._isNumber(data.width)) {
                this.size.width = data.width
            }
        },
        _updateRatio: function(data) {
            var cpos = this.position,
                csize = this.size,
                a = this.axis;
            if (this._isNumber(data.height)) {
                data.width = (data.height * this.aspectRatio)
            } else {
                if (this._isNumber(data.width)) {
                    data.height = (data.width / this.aspectRatio)
                }
            }
            if (a === "sw") {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null
            }
            if (a === "nw") {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width)
            }
            return data
        },
        _respectSize: function(data) {
            var o = this._vBoundaries,
                a = this.axis,
                ismaxw = this._isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),
                ismaxh = this._isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
                isminw = this._isNumber(data.width) && o.minWidth && (o.minWidth > data.width),
                isminh = this._isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
                dw = this.originalPosition.left + this.originalSize.width,
                dh = this.originalPosition.top + this.originalSize.height,
                cw = /sw|nw|w/.test(a),
                ch = /nw|ne|n/.test(a);
            if (isminw) {
                data.width = o.minWidth
            }
            if (isminh) {
                data.height = o.minHeight
            }
            if (ismaxw) {
                data.width = o.maxWidth
            }
            if (ismaxh) {
                data.height = o.maxHeight
            }
            if (isminw && cw) {
                data.left = dw - o.minWidth
            }
            if (ismaxw && cw) {
                data.left = dw - o.maxWidth
            }
            if (isminh && ch) {
                data.top = dh - o.minHeight
            }
            if (ismaxh && ch) {
                data.top = dh - o.maxHeight
            }
            if (!data.width && !data.height && !data.left && data.top) {
                data.top = null
            } else {
                if (!data.width && !data.height && !data.top && data.left) {
                    data.left = null
                }
            }
            return data
        },
        _getPaddingPlusBorderDimensions: function(element) {
            var i = 0,
                widths = [],
                borders = [element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth")],
                paddings = [element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft")];
            for (; i < 4; i++) {
                widths[i] = (parseFloat(borders[i]) || 0);
                widths[i] += (parseFloat(paddings[i]) || 0)
            }
            return {
                height: widths[0] + widths[2],
                width: widths[1] + widths[3]
            }
        },
        _proportionallyResize: function() {
            if (!this._proportionallyResizeElements.length) {
                return
            }
            var prel, i = 0,
                element = this.helper || this.element;
            for (; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i];
                if (!this.outerDimensions) {
                    this.outerDimensions = this._getPaddingPlusBorderDimensions(prel)
                }
                prel.css({
                    height: (element.height() - this.outerDimensions.height) || 0,
                    width: (element.width() - this.outerDimensions.width) || 0
                })
            }
        },
        _renderProxy: function() {
            var el = this.element,
                o = this.options;
            this.elementOffset = el.offset();
            if (this._helper) {
                this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
                this._addClass(this.helper, this._helper);
                this.helper.css({
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    position: "absolute",
                    left: this.elementOffset.left + "px",
                    top: this.elementOffset.top + "px",
                    zIndex: ++o.zIndex
                });
                this.helper.appendTo("body").disableSelection()
            } else {
                this.helper = this.element
            }
        },
        _change: {
            e: function(event, dx) {
                return {
                    width: this.originalSize.width + dx
                }
            },
            w: function(event, dx) {
                var cs = this.originalSize,
                    sp = this.originalPosition;
                return {
                    left: sp.left + dx,
                    width: cs.width - dx
                }
            },
            n: function(event, dx, dy) {
                var cs = this.originalSize,
                    sp = this.originalPosition;
                return {
                    top: sp.top + dy,
                    height: cs.height - dy
                }
            },
            s: function(event, dx, dy) {
                return {
                    height: this.originalSize.height + dy
                }
            },
            se: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]))
            },
            sw: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]))
            },
            ne: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]))
            },
            nw: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]))
            }
        },
        _propagate: function(n, event) {
            $.ui.plugin.call(this, n, [event, this.ui()]);
            (n !== "resize" && this._trigger(n, event, this.ui()))
        },
        plugins: {},
        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            }
        }
    });
    $.ui.plugin.add("resizable", "animate", {
        stop: function(event) {
            var that = $(this).resizable("instance"),
                o = that.options,
                pr = that._proportionallyResizeElements,
                ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,
                soffsetw = ista ? 0 : that.sizeDiff.width,
                style = {
                    width: (that.size.width - soffsetw),
                    height: (that.size.height - soffseth)
                },
                left = (parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left)) || null,
                top = (parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top)) || null;
            that.element.animate($.extend(style, top && left ? {
                top: top,
                left: left
            } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function() {
                    var data = {
                        width: parseFloat(that.element.css("width")),
                        height: parseFloat(that.element.css("height")),
                        top: parseFloat(that.element.css("top")),
                        left: parseFloat(that.element.css("left"))
                    };
                    if (pr && pr.length) {
                        $(pr[0]).css({
                            width: data.width,
                            height: data.height
                        })
                    }
                    that._updateCache(data);
                    that._propagate("resize", event)
                }
            })
        }
    });
    $.ui.plugin.add("resizable", "containment", {
        start: function() {
            var element, p, co, ch, cw, width, height, that = $(this).resizable("instance"),
                o = that.options,
                el = that.element,
                oc = o.containment,
                ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
            if (!ce) {
                return
            }
            that.containerElement = $(ce);
            if (/document/.test(oc) || oc === document) {
                that.containerOffset = {
                    left: 0,
                    top: 0
                };
                that.containerPosition = {
                    left: 0,
                    top: 0
                };
                that.parentData = {
                    element: $(document),
                    left: 0,
                    top: 0,
                    width: $(document).width(),
                    height: $(document).height() || document.body.parentNode.scrollHeight
                }
            } else {
                element = $(ce);
                p = [];
                $(["Top", "Right", "Left", "Bottom"]).each(function(i, name) {
                    p[i] = that._num(element.css("padding" + name))
                });
                that.containerOffset = element.offset();
                that.containerPosition = element.position();
                that.containerSize = {
                    height: (element.innerHeight() - p[3]),
                    width: (element.innerWidth() - p[1])
                };
                co = that.containerOffset;
                ch = that.containerSize.height;
                cw = that.containerSize.width;
                width = (that._hasScroll(ce, "left") ? ce.scrollWidth : cw);
                height = (that._hasScroll(ce) ? ce.scrollHeight : ch);
                that.parentData = {
                    element: ce,
                    left: co.left,
                    top: co.top,
                    width: width,
                    height: height
                }
            }
        },
        resize: function(event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable("instance"),
                o = that.options,
                co = that.containerOffset,
                cp = that.position,
                pRatio = that._aspectRatio || event.shiftKey,
                cop = {
                    top: 0,
                    left: 0
                },
                ce = that.containerElement,
                continueResize = true;
            if (ce[0] !== document && (/static/).test(ce.css("position"))) {
                cop = co
            }
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = false
                }
                that.position.left = o.helper ? co.left : 0
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = false
                }
                that.position.top = that._helper ? co.top : 0
            }
            isParent = that.containerElement.get(0) === that.element.parent().get(0);
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
            if (isParent && isOffsetRelative) {
                that.offset.left = that.parentData.left + that.position.left;
                that.offset.top = that.parentData.top + that.position.top
            } else {
                that.offset.left = that.element.offset().left;
                that.offset.top = that.element.offset().top
            }
            woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : (that.offset.left - co.left)));
            hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)));
            if (woset + that.size.width >= that.parentData.width) {
                that.size.width = that.parentData.width - woset;
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = false
                }
            }
            if (hoset + that.size.height >= that.parentData.height) {
                that.size.height = that.parentData.height - hoset;
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = false
                }
            }
            if (!continueResize) {
                that.position.left = that.prevPosition.left;
                that.position.top = that.prevPosition.top;
                that.size.width = that.prevSize.width;
                that.size.height = that.prevSize.height
            }
        },
        stop: function() {
            var that = $(this).resizable("instance"),
                o = that.options,
                co = that.containerOffset,
                cop = that.containerPosition,
                ce = that.containerElement,
                helper = $(that.helper),
                ho = helper.offset(),
                w = helper.outerWidth() - that.sizeDiff.width,
                h = helper.outerHeight() - that.sizeDiff.height;
            if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
                $(this).css({
                    left: ho.left - cop.left - co.left,
                    width: w,
                    height: h
                })
            }
            if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
                $(this).css({
                    left: ho.left - cop.left - co.left,
                    width: w,
                    height: h
                })
            }
        }
    });
    $.ui.plugin.add("resizable", "alsoResize", {
        start: function() {
            var that = $(this).resizable("instance"),
                o = that.options;
            $(o.alsoResize).each(function() {
                var el = $(this);
                el.data("ui-resizable-alsoresize", {
                    width: parseFloat(el.width()),
                    height: parseFloat(el.height()),
                    left: parseFloat(el.css("left")),
                    top: parseFloat(el.css("top"))
                })
            })
        },
        resize: function(event, ui) {
            var that = $(this).resizable("instance"),
                o = that.options,
                os = that.originalSize,
                op = that.originalPosition,
                delta = {
                    height: (that.size.height - os.height) || 0,
                    width: (that.size.width - os.width) || 0,
                    top: (that.position.top - op.top) || 0,
                    left: (that.position.left - op.left) || 0
                };
            $(o.alsoResize).each(function() {
                var el = $(this),
                    start = $(this).data("ui-resizable-alsoresize"),
                    style = {},
                    css = el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
                $.each(css, function(i, prop) {
                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                    if (sum && sum >= 0) {
                        style[prop] = sum || null
                    }
                });
                el.css(style)
            })
        },
        stop: function() {
            $(this).removeData("ui-resizable-alsoresize")
        }
    });
    $.ui.plugin.add("resizable", "ghost", {
        start: function() {
            var that = $(this).resizable("instance"),
                cs = that.size;
            that.ghost = that.originalElement.clone();
            that.ghost.css({
                opacity: 0.25,
                display: "block",
                position: "relative",
                height: cs.height,
                width: cs.width,
                margin: 0,
                left: 0,
                top: 0
            });
            that._addClass(that.ghost, "ui-resizable-ghost");
            if ($.uiBackCompat !== false && typeof that.options.ghost === "string") {
                that.ghost.addClass(this.options.ghost)
            }
            that.ghost.appendTo(that.helper)
        },
        resize: function() {
            var that = $(this).resizable("instance");
            if (that.ghost) {
                that.ghost.css({
                    position: "relative",
                    height: that.size.height,
                    width: that.size.width
                })
            }
        },
        stop: function() {
            var that = $(this).resizable("instance");
            if (that.ghost && that.helper) {
                that.helper.get(0).removeChild(that.ghost.get(0))
            }
        }
    });
    $.ui.plugin.add("resizable", "grid", {
        resize: function() {
            var outerDimensions, that = $(this).resizable("instance"),
                o = that.options,
                cs = that.size,
                os = that.originalSize,
                op = that.originalPosition,
                a = that.axis,
                grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
                gridX = (grid[0] || 1),
                gridY = (grid[1] || 1),
                ox = Math.round((cs.width - os.width) / gridX) * gridX,
                oy = Math.round((cs.height - os.height) / gridY) * gridY,
                newWidth = os.width + ox,
                newHeight = os.height + oy,
                isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
                isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
                isMinWidth = o.minWidth && (o.minWidth > newWidth),
                isMinHeight = o.minHeight && (o.minHeight > newHeight);
            o.grid = grid;
            if (isMinWidth) {
                newWidth += gridX
            }
            if (isMinHeight) {
                newHeight += gridY
            }
            if (isMaxWidth) {
                newWidth -= gridX
            }
            if (isMaxHeight) {
                newHeight -= gridY
            }
            if (/^(se|s|e)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight
            } else {
                if (/^(ne)$/.test(a)) {
                    that.size.width = newWidth;
                    that.size.height = newHeight;
                    that.position.top = op.top - oy
                } else {
                    if (/^(sw)$/.test(a)) {
                        that.size.width = newWidth;
                        that.size.height = newHeight;
                        that.position.left = op.left - ox
                    } else {
                        if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {
                            outerDimensions = that._getPaddingPlusBorderDimensions(this)
                        }
                        if (newHeight - gridY > 0) {
                            that.size.height = newHeight;
                            that.position.top = op.top - oy
                        } else {
                            newHeight = gridY - outerDimensions.height;
                            that.size.height = newHeight;
                            that.position.top = op.top + os.height - newHeight
                        }
                        if (newWidth - gridX > 0) {
                            that.size.width = newWidth;
                            that.position.left = op.left - ox
                        } else {
                            newWidth = gridX - outerDimensions.width;
                            that.size.width = newWidth;
                            that.position.left = op.left + os.width - newWidth
                        }
                    }
                }
            }
        }
    });
    var widgetsResizable = $.ui.resizable;
    /*!
     * jQuery UI Dialog 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.dialog", {
        version: "1.12.1",
        options: {
            appendTo: "body",
            autoOpen: true,
            buttons: [],
            classes: {
                "ff-ui-dialog": "ui-corner-all",
                "ff-ui-dialog-titlebar": "ui-corner-all"
            },
            closeOnEscape: true,
            closeText: "Close",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css("top", pos.top - topOffset)
                    }
                }
            },
            resizable: true,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: true,
            height: true,
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true,
            width: true
        },
        resizableRelatedOptions: {
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr("title");
            if (this.options.title == null && this.originalTitle != null) {
                this.options.title = this.originalTitle
            }
            if (this.options.disabled) {
                this.options.disabled = false
            }
            this._createWrapper();
            this.element.show().removeAttr("title").appendTo(this.uiDialog);
            this._addClass("ff-ui-dialog-content", "ui-widget-content");
            this._createTitlebar();
            this._createButtonPane();
            if (this.options.draggable && $.fn.draggable) {
                this._makeDraggable()
            }
            if (this.options.resizable && $.fn.resizable) {
                this._makeResizable()
            }
            this._isOpen = false;
            this._trackFocus()
        },
        _init: function() {
            if (this.options.autoOpen) {
                this.open()
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element && (element.jquery || element.nodeType)) {
                return $(element)
            }
            return this.document.find(element || "body").eq(0)
        },
        _destroy: function() {
            var next, originalPosition = this.originalPosition;
            this._untrackInstance();
            this._destroyOverlay();
            this.element.removeUniqueId().css(this.originalCss).detach();
            this.uiDialog.remove();
            if (this.originalTitle) {
                this.element.attr("title", this.originalTitle)
            }
            next = originalPosition.parent.children().eq(originalPosition.index);
            if (next.length && next[0] !== this.element[0]) {
                next.before(this.element)
            } else {
                originalPosition.parent.append(this.element)
            }
        },
        widget: function() {
            return this.uiDialog
        },
        disable: $.noop,
        enable: $.noop,
        close: function(event) {
            var that = this;
            if (!this._isOpen || this._trigger("beforeClose", event) === false) {
                return
            }
            this._isOpen = false;
            this._focusedElement = null;
            this._destroyOverlay();
            this._untrackInstance();
            if (!this.opener.filter(":focusable").trigger("focus").length) {
                $.ui.safeBlur($.ui.safeActiveElement(this.document[0]))
            }
            this._hide(this.uiDialog, this.options.hide, function() {
                that._trigger("close", event)
            })
        },
        isOpen: function() {
            return this._isOpen
        },
        moveToTop: function() {
            this._moveToTop()
        },
        _moveToTop: function(event, silent) {
            var moved = false,
                zIndices = this.uiDialog.siblings(".ui-front:visible").map(function() {
                    return +$(this).css("z-index")
                }).get(),
                zIndexMax = Math.max.apply(null, zIndices);
            if (zIndexMax >= +this.uiDialog.css("z-index")) {
                this.uiDialog.css("z-index", zIndexMax + 1);
                moved = true
            }
            if (moved && !silent) {
                this._trigger("focus", event)
            }
            return moved
        },
        open: function() {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) {
                    this._focusTabbable()
                }
                return
            }
            this._isOpen = true;
            this.opener = $($.ui.safeActiveElement(this.document[0]));
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, true);
            if (this.overlay) {
                this.overlay.css("z-index", this.uiDialog.css("z-index") - 1)
            }
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus")
            });
            this._makeFocusTarget();
            this._trigger("open")
        },
        _focusTabbable: function() {
            var hasFocus = this._focusedElement;
            if (!hasFocus) {
                hasFocus = this.element.find("[autofocus]")
            }
            if (!hasFocus.length) {
                hasFocus = this.element.find(":tabbable")
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogButtonPane.find(":tabbable")
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogTitlebarClose.filter(":tabbable")
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialog
            }
            hasFocus.eq(0).trigger("focus")
        },
        _keepFocus: function(event) {
            function checkFocus() {
                var activeElement = $.ui.safeActiveElement(this.document[0]),
                    isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                if (!isActive) {
                    this._focusTabbable()
                }
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus)
        },
        _createWrapper: function() {
            this.uiDialog = $("<div>").hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo());
            this._addClass(this.uiDialog, "ff-ui-dialog", "ui-widget ui-widget-content ui-front");
            this._on(this.uiDialog, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return
                    }
                    if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
                        return
                    }
                    var tabbables = this.uiDialog.find(":tabbable"),
                        first = tabbables.filter(":first"),
                        last = tabbables.filter(":last");
                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                        this._delay(function() {
                            first.trigger("focus")
                        });
                        event.preventDefault()
                    } else {
                        if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                            this._delay(function() {
                                last.trigger("focus")
                            });
                            event.preventDefault()
                        }
                    }
                },
                mousedown: function(event) {
                    if (this._moveToTop(event)) {
                        this._focusTabbable()
                    }
                }
            });
            if (!this.element.find("[aria-describedby]").length) {
                this.uiDialog.attr({
                    "aria-describedby": this.element.uniqueId().attr("id")
                })
            }
        },
        _createTitlebar: function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>");
            this._addClass(this.uiDialogTitlebar, "ff-ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix");
            this._on(this.uiDialogTitlebar, {
                mousedown: function(event) {
                    if (!$(event.target).closest(".ff-ui-dialog-titlebar-close")) {
                        this.uiDialog.trigger("focus")
                    }
                }
            });
            this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                label: $("<a>").text(this.options.closeText).html(),
                icon: "ui-icon-closethick",
                showLabel: false
            }).appendTo(this.uiDialogTitlebar);
            this._addClass(this.uiDialogTitlebarClose, "ff-ui-dialog-titlebar-close");
            this._on(this.uiDialogTitlebarClose, {
                click: function(event) {
                    event.preventDefault();
                    this.close(event)
                }
            });
            uiDialogTitle = $("<span>").uniqueId().prependTo(this.uiDialogTitlebar);
            this._addClass(uiDialogTitle, "ff-ui-dialog-title");
            this._title(uiDialogTitle);
            this.uiDialogTitlebar.prependTo(this.uiDialog);
            this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            })
        },
        _title: function(title) {
            if (this.options.title) {
                title.text(this.options.title)
            } else {
                title.html("&#160;")
            }
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = $("<div>");
            this._addClass(this.uiDialogButtonPane, "ff-ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix");
            this.uiButtonSet = $("<div>").appendTo(this.uiDialogButtonPane);
            this._addClass(this.uiButtonSet, "ff-ui-dialog-buttonset");
            this._createButtons()
        },
        _createButtons: function() {
            var that = this,
                buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || ($.isArray(buttons) && !buttons.length)) {
                this._removeClass(this.uiDialog, "ff-ui-dialog-buttons");
                return
            }
            $.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props;
                props = $.extend({
                    type: "button"
                }, props);
                click = props.click;
                buttonOptions = {
                    icon: props.icon,
                    iconPosition: props.iconPosition,
                    showLabel: props.showLabel,
                    icons: props.icons,
                    text: props.text
                };
                delete props.click;
                delete props.icon;
                delete props.iconPosition;
                delete props.showLabel;
                delete props.icons;
                if (typeof props.text === "boolean") {
                    delete props.text
                }
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet).on("click", function() {
                    click.apply(that.element[0], arguments)
                })
            });
            this._addClass(this.uiDialog, "ff-ui-dialog-buttons");
            this.uiDialogButtonPane.appendTo(this.uiDialog)
        },
        _makeDraggable: function() {
            var that = this,
                options = this.options;

            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                }
            }
            this.uiDialog.draggable({
                cancel: ".ff-ui-dialog-content, .ff-ui-dialog-titlebar-close",
                handle: ".ff-ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    that._addClass($(this), "ff-ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui))
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui))
                },
                stop: function(event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft(),
                        top = ui.offset.top - that.document.scrollTop();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    that._removeClass($(this), "ff-ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui))
                }
            })
        },
        _makeResizable: function() {
            var that = this,
                options = this.options,
                handles = options.resizable,
                position = this.uiDialog.css("position"),
                resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";

            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                }
            }
            this.uiDialog.resizable({
                cancel: ".ff-ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    that._addClass($(this), "ff-ui-dialog-resizing");
                    that._blockFrames();
                    that._trigger("resizeStart", event, filteredUi(ui))
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui))
                },
                stop: function(event, ui) {
                    var offset = that.uiDialog.offset(),
                        left = offset.left - that.document.scrollLeft(),
                        top = offset.top - that.document.scrollTop();
                    options.height = that.uiDialog.height();
                    options.width = that.uiDialog.width();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    that._removeClass($(this), "ff-ui-dialog-resizing");
                    that._unblockFrames();
                    that._trigger("resizeStop", event, filteredUi(ui))
                }
            }).css("position", position)
        },
        _trackFocus: function() {
            this._on(this.widget(), {
                focusin: function(event) {
                    this._makeFocusTarget();
                    this._focusedElement = $(event.target)
                }
            })
        },
        _makeFocusTarget: function() {
            this._untrackInstance();
            this._trackingInstances().unshift(this)
        },
        _untrackInstance: function() {
            var instances = this._trackingInstances(),
                exists = $.inArray(this, instances);
            if (exists !== -1) {
                instances.splice(exists, 1)
            }
        },
        _trackingInstances: function() {
            var instances = this.document.data("ff-ui-dialog-instances");
            if (!instances) {
                instances = [];
                this.document.data("ff-ui-dialog-instances", instances)
            }
            return instances
        },
        _minHeight: function() {
            var options = this.options;
            return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height)
        },
        _position: function() {
            var isVisible = this.uiDialog.is(":visible");
            if (!isVisible) {
                this.uiDialog.show()
            }
            this.uiDialog.position(this.options.position);
            if (!isVisible) {
                this.uiDialog.hide()
            }
        },
        _setOptions: function(options) {
            var that = this,
                resize = false,
                resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value);
                if (key in that.sizeRelatedOptions) {
                    resize = true
                }
                if (key in that.resizableRelatedOptions) {
                    resizableOptions[key] = value
                }
            });
            if (resize) {
                this._size();
                this._position()
            }
            if (this.uiDialog.is(":data(ui-resizable)")) {
                this.uiDialog.resizable("option", resizableOptions)
            }
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            if (key === "disabled") {
                return
            }
            this._super(key, value);
            if (key === "appendTo") {
                this.uiDialog.appendTo(this._appendTo())
            }
            if (key === "buttons") {
                this._createButtons()
            }
            if (key === "closeText") {
                this.uiDialogTitlebarClose.button({
                    label: $("<a>").text("" + this.options.closeText).html()
                })
            }
            if (key === "draggable") {
                isDraggable = uiDialog.is(":data(ui-draggable)");
                if (isDraggable && !value) {
                    uiDialog.draggable("destroy")
                }
                if (!isDraggable && value) {
                    this._makeDraggable()
                }
            }
            if (key === "position") {
                this._position()
            }
            if (key === "resizable") {
                isResizable = uiDialog.is(":data(ui-resizable)");
                if (isResizable && !value) {
                    uiDialog.resizable("destroy")
                }
                if (isResizable && typeof value === "string") {
                    uiDialog.resizable("option", "handles", value)
                }
                if (!isResizable && value !== false) {
                    this._makeResizable()
                }
            }
            if (key === "title") {
                this._title(this.uiDialogTitlebar.find(".ff-ui-dialog-title"))
            }
        },
        _size: function() {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            });
            if (options.minWidth > options.width) {
                options.width = options.minWidth
            }
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
            if (options.height === "auto") {
                this.element.css({
                    minHeight: minContentHeight,
                    maxHeight: maxContentHeight,
                    height: "auto"
                })
            } else {
                this.element.height(Math.max(0, options.height - nonContentHeight))
            }
            if (this.uiDialog.is(":data(ui-resizable)")) {
                this.uiDialog.resizable("option", "minHeight", this._minHeight())
            }
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    position: "absolute",
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0]
            })
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks
            }
        },
        _allowInteraction: function(event) {
            if ($(event.target).closest(".ff-ui-dialog").length) {
                return true
            }
            return !!$(event.target).closest(".ff-ui-datepicker").length
        },
        _createOverlay: function() {
            if (!this.options.modal) {
                return
            }
            var isOpening = true;
            this._delay(function() {
                isOpening = false
            });
            if (!this.document.data("ff-ui-dialog-overlays")) {
                this._on(this.document, {
                    focusin: function(event) {
                        if (isOpening) {
                            return
                        }
                        if (!this._allowInteraction(event)) {
                            event.preventDefault();
                            this._trackingInstances()[0]._focusTabbable()
                        }
                    }
                })
            }
            this.overlay = $("<div>").appendTo(this._appendTo());
            this._addClass(this.overlay, null, "ui-widget-overlay ui-front");
            this._on(this.overlay, {
                mousedown: "_keepFocus"
            });
            this.document.data("ff-ui-dialog-overlays", (this.document.data("ff-ui-dialog-overlays") || 0) + 1)
        },
        _destroyOverlay: function() {
            if (!this.options.modal) {
                return
            }
            if (this.overlay) {
                var overlays = this.document.data("ff-ui-dialog-overlays") - 1;
                if (!overlays) {
                    this._off(this.document, "focusin");
                    this.document.removeData("ff-ui-dialog-overlays")
                } else {
                    this.document.data("ff-ui-dialog-overlays", overlays)
                }
                this.overlay.remove();
                this.overlay = null
            }
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.dialog", $.ui.dialog, {
            options: {
                dialogClass: ""
            },
            _createWrapper: function() {
                this._super();
                this.uiDialog.addClass(this.options.dialogClass)
            },
            _setOption: function(key, value) {
                if (key === "dialogClass") {
                    this.uiDialog.removeClass(this.options.dialogClass).addClass(value)
                }
                this._superApply(arguments)
            }
        })
    }
    var widgetsDialog = $.ui.dialog;
    /*!
     * jQuery UI Droppable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.droppable", {
        version: "1.12.1",
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            addClasses: true,
            greedy: false,
            scope: "default",
            tolerance: "intersect",
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function() {
            var proportions, o = this.options,
                accept = o.accept;
            this.isover = false;
            this.isout = true;
            this.accept = $.isFunction(accept) ? accept : function(d) {
                return d.is(accept)
            };
            this.proportions = function() {
                if (arguments.length) {
                    proportions = arguments[0]
                } else {
                    return proportions ? proportions : proportions = {
                        width: this.element[0].offsetWidth,
                        height: this.element[0].offsetHeight
                    }
                }
            };
            this._addToManager(o.scope);
            o.addClasses && this._addClass("ui-droppable")
        },
        _addToManager: function(scope) {
            $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];
            $.ui.ddmanager.droppables[scope].push(this)
        },
        _splice: function(drop) {
            var i = 0;
            for (; i < drop.length; i++) {
                if (drop[i] === this) {
                    drop.splice(i, 1)
                }
            }
        },
        _destroy: function() {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            this._splice(drop)
        },
        _setOption: function(key, value) {
            if (key === "accept") {
                this.accept = $.isFunction(value) ? value : function(d) {
                    return d.is(value)
                }
            } else {
                if (key === "scope") {
                    var drop = $.ui.ddmanager.droppables[this.options.scope];
                    this._splice(drop);
                    this._addToManager(value)
                }
            }
            this._super(key, value)
        },
        _activate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this._addActiveClass();
            if (draggable) {
                this._trigger("activate", event, this.ui(draggable))
            }
        },
        _deactivate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this._removeActiveClass();
            if (draggable) {
                this._trigger("deactivate", event, this.ui(draggable))
            }
        },
        _over: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return
            }
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                this._addHoverClass();
                this._trigger("over", event, this.ui(draggable))
            }
        },
        _out: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return
            }
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                this._removeHoverClass();
                this._trigger("out", event, this.ui(draggable))
            }
        },
        _drop: function(event, custom) {
            var draggable = custom || $.ui.ddmanager.current,
                childrenIntersection = false;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return false
            }
            this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                var inst = $(this).droppable("instance");
                if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) && intersect(draggable, $.extend(inst, {
                        offset: inst.element.offset()
                    }), inst.options.tolerance, event)) {
                    childrenIntersection = true;
                    return false
                }
            });
            if (childrenIntersection) {
                return false
            }
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                this._removeActiveClass();
                this._removeHoverClass();
                this._trigger("drop", event, this.ui(draggable));
                return this.element
            }
            return false
        },
        ui: function(c) {
            return {
                draggable: (c.currentItem || c.element),
                helper: c.helper,
                position: c.position,
                offset: c.positionAbs
            }
        },
        _addHoverClass: function() {
            this._addClass("ui-droppable-hover")
        },
        _removeHoverClass: function() {
            this._removeClass("ui-droppable-hover")
        },
        _addActiveClass: function() {
            this._addClass("ui-droppable-active")
        },
        _removeActiveClass: function() {
            this._removeClass("ui-droppable-active")
        }
    });
    var intersect = $.ui.intersect = (function() {
        function isOverAxis(x, reference, size) {
            return (x >= reference) && (x < (reference + size))
        }
        return function(draggable, droppable, toleranceMode, event) {
            if (!droppable.offset) {
                return false
            }
            var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left,
                y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top,
                x2 = x1 + draggable.helperProportions.width,
                y2 = y1 + draggable.helperProportions.height,
                l = droppable.offset.left,
                t = droppable.offset.top,
                r = l + droppable.proportions().width,
                b = t + droppable.proportions().height;
            switch (toleranceMode) {
                case "fit":
                    return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
                case "intersect":
                    return (l < x1 + (draggable.helperProportions.width / 2) && x2 - (draggable.helperProportions.width / 2) < r && t < y1 + (draggable.helperProportions.height / 2) && y2 - (draggable.helperProportions.height / 2) < b);
                case "pointer":
                    return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);
                case "touch":
                    return ((y1 >= t && y1 <= b) || (y2 >= t && y2 <= b) || (y1 < t && y2 > b)) && ((x1 >= l && x1 <= r) || (x2 >= l && x2 <= r) || (x1 < l && x2 > r));
                default:
                    return false
            }
        }
    })();
    $.ui.ddmanager = {
        current: null,
        droppables: {
            "default": []
        },
        prepareOffsets: function(t, event) {
            var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [],
                type = event ? event.type : null,
                list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
            droppablesLoop: for (i = 0; i < m.length; i++) {
                if (m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0], (t.currentItem || t.element)))) {
                    continue
                }
                for (j = 0; j < list.length; j++) {
                    if (list[j] === m[i].element[0]) {
                        m[i].proportions().height = 0;
                        continue droppablesLoop
                    }
                }
                m[i].visible = m[i].element.css("display") !== "none";
                if (!m[i].visible) {
                    continue
                }
                if (type === "mousedown") {
                    m[i]._activate.call(m[i], event)
                }
                m[i].offset = m[i].element.offset();
                m[i].proportions({
                    width: m[i].element[0].offsetWidth,
                    height: m[i].element[0].offsetHeight
                })
            }
        },
        drop: function(draggable, event) {
            var dropped = false;
            $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
                if (!this.options) {
                    return
                }
                if (!this.options.disabled && this.visible && intersect(draggable, this, this.options.tolerance, event)) {
                    dropped = this._drop.call(this, event) || dropped
                }
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                    this.isout = true;
                    this.isover = false;
                    this._deactivate.call(this, event)
                }
            });
            return dropped
        },
        dragStart: function(draggable, event) {
            draggable.element.parentsUntil("body").on("scroll.droppable", function() {
                if (!draggable.options.refreshPositions) {
                    $.ui.ddmanager.prepareOffsets(draggable, event)
                }
            })
        },
        drag: function(draggable, event) {
            if (draggable.options.refreshPositions) {
                $.ui.ddmanager.prepareOffsets(draggable, event)
            }
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                if (this.options.disabled || this.greedyChild || !this.visible) {
                    return
                }
                var parentInstance, scope, parent, intersects = intersect(draggable, this, this.options.tolerance, event),
                    c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
                if (!c) {
                    return
                }
                if (this.options.greedy) {
                    scope = this.options.scope;
                    parent = this.element.parents(":data(ui-droppable)").filter(function() {
                        return $(this).droppable("instance").options.scope === scope
                    });
                    if (parent.length) {
                        parentInstance = $(parent[0]).droppable("instance");
                        parentInstance.greedyChild = (c === "isover")
                    }
                }
                if (parentInstance && c === "isover") {
                    parentInstance.isover = false;
                    parentInstance.isout = true;
                    parentInstance._out.call(parentInstance, event)
                }
                this[c] = true;
                this[c === "isout" ? "isover" : "isout"] = false;
                this[c === "isover" ? "_over" : "_out"].call(this, event);
                if (parentInstance && c === "isout") {
                    parentInstance.isout = false;
                    parentInstance.isover = true;
                    parentInstance._over.call(parentInstance, event)
                }
            })
        },
        dragStop: function(draggable, event) {
            draggable.element.parentsUntil("body").off("scroll.droppable");
            if (!draggable.options.refreshPositions) {
                $.ui.ddmanager.prepareOffsets(draggable, event)
            }
        }
    };
    if ($.uiBackCompat !== false) {
        $.widget("ui.droppable", $.ui.droppable, {
            options: {
                hoverClass: false,
                activeClass: false
            },
            _addActiveClass: function() {
                this._super();
                if (this.options.activeClass) {
                    this.element.addClass(this.options.activeClass)
                }
            },
            _removeActiveClass: function() {
                this._super();
                if (this.options.activeClass) {
                    this.element.removeClass(this.options.activeClass)
                }
            },
            _addHoverClass: function() {
                this._super();
                if (this.options.hoverClass) {
                    this.element.addClass(this.options.hoverClass)
                }
            },
            _removeHoverClass: function() {
                this._super();
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass)
                }
            }
        })
    }
    var widgetsDroppable = $.ui.droppable;
    /*!
     * jQuery UI Progressbar 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsProgressbar = $.widget("ui.progressbar", {
        version: "1.12.1",
        options: {
            classes: {
                "ui-progressbar": "ui-corner-all",
                "ui-progressbar-value": "ui-corner-left",
                "ui-progressbar-complete": "ui-corner-right"
            },
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function() {
            this.oldValue = this.options.value = this._constrainedValue();
            this.element.attr({
                role: "progressbar",
                "aria-valuemin": this.min
            });
            this._addClass("ui-progressbar", "ui-widget ui-widget-content");
            this.valueDiv = $("<div>").appendTo(this.element);
            this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header");
            this._refreshValue()
        },
        _destroy: function() {
            this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow");
            this.valueDiv.remove()
        },
        value: function(newValue) {
            if (newValue === undefined) {
                return this.options.value
            }
            this.options.value = this._constrainedValue(newValue);
            this._refreshValue()
        },
        _constrainedValue: function(newValue) {
            if (newValue === undefined) {
                newValue = this.options.value
            }
            this.indeterminate = newValue === false;
            if (typeof newValue !== "number") {
                newValue = 0
            }
            return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue))
        },
        _setOptions: function(options) {
            var value = options.value;
            delete options.value;
            this._super(options);
            this.options.value = this._constrainedValue(value);
            this._refreshValue()
        },
        _setOption: function(key, value) {
            if (key === "max") {
                value = Math.max(this.min, value)
            }
            this._super(key, value)
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.element.attr("aria-disabled", value);
            this._toggleClass(null, "ui-state-disabled", !!value)
        },
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min)
        },
        _refreshValue: function() {
            var value = this.options.value,
                percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + "%");
            this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, value === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate);
            if (this.indeterminate) {
                this.element.removeAttr("aria-valuenow");
                if (!this.overlayDiv) {
                    this.overlayDiv = $("<div>").appendTo(this.valueDiv);
                    this._addClass(this.overlayDiv, "ui-progressbar-overlay")
                }
            } else {
                this.element.attr({
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null
                }
            }
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change")
            }
            if (value === this.options.max) {
                this._trigger("complete")
            }
        }
    });
    /*!
     * jQuery UI Selectable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsSelectable = $.widget("ui.selectable", $.ui.mouse, {
        version: "1.12.1",
        options: {
            appendTo: "body",
            autoRefresh: true,
            distance: 0,
            filter: "*",
            tolerance: "touch",
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function() {
            var that = this;
            this._addClass("ui-selectable");
            this.dragged = false;
            this.refresh = function() {
                that.elementPos = $(that.element[0]).offset();
                that.selectees = $(that.options.filter, that.element[0]);
                that._addClass(that.selectees, "ui-selectee");
                that.selectees.each(function() {
                    var $this = $(this),
                        selecteeOffset = $this.offset(),
                        pos = {
                            left: selecteeOffset.left - that.elementPos.left,
                            top: selecteeOffset.top - that.elementPos.top
                        };
                    $.data(this, "selectable-item", {
                        element: this,
                        $element: $this,
                        left: pos.left,
                        top: pos.top,
                        right: pos.left + $this.outerWidth(),
                        bottom: pos.top + $this.outerHeight(),
                        startselected: false,
                        selected: $this.hasClass("ui-selected"),
                        selecting: $this.hasClass("ui-selecting"),
                        unselecting: $this.hasClass("ui-unselecting")
                    })
                })
            };
            this.refresh();
            this._mouseInit();
            this.helper = $("<div>");
            this._addClass(this.helper, "ui-selectable-helper")
        },
        _destroy: function() {
            this.selectees.removeData("selectable-item");
            this._mouseDestroy()
        },
        _mouseStart: function(event) {
            var that = this,
                options = this.options;
            this.opos = [event.pageX, event.pageY];
            this.elementPos = $(this.element[0]).offset();
            if (this.options.disabled) {
                return
            }
            this.selectees = $(options.filter, this.element[0]);
            this._trigger("start", event);
            $(options.appendTo).append(this.helper);
            this.helper.css({
                left: event.pageX,
                top: event.pageY,
                width: 0,
                height: 0
            });
            if (options.autoRefresh) {
                this.refresh()
            }
            this.selectees.filter(".ui-selected").each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.startselected = true;
                if (!event.metaKey && !event.ctrlKey) {
                    that._removeClass(selectee.$element, "ui-selected");
                    selectee.selected = false;
                    that._addClass(selectee.$element, "ui-unselecting");
                    selectee.unselecting = true;
                    that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    })
                }
            });
            $(event.target).parents().addBack().each(function() {
                var doSelect, selectee = $.data(this, "selectable-item");
                if (selectee) {
                    doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
                    that._removeClass(selectee.$element, doSelect ? "ui-unselecting" : "ui-selected")._addClass(selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting");
                    selectee.unselecting = !doSelect;
                    selectee.selecting = doSelect;
                    selectee.selected = doSelect;
                    if (doSelect) {
                        that._trigger("selecting", event, {
                            selecting: selectee.element
                        })
                    } else {
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        })
                    }
                    return false
                }
            })
        },
        _mouseDrag: function(event) {
            this.dragged = true;
            if (this.options.disabled) {
                return
            }
            var tmp, that = this,
                options = this.options,
                x1 = this.opos[0],
                y1 = this.opos[1],
                x2 = event.pageX,
                y2 = event.pageY;
            if (x1 > x2) {
                tmp = x2;
                x2 = x1;
                x1 = tmp
            }
            if (y1 > y2) {
                tmp = y2;
                y2 = y1;
                y1 = tmp
            }
            this.helper.css({
                left: x1,
                top: y1,
                width: x2 - x1,
                height: y2 - y1
            });
            this.selectees.each(function() {
                var selectee = $.data(this, "selectable-item"),
                    hit = false,
                    offset = {};
                if (!selectee || selectee.element === that.element[0]) {
                    return
                }
                offset.left = selectee.left + that.elementPos.left;
                offset.right = selectee.right + that.elementPos.left;
                offset.top = selectee.top + that.elementPos.top;
                offset.bottom = selectee.bottom + that.elementPos.top;
                if (options.tolerance === "touch") {
                    hit = (!(offset.left > x2 || offset.right < x1 || offset.top > y2 || offset.bottom < y1))
                } else {
                    if (options.tolerance === "fit") {
                        hit = (offset.left > x1 && offset.right < x2 && offset.top > y1 && offset.bottom < y2)
                    }
                }
                if (hit) {
                    if (selectee.selected) {
                        that._removeClass(selectee.$element, "ui-selected");
                        selectee.selected = false
                    }
                    if (selectee.unselecting) {
                        that._removeClass(selectee.$element, "ui-unselecting");
                        selectee.unselecting = false
                    }
                    if (!selectee.selecting) {
                        that._addClass(selectee.$element, "ui-selecting");
                        selectee.selecting = true;
                        that._trigger("selecting", event, {
                            selecting: selectee.element
                        })
                    }
                } else {
                    if (selectee.selecting) {
                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                            that._removeClass(selectee.$element, "ui-selecting");
                            selectee.selecting = false;
                            that._addClass(selectee.$element, "ui-selected");
                            selectee.selected = true
                        } else {
                            that._removeClass(selectee.$element, "ui-selecting");
                            selectee.selecting = false;
                            if (selectee.startselected) {
                                that._addClass(selectee.$element, "ui-unselecting");
                                selectee.unselecting = true
                            }
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            })
                        }
                    }
                    if (selectee.selected) {
                        if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                            that._removeClass(selectee.$element, "ui-selected");
                            selectee.selected = false;
                            that._addClass(selectee.$element, "ui-unselecting");
                            selectee.unselecting = true;
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            })
                        }
                    }
                }
            });
            return false
        },
        _mouseStop: function(event) {
            var that = this;
            this.dragged = false;
            $(".ui-unselecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                that._removeClass(selectee.$element, "ui-unselecting");
                selectee.unselecting = false;
                selectee.startselected = false;
                that._trigger("unselected", event, {
                    unselected: selectee.element
                })
            });
            $(".ui-selecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                that._removeClass(selectee.$element, "ui-selecting")._addClass(selectee.$element, "ui-selected");
                selectee.selecting = false;
                selectee.selected = true;
                selectee.startselected = true;
                that._trigger("selected", event, {
                    selected: selectee.element
                })
            });
            this._trigger("stop", event);
            this.helper.remove();
            return false
        }
    });
    /*!
     * jQuery UI Selectmenu 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsSelectmenu = $.widget("ui.selectmenu", [$.ui.formResetMixin, {
        version: "1.12.1",
        defaultElement: "<select>",
        options: {
            appendTo: null,
            classes: {
                "ui-selectmenu-button-open": "ui-corner-top",
                "ui-selectmenu-button-closed": "ui-corner-all"
            },
            disabled: null,
            icons: {
                button: "ui-icon-triangle-1-s"
            },
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            width: false,
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function() {
            var selectmenuId = this.element.uniqueId().attr("id");
            this.ids = {
                element: selectmenuId,
                button: selectmenuId + "-button",
                menu: selectmenuId + "-menu"
            };
            this._drawButton();
            this._drawMenu();
            this._bindFormResetHandler();
            this._rendered = false;
            this.menuItems = $()
        },
        _drawButton: function() {
            var icon, that = this,
                item = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);
            this.labels = this.element.labels().attr("for", this.ids.button);
            this._on(this.labels, {
                click: function(event) {
                    this.button.focus();
                    event.preventDefault()
                }
            });
            this.element.hide();
            this.button = $("<span>", {
                tabindex: this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: "combobox",
                "aria-expanded": "false",
                "aria-autocomplete": "list",
                "aria-owns": this.ids.menu,
                "aria-haspopup": "true",
                title: this.element.attr("title")
            }).insertAfter(this.element);
            this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget");
            icon = $("<span>").appendTo(this.button);
            this._addClass(icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button);
            this.buttonItem = this._renderButtonItem(item).appendTo(this.button);
            if (this.options.width !== false) {
                this._resizeButton()
            }
            this._on(this.button, this._buttonEvents);
            this.button.one("focusin", function() {
                if (!that._rendered) {
                    that._refreshMenu()
                }
            })
        },
        _drawMenu: function() {
            var that = this;
            this.menu = $("<ul>", {
                "aria-hidden": "true",
                "aria-labelledby": this.ids.button,
                id: this.ids.menu
            });
            this.menuWrap = $("<div>").append(this.menu);
            this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front");
            this.menuWrap.appendTo(this._appendTo());
            this.menuInstance = this.menu.menu({
                classes: {
                    "ui-menu": "ui-corner-bottom"
                },
                role: "listbox",
                select: function(event, ui) {
                    event.preventDefault();
                    that._setSelection();
                    that._select(ui.item.data("ui-selectmenu-item"), event)
                },
                focus: function(event, ui) {
                    var item = ui.item.data("ui-selectmenu-item");
                    if (that.focusIndex != null && item.index !== that.focusIndex) {
                        that._trigger("focus", event, {
                            item: item
                        });
                        if (!that.isOpen) {
                            that._select(item, event)
                        }
                    }
                    that.focusIndex = item.index;
                    that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"))
                }
            }).menu("instance");
            this.menuInstance._off(this.menu, "mouseleave");
            this.menuInstance._closeOnDocumentClick = function() {
                return false
            };
            this.menuInstance._isDivider = function() {
                return false
            }
        },
        refresh: function() {
            this._refreshMenu();
            this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {}));
            if (this.options.width === null) {
                this._resizeButton()
            }
        },
        _refreshMenu: function() {
            var item, options = this.element.find("option");
            this.menu.empty();
            this._parseOptions(options);
            this._renderMenu(this.menu, this.items);
            this.menuInstance.refresh();
            this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper");
            this._rendered = true;
            if (!options.length) {
                return
            }
            item = this._getSelectedItem();
            this.menuInstance.focus(null, item);
            this._setAria(item.data("ui-selectmenu-item"));
            this._setOption("disabled", this.element.prop("disabled"))
        },
        open: function(event) {
            if (this.options.disabled) {
                return
            }
            if (!this._rendered) {
                this._refreshMenu()
            } else {
                this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active");
                this.menuInstance.focus(null, this._getSelectedItem())
            }
            if (!this.menuItems.length) {
                return
            }
            this.isOpen = true;
            this._toggleAttr();
            this._resizeMenu();
            this._position();
            this._on(this.document, this._documentClick);
            this._trigger("open", event)
        },
        _position: function() {
            this.menuWrap.position($.extend({
                of: this.button
            }, this.options.position))
        },
        close: function(event) {
            if (!this.isOpen) {
                return
            }
            this.isOpen = false;
            this._toggleAttr();
            this.range = null;
            this._off(this.document);
            this._trigger("close", event)
        },
        widget: function() {
            return this.button
        },
        menuWidget: function() {
            return this.menu
        },
        _renderButtonItem: function(item) {
            var buttonItem = $("<span>");
            this._setText(buttonItem, item.label);
            this._addClass(buttonItem, "ui-selectmenu-text");
            return buttonItem
        },
        _renderMenu: function(ul, items) {
            var that = this,
                currentOptgroup = "";
            $.each(items, function(index, item) {
                var li;
                if (item.optgroup !== currentOptgroup) {
                    li = $("<li>", {
                        text: item.optgroup
                    });
                    that._addClass(li, "ui-selectmenu-optgroup", "ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""));
                    li.appendTo(ul);
                    currentOptgroup = item.optgroup
                }
                that._renderItemData(ul, item)
            })
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-selectmenu-item", item)
        },
        _renderItem: function(ul, item) {
            var li = $("<li>"),
                wrapper = $("<div>", {
                    title: item.element.attr("title")
                });
            if (item.disabled) {
                this._addClass(li, null, "ui-state-disabled")
            }
            this._setText(wrapper, item.label);
            return li.append(wrapper).appendTo(ul)
        },
        _setText: function(element, value) {
            if (value) {
                element.text(value)
            } else {
                element.html("&#160;")
            }
        },
        _move: function(direction, event) {
            var item, next, filter = ".ui-menu-item";
            if (this.isOpen) {
                item = this.menuItems.eq(this.focusIndex).parent("li")
            } else {
                item = this.menuItems.eq(this.element[0].selectedIndex).parent("li");
                filter += ":not(.ui-state-disabled)"
            }
            if (direction === "first" || direction === "last") {
                next = item[direction === "first" ? "prevAll" : "nextAll"](filter).eq(-1)
            } else {
                next = item[direction + "All"](filter).eq(0)
            }
            if (next.length) {
                this.menuInstance.focus(event, next)
            }
        },
        _getSelectedItem: function() {
            return this.menuItems.eq(this.element[0].selectedIndex).parent("li")
        },
        _toggle: function(event) {
            this[this.isOpen ? "close" : "open"](event)
        },
        _setSelection: function() {
            var selection;
            if (!this.range) {
                return
            }
            if (window.getSelection) {
                selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(this.range)
            } else {
                this.range.select()
            }
            this.button.focus()
        },
        _documentClick: {
            mousedown: function(event) {
                if (!this.isOpen) {
                    return
                }
                if (!$(event.target).closest(".ui-selectmenu-menu, #" + $.ui.escapeSelector(this.ids.button)).length) {
                    this.close(event)
                }
            }
        },
        _buttonEvents: {
            mousedown: function() {
                var selection;
                if (window.getSelection) {
                    selection = window.getSelection();
                    if (selection.rangeCount) {
                        this.range = selection.getRangeAt(0)
                    }
                } else {
                    this.range = document.selection.createRange()
                }
            },
            click: function(event) {
                this._setSelection();
                this._toggle(event)
            },
            keydown: function(event) {
                var preventDefault = true;
                switch (event.keyCode) {
                    case $.ui.keyCode.TAB:
                    case $.ui.keyCode.ESCAPE:
                        this.close(event);
                        preventDefault = false;
                        break;
                    case $.ui.keyCode.ENTER:
                        if (this.isOpen) {
                            this._selectFocusedItem(event)
                        }
                        break;
                    case $.ui.keyCode.UP:
                        if (event.altKey) {
                            this._toggle(event)
                        } else {
                            this._move("prev", event)
                        }
                        break;
                    case $.ui.keyCode.DOWN:
                        if (event.altKey) {
                            this._toggle(event)
                        } else {
                            this._move("next", event)
                        }
                        break;
                    case $.ui.keyCode.SPACE:
                        if (this.isOpen) {
                            this._selectFocusedItem(event)
                        } else {
                            this._toggle(event)
                        }
                        break;
                    case $.ui.keyCode.LEFT:
                        this._move("prev", event);
                        break;
                    case $.ui.keyCode.RIGHT:
                        this._move("next", event);
                        break;
                    case $.ui.keyCode.HOME:
                    case $.ui.keyCode.PAGE_UP:
                        this._move("first", event);
                        break;
                    case $.ui.keyCode.END:
                    case $.ui.keyCode.PAGE_DOWN:
                        this._move("last", event);
                        break;
                    default:
                        this.menu.trigger(event);
                        preventDefault = false
                }
                if (preventDefault) {
                    event.preventDefault()
                }
            }
        },
        _selectFocusedItem: function(event) {
            var item = this.menuItems.eq(this.focusIndex).parent("li");
            if (!item.hasClass("ui-state-disabled")) {
                this._select(item.data("ui-selectmenu-item"), event)
            }
        },
        _select: function(item, event) {
            var oldIndex = this.element[0].selectedIndex;
            this.element[0].selectedIndex = item.index;
            this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item));
            this._setAria(item);
            this._trigger("select", event, {
                item: item
            });
            if (item.index !== oldIndex) {
                this._trigger("change", event, {
                    item: item
                })
            }
            this.close(event)
        },
        _setAria: function(item) {
            var id = this.menuItems.eq(item.index).attr("id");
            this.button.attr({
                "aria-labelledby": id,
                "aria-activedescendant": id
            });
            this.menu.attr("aria-activedescendant", id)
        },
        _setOption: function(key, value) {
            if (key === "icons") {
                var icon = this.button.find("span.ui-icon");
                this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button)
            }
            this._super(key, value);
            if (key === "appendTo") {
                this.menuWrap.appendTo(this._appendTo())
            }
            if (key === "width") {
                this._resizeButton()
            }
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.menuInstance.option("disabled", value);
            this.button.attr("aria-disabled", value);
            this._toggleClass(this.button, null, "ui-state-disabled", value);
            this.element.prop("disabled", value);
            if (value) {
                this.button.attr("tabindex", -1);
                this.close()
            } else {
                this.button.attr("tabindex", 0)
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0)
            }
            if (!element || !element[0]) {
                element = this.element.closest(".ui-front, dialog")
            }
            if (!element.length) {
                element = this.document[0].body
            }
            return element
        },
        _toggleAttr: function() {
            this.button.attr("aria-expanded", this.isOpen);
            this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen);
            this.menu.attr("aria-hidden", !this.isOpen)
        },
        _resizeButton: function() {
            var width = this.options.width;
            if (width === false) {
                this.button.css("width", "");
                return
            }
            if (width === null) {
                width = this.element.show().outerWidth();
                this.element.hide()
            }
            this.button.outerWidth(width)
        },
        _resizeMenu: function() {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1))
        },
        _getCreateOptions: function() {
            var options = this._super();
            options.disabled = this.element.prop("disabled");
            return options
        },
        _parseOptions: function(options) {
            var that = this,
                data = [];
            options.each(function(index, item) {
                data.push(that._parseOption($(item), index))
            });
            this.items = data
        },
        _parseOption: function(option, index) {
            var optgroup = option.parent("optgroup");
            return {
                element: option,
                index: index,
                value: option.val(),
                label: option.text(),
                optgroup: optgroup.attr("label") || "",
                disabled: optgroup.prop("disabled") || option.prop("disabled")
            }
        },
        _destroy: function() {
            this._unbindFormResetHandler();
            this.menuWrap.remove();
            this.button.remove();
            this.element.show();
            this.element.removeUniqueId();
            this.labels.attr("for", this.ids.element)
        }
    }]);
    /*!
     * jQuery UI Slider 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsSlider = $.widget("ui.slider", $.ui.mouse, {
        version: "1.12.1",
        widgetEventPrefix: "slide",
        options: {
            animate: false,
            classes: {
                "ui-slider": "ui-corner-all",
                "ui-slider-handle": "ui-corner-all",
                "ui-slider-range": "ui-corner-all ui-widget-header"
            },
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        numPages: 5,
        _create: function() {
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this._calculateNewMax();
            this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content");
            this._refresh();
            this._animateOff = false
        },
        _refresh: function() {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue()
        },
        _createHandles: function() {
            var i, handleCount, options = this.options,
                existingHandles = this.element.find(".ui-slider-handle"),
                handle = "<span tabindex='0'></span>",
                handles = [];
            handleCount = (options.values && options.values.length) || 1;
            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount)
            }
            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push(handle)
            }
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
            this._addClass(this.handles, "ui-slider-handle", "ui-state-default");
            this.handle = this.handles.eq(0);
            this.handles.each(function(i) {
                $(this).data("ui-slider-handle-index", i).attr("tabIndex", 0)
            })
        },
        _createRange: function() {
            var options = this.options;
            if (options.range) {
                if (options.range === true) {
                    if (!options.values) {
                        options.values = [this._valueMin(), this._valueMin()]
                    } else {
                        if (options.values.length && options.values.length !== 2) {
                            options.values = [options.values[0], options.values[0]]
                        } else {
                            if ($.isArray(options.values)) {
                                options.values = options.values.slice(0)
                            }
                        }
                    }
                }
                if (!this.range || !this.range.length) {
                    this.range = $("<div>").appendTo(this.element);
                    this._addClass(this.range, "ui-slider-range")
                } else {
                    this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max");
                    this.range.css({
                        left: "",
                        bottom: ""
                    })
                }
                if (options.range === "min" || options.range === "max") {
                    this._addClass(this.range, "ui-slider-range-" + options.range)
                }
            } else {
                if (this.range) {
                    this.range.remove()
                }
                this.range = null
            }
        },
        _setupEvents: function() {
            this._off(this.handles);
            this._on(this.handles, this._handleEvents);
            this._hoverable(this.handles);
            this._focusable(this.handles)
        },
        _destroy: function() {
            this.handles.remove();
            if (this.range) {
                this.range.remove()
            }
            this._mouseDestroy()
        },
        _mouseCapture: function(event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this,
                o = this.options;
            if (o.disabled) {
                return false
            }
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function(i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if ((distance > thisDistance) || (distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min))) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i
                }
            });
            allowed = this._start(event, index);
            if (allowed === false) {
                return false
            }
            this._mouseSliding = true;
            this._handleIndex = index;
            this._addClass(closestHandle, null, "ui-state-active");
            closestHandle.trigger("focus");
            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - (closestHandle.width() / 2),
                top: event.pageY - offset.top - (closestHandle.height() / 2) - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            };
            if (!this.handles.hasClass("ui-state-hover")) {
                this._slide(event, index, normValue)
            }
            this._animateOff = true;
            return true
        },
        _mouseStart: function() {
            return true
        },
        _mouseDrag: function(event) {
            var position = {
                    x: event.pageX,
                    y: event.pageY
                },
                normValue = this._normValueFromMouse(position);
            this._slide(event, this._handleIndex, normValue);
            return false
        },
        _mouseStop: function(event) {
            this._removeClass(this.handles, null, "ui-state-active");
            this._mouseSliding = false;
            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;
            return false
        },
        _detectOrientation: function() {
            this.orientation = (this.options.orientation === "vertical") ? "vertical" : "horizontal"
        },
        _normValueFromMouse: function(position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
            }
            percentMouse = (pixelMouse / pixelTotal);
            if (percentMouse > 1) {
                percentMouse = 1
            }
            if (percentMouse < 0) {
                percentMouse = 0
            }
            if (this.orientation === "vertical") {
                percentMouse = 1 - percentMouse
            }
            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;
            return this._trimAlignValue(valueMouse)
        },
        _uiHash: function(index, value, values) {
            var uiHash = {
                handle: this.handles[index],
                handleIndex: index,
                value: value !== undefined ? value : this.value()
            };
            if (this._hasMultipleValues()) {
                uiHash.value = value !== undefined ? value : this.values(index);
                uiHash.values = values || this.values()
            }
            return uiHash
        },
        _hasMultipleValues: function() {
            return this.options.values && this.options.values.length
        },
        _start: function(event, index) {
            return this._trigger("start", event, this._uiHash(index))
        },
        _slide: function(event, index, newVal) {
            var allowed, otherVal, currentValue = this.value(),
                newValues = this.values();
            if (this._hasMultipleValues()) {
                otherVal = this.values(index ? 0 : 1);
                currentValue = this.values(index);
                if (this.options.values.length === 2 && this.options.range === true) {
                    newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal)
                }
                newValues[index] = newVal
            }
            if (newVal === currentValue) {
                return
            }
            allowed = this._trigger("slide", event, this._uiHash(index, newVal, newValues));
            if (allowed === false) {
                return
            }
            if (this._hasMultipleValues()) {
                this.values(index, newVal)
            } else {
                this.value(newVal)
            }
        },
        _stop: function(event, index) {
            this._trigger("stop", event, this._uiHash(index))
        },
        _change: function(event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                this._lastChangedValue = index;
                this._trigger("change", event, this._uiHash(index))
            }
        },
        value: function(newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return
            }
            return this._value()
        },
        values: function(index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return
            }
            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values;
                    newValues = arguments[0];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(newValues[i]);
                        this._change(null, i)
                    }
                    this._refreshValue()
                } else {
                    if (this._hasMultipleValues()) {
                        return this._values(index)
                    } else {
                        return this.value()
                    }
                }
            } else {
                return this._values()
            }
        },
        _setOption: function(key, value) {
            var i, valsLength = 0;
            if (key === "range" && this.options.range === true) {
                if (value === "min") {
                    this.options.value = this._values(0);
                    this.options.values = null
                } else {
                    if (value === "max") {
                        this.options.value = this._values(this.options.values.length - 1);
                        this.options.values = null
                    }
                }
            }
            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length
            }
            this._super(key, value);
            switch (key) {
                case "orientation":
                    this._detectOrientation();
                    this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation);
                    this._refreshValue();
                    if (this.options.range) {
                        this._refreshRange(value)
                    }
                    this.handles.css(value === "horizontal" ? "bottom" : "left", "");
                    break;
                case "value":
                    this._animateOff = true;
                    this._refreshValue();
                    this._change(null, 0);
                    this._animateOff = false;
                    break;
                case "values":
                    this._animateOff = true;
                    this._refreshValue();
                    for (i = valsLength - 1; i >= 0; i--) {
                        this._change(null, i)
                    }
                    this._animateOff = false;
                    break;
                case "step":
                case "min":
                case "max":
                    this._animateOff = true;
                    this._calculateNewMax();
                    this._refreshValue();
                    this._animateOff = false;
                    break;
                case "range":
                    this._animateOff = true;
                    this._refresh();
                    this._animateOff = false;
                    break
            }
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this._toggleClass(null, "ui-state-disabled", !!value)
        },
        _value: function() {
            var val = this.options.value;
            val = this._trimAlignValue(val);
            return val
        },
        _values: function(index) {
            var val, vals, i;
            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);
                return val
            } else {
                if (this._hasMultipleValues()) {
                    vals = this.options.values.slice();
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(vals[i])
                    }
                    return vals
                } else {
                    return []
                }
            }
        },
        _trimAlignValue: function(val) {
            if (val <= this._valueMin()) {
                return this._valueMin()
            }
            if (val >= this._valueMax()) {
                return this._valueMax()
            }
            var step = (this.options.step > 0) ? this.options.step : 1,
                valModStep = (val - this._valueMin()) % step,
                alignValue = val - valModStep;
            if (Math.abs(valModStep) * 2 >= step) {
                alignValue += (valModStep > 0) ? step : (-step)
            }
            return parseFloat(alignValue.toFixed(5))
        },
        _calculateNewMax: function() {
            var max = this.options.max,
                min = this._valueMin(),
                step = this.options.step,
                aboveMin = Math.round((max - min) / step) * step;
            max = aboveMin + min;
            if (max > this.options.max) {
                max -= step
            }
            this.max = parseFloat(max.toFixed(this._precision()))
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min))
            }
            return precision
        },
        _precisionOf: function(num) {
            var str = num.toString(),
                decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1
        },
        _valueMin: function() {
            return this.options.min
        },
        _valueMax: function() {
            return this.max
        },
        _refreshRange: function(orientation) {
            if (orientation === "vertical") {
                this.range.css({
                    width: "",
                    left: ""
                })
            }
            if (orientation === "horizontal") {
                this.range.css({
                    height: "",
                    bottom: ""
                })
            }
        },
        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range,
                o = this.options,
                that = this,
                animate = (!this._animateOff) ? o.animate : false,
                _set = {};
            if (this._hasMultipleValues()) {
                this.handles.each(function(i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                    _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                    $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                    if (that.options.range === true) {
                        if (that.orientation === "horizontal") {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    left: valPercent + "%"
                                }, o.animate)
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    width: (valPercent - lastValPercent) + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                })
                            }
                        } else {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    bottom: (valPercent) + "%"
                                }, o.animate)
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    height: (valPercent - lastValPercent) + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                })
                            }
                        }
                    }
                    lastValPercent = valPercent
                })
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = (valueMax !== valueMin) ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                if (oRange === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: valPercent + "%"
                    }, o.animate)
                }
                if (oRange === "max" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: (100 - valPercent) + "%"
                    }, o.animate)
                }
                if (oRange === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: valPercent + "%"
                    }, o.animate)
                }
                if (oRange === "max" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: (100 - valPercent) + "%"
                    }, o.animate)
                }
            }
        },
        _handleEvents: {
            keydown: function(event) {
                var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                switch (event.keyCode) {
                    case $.ui.keyCode.HOME:
                    case $.ui.keyCode.END:
                    case $.ui.keyCode.PAGE_UP:
                    case $.ui.keyCode.PAGE_DOWN:
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        event.preventDefault();
                        if (!this._keySliding) {
                            this._keySliding = true;
                            this._addClass($(event.target), null, "ui-state-active");
                            allowed = this._start(event, index);
                            if (allowed === false) {
                                return
                            }
                        }
                        break
                }
                step = this.options.step;
                if (this._hasMultipleValues()) {
                    curVal = newVal = this.values(index)
                } else {
                    curVal = newVal = this.value()
                }
                switch (event.keyCode) {
                    case $.ui.keyCode.HOME:
                        newVal = this._valueMin();
                        break;
                    case $.ui.keyCode.END:
                        newVal = this._valueMax();
                        break;
                    case $.ui.keyCode.PAGE_UP:
                        newVal = this._trimAlignValue(curVal + ((this._valueMax() - this._valueMin()) / this.numPages));
                        break;
                    case $.ui.keyCode.PAGE_DOWN:
                        newVal = this._trimAlignValue(curVal - ((this._valueMax() - this._valueMin()) / this.numPages));
                        break;
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                        if (curVal === this._valueMax()) {
                            return
                        }
                        newVal = this._trimAlignValue(curVal + step);
                        break;
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        if (curVal === this._valueMin()) {
                            return
                        }
                        newVal = this._trimAlignValue(curVal - step);
                        break
                }
                this._slide(event, index, newVal)
            },
            keyup: function(event) {
                var index = $(event.target).data("ui-slider-handle-index");
                if (this._keySliding) {
                    this._keySliding = false;
                    this._stop(event, index);
                    this._change(event, index);
                    this._removeClass($(event.target), null, "ui-state-active")
                }
            }
        }
    });
    /*!
     * jQuery UI Sortable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    var widgetsSortable = $.widget("ui.sortable", $.ui.mouse, {
        version: "1.12.1",
        widgetEventPrefix: "sort",
        ready: false,
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1000,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function(x, reference, size) {
            return (x >= reference) && (x < (reference + size))
        },
        _isFloating: function(item) {
            return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"))
        },
        _create: function() {
            this.containerCache = {};
            this._addClass("ui-sortable");
            this.refresh();
            this.offset = this.element.offset();
            this._mouseInit();
            this._setHandleClassName();
            this.ready = true
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "handle") {
                this._setHandleClassName()
            }
        },
        _setHandleClassName: function() {
            var that = this;
            this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle");
            $.each(this.items, function() {
                that._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle")
            })
        },
        _destroy: function() {
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) {
                this.items[i].item.removeData(this.widgetName + "-item")
            }
            return this
        },
        _mouseCapture: function(event, overrideHandle) {
            var currentItem = null,
                validHandle = false,
                that = this;
            if (this.reverting) {
                return false
            }
            if (this.options.disabled || this.options.type === "static") {
                return false
            }
            this._refreshItems(event);
            $(event.target).parents().each(function() {
                if ($.data(this, that.widgetName + "-item") === that) {
                    currentItem = $(this);
                    return false
                }
            });
            if ($.data(event.target, that.widgetName + "-item") === that) {
                currentItem = $(event.target)
            }
            if (!currentItem) {
                return false
            }
            if (this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find("*").addBack().each(function() {
                    if (this === event.target) {
                        validHandle = true
                    }
                });
                if (!validHandle) {
                    return false
                }
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true
        },
        _mouseStart: function(event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            if (this.helper[0] !== this.currentItem[0]) {
                this.currentItem.hide()
            }
            this._createPlaceholder();
            if (o.containment) {
                this._setContainment()
            }
            if (o.cursor && o.cursor !== "auto") {
                body = this.document.find("body");
                this.storedCursor = body.css("cursor");
                body.css("cursor", o.cursor);
                this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body)
            }
            if (o.opacity) {
                if (this.helper.css("opacity")) {
                    this._storedOpacity = this.helper.css("opacity")
                }
                this.helper.css("opacity", o.opacity)
            }
            if (o.zIndex) {
                if (this.helper.css("zIndex")) {
                    this._storedZIndex = this.helper.css("zIndex")
                }
                this.helper.css("zIndex", o.zIndex)
            }
            if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                this.overflowOffset = this.scrollParent.offset()
            }
            this._trigger("start", event, this._uiHash());
            if (!this._preserveHelperProportions) {
                this._cacheHelperProportions()
            }
            if (!noActivation) {
                for (i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("activate", event, this._uiHash(this))
                }
            }
            if ($.ui.ddmanager) {
                $.ui.ddmanager.current = this
            }
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event)
            }
            this.dragging = true;
            this._addClass(this.helper, "ui-sortable-helper");
            this._mouseDrag(event);
            return true
        },
        _mouseDrag: function(event) {
            var i, item, itemElement, intersection, o = this.options,
                scrolled = false;
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs
            }
            if (this.options.scroll) {
                if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed
                    } else {
                        if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed
                        }
                    }
                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed
                    } else {
                        if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed
                        }
                    }
                } else {
                    if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed)
                    } else {
                        if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
                            scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed)
                        }
                    }
                    if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed)
                    } else {
                        if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
                            scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed)
                        }
                    }
                }
                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(this, event)
                }
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis !== "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis !== "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) {
                    continue
                }
                if (item.instance !== this.currentContainer) {
                    continue
                }
                if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)) {
                    this.direction = intersection === 1 ? "down" : "up";
                    if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
                        this._rearrange(event, item)
                    } else {
                        break
                    }
                    this._trigger("change", event, this._uiHash());
                    break
                }
            }
            this._contactContainers(event);
            if ($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event)
            }
            this._trigger("sort", event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        },
        _mouseStop: function(event, noPropagation) {
            if (!event) {
                return
            }
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                $.ui.ddmanager.drop(this, event)
            }
            if (this.options.revert) {
                var that = this,
                    cur = this.placeholder.offset(),
                    axis = this.options.axis,
                    animation = {};
                if (!axis || axis === "x") {
                    animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)
                }
                if (!axis || axis === "y") {
                    animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)
                }
                this.reverting = true;
                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                    that._clear(event)
                })
            } else {
                this._clear(event, noPropagation)
            }
            return false
        },
        cancel: function() {
            if (this.dragging) {
                this._mouseUp(new $.Event("mouseup", {
                    target: null
                }));
                if (this.options.helper === "original") {
                    this.currentItem.css(this._storedCSS);
                    this._removeClass(this.currentItem, "ui-sortable-helper")
                } else {
                    this.currentItem.show()
                }
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0
                    }
                }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode) {
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0])
                }
                if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
                    this.helper.remove()
                }
                $.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.currentItem)
                } else {
                    $(this.domPosition.parent).prepend(this.currentItem)
                }
            }
            return this
        },
        serialize: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected),
                str = [];
            o = o || {};
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
                if (res) {
                    str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]))
                }
            });
            if (!str.length && o.key) {
                str.push(o.key + "=")
            }
            return str.join("&")
        },
        toArray: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected),
                ret = [];
            o = o || {};
            items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || "id") || "")
            });
            return ret
        },
        _intersectsWith: function(item) {
            var x1 = this.positionAbs.left,
                x2 = x1 + this.helperProportions.width,
                y1 = this.positionAbs.top,
                y2 = y1 + this.helperProportions.height,
                l = item.left,
                r = l + item.width,
                t = item.top,
                b = t + item.height,
                dyClick = this.offset.click.top,
                dxClick = this.offset.click.left,
                isOverElementHeight = (this.options.axis === "x") || ((y1 + dyClick) > t && (y1 + dyClick) < b),
                isOverElementWidth = (this.options.axis === "y") || ((x1 + dxClick) > l && (x1 + dxClick) < r),
                isOverElement = isOverElementHeight && isOverElementWidth;
            if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || (this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])) {
                return isOverElement
            } else {
                return (l < x1 + (this.helperProportions.width / 2) && x2 - (this.helperProportions.width / 2) < r && t < y1 + (this.helperProportions.height / 2) && y2 - (this.helperProportions.height / 2) < b)
            }
        },
        _intersectsWithPointer: function(item) {
            var verticalDirection, horizontalDirection, isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
                isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
                isOverElement = isOverElementHeight && isOverElementWidth;
            if (!isOverElement) {
                return false
            }
            verticalDirection = this._getDragVerticalDirection();
            horizontalDirection = this._getDragHorizontalDirection();
            return this.floating ? ((horizontalDirection === "right" || verticalDirection === "down") ? 2 : 1) : (verticalDirection && (verticalDirection === "down" ? 2 : 1))
        },
        _intersectsWithSides: function(item) {
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height / 2), item.height),
                isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width / 2), item.width),
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();
            if (this.floating && horizontalDirection) {
                return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf))
            } else {
                return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf))
            }
        },
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta !== 0 && (delta > 0 ? "down" : "up")
        },
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta !== 0 && (delta > 0 ? "right" : "left")
        },
        refresh: function(event) {
            this._refreshItems(event);
            this._setHandleClassName();
            this.refreshPositions();
            return this
        },
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith
        },
        _getItemsAsjQuery: function(connected) {
            var i, j, cur, inst, items = [],
                queries = [],
                connectWith = this._connectWith();
            if (connectWith && connected) {
                for (i = connectWith.length - 1; i >= 0; i--) {
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--) {
                        inst = $.data(cur[j], this.widgetFullName);
                        if (inst && inst !== this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst])
                        }
                    }
                }
            }
            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

            function addItems() {
                items.push(this)
            }
            for (i = queries.length - 1; i >= 0; i--) {
                queries[i][0].each(addItems)
            }
            return $(items)
        },
        _removeCurrentsFromItems: function() {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = $.grep(this.items, function(item) {
                for (var j = 0; j < list.length; j++) {
                    if (list[j] === item.item[0]) {
                        return false
                    }
                }
                return true
            })
        },
        _refreshItems: function(event) {
            this.items = [];
            this.containers = [this];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items,
                queries = [
                    [$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                        item: this.currentItem
                    }) : $(this.options.items, this.element), this]
                ],
                connectWith = this._connectWith();
            if (connectWith && this.ready) {
                for (i = connectWith.length - 1; i >= 0; i--) {
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--) {
                        inst = $.data(cur[j], this.widgetFullName);
                        if (inst && inst !== this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                                item: this.currentItem
                            }) : $(inst.options.items, inst.element), inst]);
                            this.containers.push(inst)
                        }
                    }
                }
            }
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
                for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                    item = $(_queries[j]);
                    item.data(this.widgetName + "-item", targetData);
                    items.push({
                        item: item,
                        instance: targetData,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    })
                }
            }
        },
        refreshPositions: function(fast) {
            this.floating = this.items.length ? this.options.axis === "x" || this._isFloating(this.items[0].item) : false;
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset()
            }
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
                    continue
                }
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight()
                }
                p = t.offset();
                item.left = p.left;
                item.top = p.top
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this)
            } else {
                for (i = this.containers.length - 1; i >= 0; i--) {
                    p = this.containers[i].element.offset();
                    this.containers[i].containerCache.left = p.left;
                    this.containers[i].containerCache.top = p.top;
                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight()
                }
            }
            return this
        },
        _createPlaceholder: function(that) {
            that = that || this;
            var className, o = that.options;
            if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    element: function() {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(),
                            element = $("<" + nodeName + ">", that.document[0]);
                        that._addClass(element, "ui-sortable-placeholder", className || that.currentItem[0].className)._removeClass(element, "ui-sortable-helper");
                        if (nodeName === "tbody") {
                            that._createTrPlaceholder(that.currentItem.find("tr").eq(0), $("<tr>", that.document[0]).appendTo(element))
                        } else {
                            if (nodeName === "tr") {
                                that._createTrPlaceholder(that.currentItem, element)
                            } else {
                                if (nodeName === "img") {
                                    element.attr("src", that.currentItem.attr("src"))
                                }
                            }
                        }
                        if (!className) {
                            element.css("visibility", "hidden")
                        }
                        return element
                    },
                    update: function(container, p) {
                        if (className && !o.forcePlaceholderSize) {
                            return
                        }
                        if (!p.height()) {
                            p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10))
                        }
                        if (!p.width()) {
                            p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10))
                        }
                    }
                }
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
            that.currentItem.after(that.placeholder);
            o.placeholder.update(that, that.placeholder)
        },
        _createTrPlaceholder: function(sourceTr, targetTr) {
            var that = this;
            sourceTr.children().each(function() {
                $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(targetTr)
            })
        },
        _contactContainers: function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null,
                innermostIndex = null;
            for (i = this.containers.length - 1; i >= 0; i--) {
                if ($.contains(this.currentItem[0], this.containers[i].element[0])) {
                    continue
                }
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
                        continue
                    }
                    innermostContainer = this.containers[i];
                    innermostIndex = i
                } else {
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", event, this._uiHash(this));
                        this.containers[i].containerCache.over = 0
                    }
                }
            }
            if (!innermostContainer) {
                return
            }
            if (this.containers.length === 1) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1
                }
            } else {
                dist = 10000;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || this._isFloating(this.currentItem);
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                axis = floating ? "pageX" : "pageY";
                for (j = this.items.length - 1; j >= 0; j--) {
                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
                        continue
                    }
                    if (this.items[j].item[0] === this.currentItem[0]) {
                        continue
                    }
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = false;
                    if (event[axis] - cur > this.items[j][sizeProperty] / 2) {
                        nearBottom = true
                    }
                    if (Math.abs(event[axis] - cur) < dist) {
                        dist = Math.abs(event[axis] - cur);
                        itemWithLeastDistance = this.items[j];
                        this.direction = nearBottom ? "up" : "down"
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) {
                    return
                }
                if (this.currentContainer === this.containers[innermostIndex]) {
                    if (!this.currentContainer.containerCache.over) {
                        this.containers[innermostIndex]._trigger("over", event, this._uiHash());
                        this.currentContainer.containerCache.over = 1
                    }
                    return
                }
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1
            }
        },
        _createHelper: function(event) {
            var o = this.options,
                helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);
            if (!helper.parents("body").length) {
                $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0])
            }
            if (helper[0] === this.currentItem[0]) {
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css("position"),
                    top: this.currentItem.css("top"),
                    left: this.currentItem.css("left")
                }
            }
            if (!helper[0].style.width || o.forceHelperSize) {
                helper.width(this.currentItem.width())
            }
            if (!helper[0].style.height || o.forceHelperSize) {
                helper.height(this.currentItem.height())
            }
            return helper
        },
        _adjustOffsetFromHelper: function(obj) {
            if (typeof obj === "string") {
                obj = obj.split(" ")
            }
            if ($.isArray(obj)) {
                obj = {
                    left: +obj[0],
                    top: +obj[1] || 0
                }
            }
            if ("left" in obj) {
                this.offset.click.left = obj.left + this.margins.left
            }
            if ("right" in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left
            }
            if ("top" in obj) {
                this.offset.click.top = obj.top + this.margins.top
            }
            if ("bottom" in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top
            }
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if (this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] === this.document[0].body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
                po = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition === "relative") {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {
                    top: 0,
                    left: 0
                }
            }
        },
        _cacheMargins: function() {
            this.margins = {
                left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0),
                top: (parseInt(this.currentItem.css("marginTop"), 10) || 0)
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var ce, co, over, o = this.options;
            if (o.containment === "parent") {
                o.containment = this.helper[0].parentNode
            }
            if (o.containment === "document" || o.containment === "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === "document" ? (this.document.height() || document.body.parentNode.scrollHeight) : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!(/^(document|window|parent)$/).test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = ($(ce).css("overflow") !== "hidden");
                this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        },
        _convertPositionTo: function(d, pos) {
            if (!pos) {
                pos = this.position
            }
            var mod = d === "absolute" ? 1 : -1,
                scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            return {
                top: (pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ((this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)),
                left: (pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ((this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))
            }
        },
        _generatePosition: function(event) {
            var top, left, o = this.options,
                pageX = event.pageX,
                pageY = event.pageY,
                scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            if (this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset()
            }
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) {
                        pageX = this.containment[0] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top < this.containment[1]) {
                        pageY = this.containment[1] + this.offset.click.top
                    }
                    if (event.pageX - this.offset.click.left > this.containment[2]) {
                        pageX = this.containment[2] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top > this.containment[3]) {
                        pageY = this.containment[3] + this.offset.click.top
                    }
                }
                if (o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? ((top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? ((left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left
                }
            }
            return {
                top: (pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ((this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))),
                left: (pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ((this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))
            }
        },
        _rearrange: function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function() {
                if (counter === this.counter) {
                    this.refreshPositions(!hardRefresh)
                }
            })
        },
        _clear: function(event, noPropagation) {
            this.reverting = false;
            var i, delayedTriggers = [];
            if (!this._noFinalSort && this.currentItem.parent().length) {
                this.placeholder.before(this.currentItem)
            }
            this._noFinalSort = null;
            if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) {
                    if (this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
                        this._storedCSS[i] = ""
                    }
                }
                this.currentItem.css(this._storedCSS);
                this._removeClass(this.currentItem, "ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            if (this.fromOutside && !noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("receive", event, this._uiHash(this.fromOutside))
                })
            }
            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("update", event, this._uiHash())
                })
            }
            if (this !== this.currentContainer) {
                if (!noPropagation) {
                    delayedTriggers.push(function(event) {
                        this._trigger("remove", event, this._uiHash())
                    });
                    delayedTriggers.push((function(c) {
                        return function(event) {
                            c._trigger("receive", event, this._uiHash(this))
                        }
                    }).call(this, this.currentContainer));
                    delayedTriggers.push((function(c) {
                        return function(event) {
                            c._trigger("update", event, this._uiHash(this))
                        }
                    }).call(this, this.currentContainer))
                }
            }

            function delayEvent(type, instance, container) {
                return function(event) {
                    container._trigger(type, event, instance._uiHash(instance))
                }
            }
            for (i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) {
                    delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]))
                }
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push(delayEvent("out", this, this.containers[i]));
                    this.containers[i].containerCache.over = 0
                }
            }
            if (this.storedCursor) {
                this.document.find("body").css("cursor", this.storedCursor);
                this.storedStylesheet.remove()
            }
            if (this._storedOpacity) {
                this.helper.css("opacity", this._storedOpacity)
            }
            if (this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex)
            }
            this.dragging = false;
            if (!noPropagation) {
                this._trigger("beforeStop", event, this._uiHash())
            }
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (!this.cancelHelperRemoval) {
                if (this.helper[0] !== this.currentItem[0]) {
                    this.helper.remove()
                }
                this.helper = null
            }
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) {
                    delayedTriggers[i].call(this, event)
                }
                this._trigger("stop", event, this._uiHash())
            }
            this.fromOutside = false;
            return !this.cancelHelperRemoval
        },
        _trigger: function() {
            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel()
            }
        },
        _uiHash: function(_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            }
        }
    });
    /*!
     * jQuery UI Spinner 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;

    function spinnerModifer(fn) {
        return function() {
            var previous = this.element.val();
            fn.apply(this, arguments);
            this._refresh();
            if (previous !== this.element.val()) {
                this._trigger("change")
            }
        }
    }
    $.widget("ui.spinner", {
        version: "1.12.1",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            classes: {
                "ui-spinner": "ui-corner-all",
                "ui-spinner-down": "ui-corner-br",
                "ui-spinner-up": "ui-corner-tr"
            },
            culture: null,
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            incremental: true,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function() {
            this._setOption("max", this.options.max);
            this._setOption("min", this.options.min);
            this._setOption("step", this.options.step);
            if (this.value() !== "") {
                this._value(this.element.val(), true)
            }
            this._draw();
            this._on(this._events);
            this._refresh();
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete")
                }
            })
        },
        _getCreateOptions: function() {
            var options = this._super();
            var element = this.element;
            $.each(["min", "max", "step"], function(i, option) {
                var value = element.attr(option);
                if (value != null && value.length) {
                    options[option] = value
                }
            });
            return options
        },
        _events: {
            keydown: function(event) {
                if (this._start(event) && this._keydown(event)) {
                    event.preventDefault()
                }
            },
            keyup: "_stop",
            focus: function() {
                this.previous = this.element.val()
            },
            blur: function(event) {
                if (this.cancelBlur) {
                    delete this.cancelBlur;
                    return
                }
                this._stop();
                this._refresh();
                if (this.previous !== this.element.val()) {
                    this._trigger("change", event)
                }
            },
            mousewheel: function(event, delta) {
                if (!delta) {
                    return
                }
                if (!this.spinning && !this._start(event)) {
                    return false
                }
                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                clearTimeout(this.mousewheelTimer);
                this.mousewheelTimer = this._delay(function() {
                    if (this.spinning) {
                        this._stop(event)
                    }
                }, 100);
                event.preventDefault()
            },
            "mousedown .ui-spinner-button": function(event) {
                var previous;
                previous = this.element[0] === $.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val();

                function checkFocus() {
                    var isActive = this.element[0] === $.ui.safeActiveElement(this.document[0]);
                    if (!isActive) {
                        this.element.trigger("focus");
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous
                        })
                    }
                }
                event.preventDefault();
                checkFocus.call(this);
                this.cancelBlur = true;
                this._delay(function() {
                    delete this.cancelBlur;
                    checkFocus.call(this)
                });
                if (this._start(event) === false) {
                    return
                }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event)
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(event) {
                if (!$(event.currentTarget).hasClass("ui-state-active")) {
                    return
                }
                if (this._start(event) === false) {
                    return false
                }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event)
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _enhance: function() {
            this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>")
        },
        _draw: function() {
            this._enhance();
            this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content");
            this._addClass("ui-spinner-input");
            this.element.attr("role", "spinbutton");
            this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", true).button({
                classes: {
                    "ui-button": ""
                }
            });
            this._removeClass(this.buttons, "ui-corner-all");
            this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up");
            this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down");
            this.buttons.first().button({
                icon: this.options.icons.up,
                showLabel: false
            });
            this.buttons.last().button({
                icon: this.options.icons.down,
                showLabel: false
            });
            if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * 0.5) && this.uiSpinner.height() > 0) {
                this.uiSpinner.height(this.uiSpinner.height())
            }
        },
        _keydown: function(event) {
            var options = this.options,
                keyCode = $.ui.keyCode;
            switch (event.keyCode) {
                case keyCode.UP:
                    this._repeat(null, 1, event);
                    return true;
                case keyCode.DOWN:
                    this._repeat(null, -1, event);
                    return true;
                case keyCode.PAGE_UP:
                    this._repeat(null, options.page, event);
                    return true;
                case keyCode.PAGE_DOWN:
                    this._repeat(null, -options.page, event);
                    return true
            }
            return false
        },
        _start: function(event) {
            if (!this.spinning && this._trigger("start", event) === false) {
                return false
            }
            if (!this.counter) {
                this.counter = 1
            }
            this.spinning = true;
            return true
        },
        _repeat: function(i, steps, event) {
            i = i || 500;
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                this._repeat(40, steps, event)
            }, i);
            this._spin(steps * this.options.step, event)
        },
        _spin: function(step, event) {
            var value = this.value() || 0;
            if (!this.counter) {
                this.counter = 1
            }
            value = this._adjustValue(value + step * this._increment(this.counter));
            if (!this.spinning || this._trigger("spin", event, {
                    value: value
                }) !== false) {
                this._value(value);
                this.counter++
            }
        },
        _increment: function(i) {
            var incremental = this.options.incremental;
            if (incremental) {
                return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1)
            }
            return 1
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min))
            }
            return precision
        },
        _precisionOf: function(num) {
            var str = num.toString(),
                decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1
        },
        _adjustValue: function(value) {
            var base, aboveMin, options = this.options;
            base = options.min !== null ? options.min : 0;
            aboveMin = value - base;
            aboveMin = Math.round(aboveMin / options.step) * options.step;
            value = base + aboveMin;
            value = parseFloat(value.toFixed(this._precision()));
            if (options.max !== null && value > options.max) {
                return options.max
            }
            if (options.min !== null && value < options.min) {
                return options.min
            }
            return value
        },
        _stop: function(event) {
            if (!this.spinning) {
                return
            }
            clearTimeout(this.timer);
            clearTimeout(this.mousewheelTimer);
            this.counter = 0;
            this.spinning = false;
            this._trigger("stop", event)
        },
        _setOption: function(key, value) {
            var prevValue, first, last;
            if (key === "culture" || key === "numberFormat") {
                prevValue = this._parse(this.element.val());
                this.options[key] = value;
                this.element.val(this._format(prevValue));
                return
            }
            if (key === "max" || key === "min" || key === "step") {
                if (typeof value === "string") {
                    value = this._parse(value)
                }
            }
            if (key === "icons") {
                first = this.buttons.first().find(".ui-icon");
                this._removeClass(first, null, this.options.icons.up);
                this._addClass(first, null, value.up);
                last = this.buttons.last().find(".ui-icon");
                this._removeClass(last, null, this.options.icons.down);
                this._addClass(last, null, value.down)
            }
            this._super(key, value)
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!value);
            this.element.prop("disabled", !!value);
            this.buttons.button(value ? "disable" : "enable")
        },
        _setOptions: spinnerModifer(function(options) {
            this._super(options)
        }),
        _parse: function(val) {
            if (typeof val === "string" && val !== "") {
                val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val
            }
            return val === "" || isNaN(val) ? null : val
        },
        _format: function(value) {
            if (value === "") {
                return ""
            }
            return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value
        },
        _refresh: function() {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._parse(this.element.val())
            })
        },
        isValid: function() {
            var value = this.value();
            if (value === null) {
                return false
            }
            return value === this._adjustValue(value)
        },
        _value: function(value, allowAny) {
            var parsed;
            if (value !== "") {
                parsed = this._parse(value);
                if (parsed !== null) {
                    if (!allowAny) {
                        parsed = this._adjustValue(parsed)
                    }
                    value = this._format(parsed)
                }
            }
            this.element.val(value);
            this._refresh()
        },
        _destroy: function() {
            this.element.prop("disabled", false).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow");
            this.uiSpinner.replaceWith(this.element)
        },
        stepUp: spinnerModifer(function(steps) {
            this._stepUp(steps)
        }),
        _stepUp: function(steps) {
            if (this._start()) {
                this._spin((steps || 1) * this.options.step);
                this._stop()
            }
        },
        stepDown: spinnerModifer(function(steps) {
            this._stepDown(steps)
        }),
        _stepDown: function(steps) {
            if (this._start()) {
                this._spin((steps || 1) * -this.options.step);
                this._stop()
            }
        },
        pageUp: spinnerModifer(function(pages) {
            this._stepUp((pages || 1) * this.options.page)
        }),
        pageDown: spinnerModifer(function(pages) {
            this._stepDown((pages || 1) * this.options.page)
        }),
        value: function(newVal) {
            if (!arguments.length) {
                return this._parse(this.element.val())
            }
            spinnerModifer(this._value).call(this, newVal)
        },
        widget: function() {
            return this.uiSpinner
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.spinner", $.ui.spinner, {
            _enhance: function() {
                this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())
            },
            _uiSpinnerHtml: function() {
                return "<span>"
            },
            _buttonHtml: function() {
                return "<a></a><a></a>"
            }
        })
    }
    var widgetsSpinner = $.ui.spinner;
    /*!
     * jQuery UI Tabs 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.tabs", {
        version: "1.12.1",
        delay: 300,
        options: {
            active: null,
            classes: {
                "ui-tabs": "ui-corner-all",
                "ui-tabs-nav": "ui-corner-all",
                "ui-tabs-panel": "ui-corner-bottom",
                "ui-tabs-tab": "ui-corner-top"
            },
            collapsible: false,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: (function() {
            var rhash = /#.*$/;
            return function(anchor) {
                var anchorUrl, locationUrl;
                anchorUrl = anchor.href.replace(rhash, "");
                locationUrl = location.href.replace(rhash, "");
                try {
                    anchorUrl = decodeURIComponent(anchorUrl)
                } catch (error) {}
                try {
                    locationUrl = decodeURIComponent(locationUrl)
                } catch (error) {}
                return anchor.hash.length > 1 && anchorUrl === locationUrl
            }
        })(),
        _create: function() {
            var that = this,
                options = this.options;
            this.running = false;
            this._addClass("ui-tabs", "ui-widget ui-widget-content");
            this._toggleClass("ui-tabs-collapsible", null, options.collapsible);
            this._processTabs();
            options.active = this._initialActive();
            if ($.isArray(options.disabled)) {
                options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                    return that.tabs.index(li)
                }))).sort()
            }
            if (this.options.active !== false && this.anchors.length) {
                this.active = this._findActive(options.active)
            } else {
                this.active = $()
            }
            this._refresh();
            if (this.active.length) {
                this.load(options.active)
            }
        },
        _initialActive: function() {
            var active = this.options.active,
                collapsible = this.options.collapsible,
                locationHash = location.hash.substring(1);
            if (active === null) {
                if (locationHash) {
                    this.tabs.each(function(i, tab) {
                        if ($(tab).attr("aria-controls") === locationHash) {
                            active = i;
                            return false
                        }
                    })
                }
                if (active === null) {
                    active = this.tabs.index(this.tabs.filter(".ui-tabs-active"))
                }
                if (active === null || active === -1) {
                    active = this.tabs.length ? 0 : false
                }
            }
            if (active !== false) {
                active = this.tabs.index(this.tabs.eq(active));
                if (active === -1) {
                    active = collapsible ? false : 0
                }
            }
            if (!collapsible && active === false && this.anchors.length) {
                active = 0
            }
            return active
        },
        _getCreateEventData: function() {
            return {
                tab: this.active,
                panel: !this.active.length ? $() : this._getPanelForTab(this.active)
            }
        },
        _tabKeydown: function(event) {
            var focusedTab = $($.ui.safeActiveElement(this.document[0])).closest("li"),
                selectedIndex = this.tabs.index(focusedTab),
                goingForward = true;
            if (this._handlePageNav(event)) {
                return
            }
            switch (event.keyCode) {
                case $.ui.keyCode.RIGHT:
                case $.ui.keyCode.DOWN:
                    selectedIndex++;
                    break;
                case $.ui.keyCode.UP:
                case $.ui.keyCode.LEFT:
                    goingForward = false;
                    selectedIndex--;
                    break;
                case $.ui.keyCode.END:
                    selectedIndex = this.anchors.length - 1;
                    break;
                case $.ui.keyCode.HOME:
                    selectedIndex = 0;
                    break;
                case $.ui.keyCode.SPACE:
                    event.preventDefault();
                    clearTimeout(this.activating);
                    this._activate(selectedIndex);
                    return;
                case $.ui.keyCode.ENTER:
                    event.preventDefault();
                    clearTimeout(this.activating);
                    this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                    return;
                default:
                    return
            }
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);
            if (!event.ctrlKey && !event.metaKey) {
                focusedTab.attr("aria-selected", "false");
                this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                this.activating = this._delay(function() {
                    this.option("active", selectedIndex)
                }, this.delay)
            }
        },
        _panelKeydown: function(event) {
            if (this._handlePageNav(event)) {
                return
            }
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.trigger("focus")
            }
        },
        _handlePageNav: function(event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, false));
                return true
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, true));
                return true
            }
        },
        _findNextTab: function(index, goingForward) {
            var lastTabIndex = this.tabs.length - 1;

            function constrain() {
                if (index > lastTabIndex) {
                    index = 0
                }
                if (index < 0) {
                    index = lastTabIndex
                }
                return index
            }
            while ($.inArray(constrain(), this.options.disabled) !== -1) {
                index = goingForward ? index + 1 : index - 1
            }
            return index
        },
        _focusNextTab: function(index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).trigger("focus");
            return index
        },
        _setOption: function(key, value) {
            if (key === "active") {
                this._activate(value);
                return
            }
            this._super(key, value);
            if (key === "collapsible") {
                this._toggleClass("ui-tabs-collapsible", null, value);
                if (!value && this.options.active === false) {
                    this._activate(0)
                }
            }
            if (key === "event") {
                this._setupEvents(value)
            }
            if (key === "heightStyle") {
                this._setupHeightStyle(value)
            }
        },
        _sanitizeSelector: function(hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : ""
        },
        refresh: function() {
            var options = this.options,
                lis = this.tablist.children(":has(a[href])");
            options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                return lis.index(tab)
            });
            this._processTabs();
            if (options.active === false || !this.anchors.length) {
                options.active = false;
                this.active = $()
            } else {
                if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                    if (this.tabs.length === options.disabled.length) {
                        options.active = false;
                        this.active = $()
                    } else {
                        this._activate(this._findNextTab(Math.max(0, options.active - 1), false))
                    }
                } else {
                    options.active = this.tabs.index(this.active)
                }
            }
            this._refresh()
        },
        _refresh: function() {
            this._setOptionDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);
            this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            });
            this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-hidden": "true"
            });
            if (!this.active.length) {
                this.tabs.eq(0).attr("tabIndex", 0)
            } else {
                this.active.attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                });
                this._addClass(this.active, "ui-tabs-active", "ui-state-active");
                this._getPanelForTab(this.active).show().attr({
                    "aria-hidden": "false"
                })
            }
        },
        _processTabs: function() {
            var that = this,
                prevTabs = this.tabs,
                prevAnchors = this.anchors,
                prevPanels = this.panels;
            this.tablist = this._getList().attr("role", "tablist");
            this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header");
            this.tablist.on("mousedown" + this.eventNamespace, "> li", function(event) {
                if ($(this).is(".ui-state-disabled")) {
                    event.preventDefault()
                }
            }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
                if ($(this).closest("li").is(".ui-state-disabled")) {
                    this.blur()
                }
            });
            this.tabs = this.tablist.find("> li:has(a[href])").attr({
                role: "tab",
                tabIndex: -1
            });
            this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default");
            this.anchors = this.tabs.map(function() {
                return $("a", this)[0]
            }).attr({
                role: "presentation",
                tabIndex: -1
            });
            this._addClass(this.anchors, "ui-tabs-anchor");
            this.panels = $();
            this.anchors.each(function(i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"),
                    tab = $(anchor).closest("li"),
                    originalAriaControls = tab.attr("aria-controls");
                if (that._isLocal(anchor)) {
                    selector = anchor.hash;
                    panelId = selector.substring(1);
                    panel = that.element.find(that._sanitizeSelector(selector))
                } else {
                    panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
                    selector = "#" + panelId;
                    panel = that.element.find(selector);
                    if (!panel.length) {
                        panel = that._createPanel(panelId);
                        panel.insertAfter(that.panels[i - 1] || that.tablist)
                    }
                    panel.attr("aria-live", "polite")
                }
                if (panel.length) {
                    that.panels = that.panels.add(panel)
                }
                if (originalAriaControls) {
                    tab.data("ui-tabs-aria-controls", originalAriaControls)
                }
                tab.attr({
                    "aria-controls": panelId,
                    "aria-labelledby": anchorId
                });
                panel.attr("aria-labelledby", anchorId)
            });
            this.panels.attr("role", "tabpanel");
            this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content");
            if (prevTabs) {
                this._off(prevTabs.not(this.tabs));
                this._off(prevAnchors.not(this.anchors));
                this._off(prevPanels.not(this.panels))
            }
        },
        _getList: function() {
            return this.tablist || this.element.find("ol, ul").eq(0)
        },
        _createPanel: function(id) {
            return $("<div>").attr("id", id).data("ui-tabs-destroy", true)
        },
        _setOptionDisabled: function(disabled) {
            var currentItem, li, i;
            if ($.isArray(disabled)) {
                if (!disabled.length) {
                    disabled = false
                } else {
                    if (disabled.length === this.anchors.length) {
                        disabled = true
                    }
                }
            }
            for (i = 0;
                (li = this.tabs[i]); i++) {
                currentItem = $(li);
                if (disabled === true || $.inArray(i, disabled) !== -1) {
                    currentItem.attr("aria-disabled", "true");
                    this._addClass(currentItem, null, "ui-state-disabled")
                } else {
                    currentItem.removeAttr("aria-disabled");
                    this._removeClass(currentItem, null, "ui-state-disabled")
                }
            }
            this.options.disabled = disabled;
            this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, disabled === true)
        },
        _setupEvents: function(event) {
            var events = {};
            if (event) {
                $.each(event.split(" "), function(index, eventName) {
                    events[eventName] = "_eventHandler"
                })
            }
            this._off(this.anchors.add(this.tabs).add(this.panels));
            this._on(true, this.anchors, {
                click: function(event) {
                    event.preventDefault()
                }
            });
            this._on(this.anchors, events);
            this._on(this.tabs, {
                keydown: "_tabKeydown"
            });
            this._on(this.panels, {
                keydown: "_panelKeydown"
            });
            this._focusable(this.tabs);
            this._hoverable(this.tabs)
        },
        _setupHeightStyle: function(heightStyle) {
            var maxHeight, parent = this.element.parent();
            if (heightStyle === "fill") {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this),
                        position = elem.css("position");
                    if (position === "absolute" || position === "fixed") {
                        return
                    }
                    maxHeight -= elem.outerHeight(true)
                });
                this.element.children().not(this.panels).each(function() {
                    maxHeight -= $(this).outerHeight(true)
                });
                this.panels.each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()))
                }).css("overflow", "auto")
            } else {
                if (heightStyle === "auto") {
                    maxHeight = 0;
                    this.panels.each(function() {
                        maxHeight = Math.max(maxHeight, $(this).height("").height())
                    }).height(maxHeight)
                }
            }
        },
        _eventHandler: function(event) {
            var options = this.options,
                active = this.active,
                anchor = $(event.currentTarget),
                tab = anchor.closest("li"),
                clickedIsActive = tab[0] === active[0],
                collapsing = clickedIsActive && options.collapsible,
                toShow = collapsing ? $() : this._getPanelForTab(tab),
                toHide = !active.length ? $() : this._getPanelForTab(active),
                eventData = {
                    oldTab: active,
                    oldPanel: toHide,
                    newTab: collapsing ? $() : tab,
                    newPanel: toShow
                };
            event.preventDefault();
            if (tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || (clickedIsActive && !options.collapsible) || (this._trigger("beforeActivate", event, eventData) === false)) {
                return
            }
            options.active = collapsing ? false : this.tabs.index(tab);
            this.active = clickedIsActive ? $() : tab;
            if (this.xhr) {
                this.xhr.abort()
            }
            if (!toHide.length && !toShow.length) {
                $.error("jQuery UI Tabs: Mismatching fragment identifier.")
            }
            if (toShow.length) {
                this.load(this.tabs.index(tab), event)
            }
            this._toggle(event, eventData)
        },
        _toggle: function(event, eventData) {
            var that = this,
                toShow = eventData.newPanel,
                toHide = eventData.oldPanel;
            this.running = true;

            function complete() {
                that.running = false;
                that._trigger("activate", event, eventData)
            }

            function show() {
                that._addClass(eventData.newTab.closest("li"), "ui-tabs-active", "ui-state-active");
                if (toShow.length && that.options.show) {
                    that._show(toShow, that.options.show, complete)
                } else {
                    toShow.show();
                    complete()
                }
            }
            if (toHide.length && this.options.hide) {
                this._hide(toHide, this.options.hide, function() {
                    that._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active");
                    show()
                })
            } else {
                this._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active");
                toHide.hide();
                show()
            }
            toHide.attr("aria-hidden", "true");
            eventData.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            });
            if (toShow.length && toHide.length) {
                eventData.oldTab.attr("tabIndex", -1)
            } else {
                if (toShow.length) {
                    this.tabs.filter(function() {
                        return $(this).attr("tabIndex") === 0
                    }).attr("tabIndex", -1)
                }
            }
            toShow.attr("aria-hidden", "false");
            eventData.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            })
        },
        _activate: function(index) {
            var anchor, active = this._findActive(index);
            if (active[0] === this.active[0]) {
                return
            }
            if (!active.length) {
                active = this.active
            }
            anchor = active.find(".ui-tabs-anchor")[0];
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            })
        },
        _findActive: function(index) {
            return index === false ? $() : this.tabs.eq(index)
        },
        _getIndex: function(index) {
            if (typeof index === "string") {
                index = this.anchors.index(this.anchors.filter("[href$='" + $.ui.escapeSelector(index) + "']"))
            }
            return index
        },
        _destroy: function() {
            if (this.xhr) {
                this.xhr.abort()
            }
            this.tablist.removeAttr("role").off(this.eventNamespace);
            this.anchors.removeAttr("role tabIndex").removeUniqueId();
            this.tabs.add(this.panels).each(function() {
                if ($.data(this, "ui-tabs-destroy")) {
                    $(this).remove()
                } else {
                    $(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")
                }
            });
            this.tabs.each(function() {
                var li = $(this),
                    prev = li.data("ui-tabs-aria-controls");
                if (prev) {
                    li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls")
                } else {
                    li.removeAttr("aria-controls")
                }
            });
            this.panels.show();
            if (this.options.heightStyle !== "content") {
                this.panels.css("height", "")
            }
        },
        enable: function(index) {
            var disabled = this.options.disabled;
            if (disabled === false) {
                return
            }
            if (index === undefined) {
                disabled = false
            } else {
                index = this._getIndex(index);
                if ($.isArray(disabled)) {
                    disabled = $.map(disabled, function(num) {
                        return num !== index ? num : null
                    })
                } else {
                    disabled = $.map(this.tabs, function(li, num) {
                        return num !== index ? num : null
                    })
                }
            }
            this._setOptionDisabled(disabled)
        },
        disable: function(index) {
            var disabled = this.options.disabled;
            if (disabled === true) {
                return
            }
            if (index === undefined) {
                disabled = true
            } else {
                index = this._getIndex(index);
                if ($.inArray(index, disabled) !== -1) {
                    return
                }
                if ($.isArray(disabled)) {
                    disabled = $.merge([index], disabled).sort()
                } else {
                    disabled = [index]
                }
            }
            this._setOptionDisabled(disabled)
        },
        load: function(index, event) {
            index = this._getIndex(index);
            var that = this,
                tab = this.tabs.eq(index),
                anchor = tab.find(".ui-tabs-anchor"),
                panel = this._getPanelForTab(tab),
                eventData = {
                    tab: tab,
                    panel: panel
                },
                complete = function(jqXHR, status) {
                    if (status === "abort") {
                        that.panels.stop(false, true)
                    }
                    that._removeClass(tab, "ui-tabs-loading");
                    panel.removeAttr("aria-busy");
                    if (jqXHR === that.xhr) {
                        delete that.xhr
                    }
                };
            if (this._isLocal(anchor[0])) {
                return
            }
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
            if (this.xhr && this.xhr.statusText !== "canceled") {
                this._addClass(tab, "ui-tabs-loading");
                panel.attr("aria-busy", "true");
                this.xhr.done(function(response, status, jqXHR) {
                    setTimeout(function() {
                        panel.html(response);
                        that._trigger("load", event, eventData);
                        complete(jqXHR, status)
                    }, 1)
                }).fail(function(jqXHR, status) {
                    setTimeout(function() {
                        complete(jqXHR, status)
                    }, 1)
                })
            }
        },
        _ajaxSettings: function(anchor, event, eventData) {
            var that = this;
            return {
                url: anchor.attr("href").replace(/#.*$/, ""),
                beforeSend: function(jqXHR, settings) {
                    return that._trigger("beforeLoad", event, $.extend({
                        jqXHR: jqXHR,
                        ajaxSettings: settings
                    }, eventData))
                }
            }
        },
        _getPanelForTab: function(tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id))
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.tabs", $.ui.tabs, {
            _processTabs: function() {
                this._superApply(arguments);
                this._addClass(this.tabs, "ui-tab")
            }
        })
    }
    var widgetsTabs = $.ui.tabs;
    /*!
     * jQuery UI Tooltip 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    ;
    $.widget("ui.tooltip", {
        version: "1.12.1",
        options: {
            classes: {
                "ui-tooltip": "ui-corner-all ui-widget-shadow"
            },
            content: function() {
                var title = $(this).attr("title") || "";
                return $("<a>").text(title).html()
            },
            hide: true,
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: true,
            track: false,
            close: null,
            open: null
        },
        _addDescribedBy: function(elem, id) {
            var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
            describedby.push(id);
            elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")))
        },
        _removeDescribedBy: function(elem) {
            var id = elem.data("ui-tooltip-id"),
                describedby = (elem.attr("aria-describedby") || "").split(/\s+/),
                index = $.inArray(id, describedby);
            if (index !== -1) {
                describedby.splice(index, 1)
            }
            elem.removeData("ui-tooltip-id");
            describedby = $.trim(describedby.join(" "));
            if (describedby) {
                elem.attr("aria-describedby", describedby)
            } else {
                elem.removeAttr("aria-describedby")
            }
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            });
            this.tooltips = {};
            this.parents = {};
            this.liveRegion = $("<div>").attr({
                role: "log",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).appendTo(this.document[0].body);
            this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");
            this.disabledTitles = $([])
        },
        _setOption: function(key, value) {
            var that = this;
            this._super(key, value);
            if (key === "content") {
                $.each(this.tooltips, function(id, tooltipData) {
                    that._updateContent(tooltipData.element)
                })
            }
        },
        _setOptionDisabled: function(value) {
            this[value ? "_disable" : "_enable"]()
        },
        _disable: function() {
            var that = this;
            $.each(this.tooltips, function(id, tooltipData) {
                var event = $.Event("blur");
                event.target = event.currentTarget = tooltipData.element[0];
                that.close(event, true)
            });
            this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function() {
                var element = $(this);
                if (element.is("[title]")) {
                    return element.data("ui-tooltip-title", element.attr("title")).removeAttr("title")
                }
            }))
        },
        _enable: function() {
            this.disabledTitles.each(function() {
                var element = $(this);
                if (element.data("ui-tooltip-title")) {
                    element.attr("title", element.data("ui-tooltip-title"))
                }
            });
            this.disabledTitles = $([])
        },
        open: function(event) {
            var that = this,
                target = $(event ? event.target : this.element).closest(this.options.items);
            if (!target.length || target.data("ui-tooltip-id")) {
                return
            }
            if (target.attr("title")) {
                target.data("ui-tooltip-title", target.attr("title"))
            }
            target.data("ui-tooltip-open", true);
            if (event && event.type === "mouseover") {
                target.parents().each(function() {
                    var parent = $(this),
                        blurEvent;
                    if (parent.data("ui-tooltip-open")) {
                        blurEvent = $.Event("blur");
                        blurEvent.target = blurEvent.currentTarget = this;
                        that.close(blurEvent, true)
                    }
                    if (parent.attr("title")) {
                        parent.uniqueId();
                        that.parents[this.id] = {
                            element: this,
                            title: parent.attr("title")
                        };
                        parent.attr("title", "")
                    }
                })
            }
            this._registerCloseHandlers(event, target);
            this._updateContent(target, event)
        },
        _updateContent: function(target, event) {
            var content, contentOption = this.options.content,
                that = this,
                eventType = event ? event.type : null;
            if (typeof contentOption === "string" || contentOption.nodeType || contentOption.jquery) {
                return this._open(event, target, contentOption)
            }
            content = contentOption.call(target[0], function(response) {
                that._delay(function() {
                    if (!target.data("ui-tooltip-open")) {
                        return
                    }
                    if (event) {
                        event.type = eventType
                    }
                    this._open(event, target, response)
                })
            });
            if (content) {
                this._open(event, target, content)
            }
        },
        _open: function(event, target, content) {
            var tooltipData, tooltip, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position);
            if (!content) {
                return
            }
            tooltipData = this._find(target);
            if (tooltipData) {
                tooltipData.tooltip.find(".ui-tooltip-content").html(content);
                return
            }
            if (target.is("[title]")) {
                if (event && event.type === "mouseover") {
                    target.attr("title", "")
                } else {
                    target.removeAttr("title")
                }
            }
            tooltipData = this._tooltip(target);
            tooltip = tooltipData.tooltip;
            this._addDescribedBy(target, tooltip.attr("id"));
            tooltip.find(".ui-tooltip-content").html(content);
            this.liveRegion.children().hide();
            a11yContent = $("<div>").html(tooltip.find(".ui-tooltip-content").html());
            a11yContent.removeAttr("name").find("[name]").removeAttr("name");
            a11yContent.removeAttr("id").find("[id]").removeAttr("id");
            a11yContent.appendTo(this.liveRegion);

            function position(event) {
                positionOption.of = event;
                if (tooltip.is(":hidden")) {
                    return
                }
                tooltip.position(positionOption)
            }
            if (this.options.track && event && /^mouse/.test(event.type)) {
                this._on(this.document, {
                    mousemove: position
                });
                position(event)
            } else {
                tooltip.position($.extend({
                    of: target
                }, this.options.position))
            }
            tooltip.hide();
            this._show(tooltip, this.options.show);
            if (this.options.track && this.options.show && this.options.show.delay) {
                delayedShow = this.delayedShow = setInterval(function() {
                    if (tooltip.is(":visible")) {
                        position(positionOption.of);
                        clearInterval(delayedShow)
                    }
                }, $.fx.interval)
            }
            this._trigger("open", event, {
                tooltip: tooltip
            })
        },
        _registerCloseHandlers: function(event, target) {
            var events = {
                keyup: function(event) {
                    if (event.keyCode === $.ui.keyCode.ESCAPE) {
                        var fakeEvent = $.Event(event);
                        fakeEvent.currentTarget = target[0];
                        this.close(fakeEvent, true)
                    }
                }
            };
            if (target[0] !== this.element[0]) {
                events.remove = function() {
                    this._removeTooltip(this._find(target).tooltip)
                }
            }
            if (!event || event.type === "mouseover") {
                events.mouseleave = "close"
            }
            if (!event || event.type === "focusin") {
                events.focusout = "close"
            }
            this._on(true, target, events)
        },
        close: function(event) {
            var tooltip, that = this,
                target = $(event ? event.currentTarget : this.element),
                tooltipData = this._find(target);
            if (!tooltipData) {
                target.removeData("ui-tooltip-open");
                return
            }
            tooltip = tooltipData.tooltip;
            if (tooltipData.closing) {
                return
            }
            clearInterval(this.delayedShow);
            if (target.data("ui-tooltip-title") && !target.attr("title")) {
                target.attr("title", target.data("ui-tooltip-title"))
            }
            this._removeDescribedBy(target);
            tooltipData.hiding = true;
            tooltip.stop(true);
            this._hide(tooltip, this.options.hide, function() {
                that._removeTooltip($(this))
            });
            target.removeData("ui-tooltip-open");
            this._off(target, "mouseleave focusout keyup");
            if (target[0] !== this.element[0]) {
                this._off(target, "remove")
            }
            this._off(this.document, "mousemove");
            if (event && event.type === "mouseleave") {
                $.each(this.parents, function(id, parent) {
                    $(parent.element).attr("title", parent.title);
                    delete that.parents[id]
                })
            }
            tooltipData.closing = true;
            this._trigger("close", event, {
                tooltip: tooltip
            });
            if (!tooltipData.hiding) {
                tooltipData.closing = false
            }
        },
        _tooltip: function(element) {
            var tooltip = $("<div>").attr("role", "tooltip"),
                content = $("<div>").appendTo(tooltip),
                id = tooltip.uniqueId().attr("id");
            this._addClass(content, "ui-tooltip-content");
            this._addClass(tooltip, "ui-tooltip", "ui-widget ui-widget-content");
            tooltip.appendTo(this._appendTo(element));
            return this.tooltips[id] = {
                element: element,
                tooltip: tooltip
            }
        },
        _find: function(target) {
            var id = target.data("ui-tooltip-id");
            return id ? this.tooltips[id] : null
        },
        _removeTooltip: function(tooltip) {
            tooltip.remove();
            delete this.tooltips[tooltip.attr("id")]
        },
        _appendTo: function(target) {
            var element = target.closest(".ui-front, dialog");
            if (!element.length) {
                element = this.document[0].body
            }
            return element
        },
        _destroy: function() {
            var that = this;
            $.each(this.tooltips, function(id, tooltipData) {
                var event = $.Event("blur"),
                    element = tooltipData.element;
                event.target = event.currentTarget = element[0];
                that.close(event, true);
                $("#" + id).remove();
                if (element.data("ui-tooltip-title")) {
                    if (!element.attr("title")) {
                        element.attr("title", element.data("ui-tooltip-title"))
                    }
                    element.removeData("ui-tooltip-title")
                }
            });
            this.liveRegion.remove()
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.tooltip", $.ui.tooltip, {
            options: {
                tooltipClass: null
            },
            _tooltip: function() {
                var tooltipData = this._superApply(arguments);
                if (this.options.tooltipClass) {
                    tooltipData.tooltip.addClass(this.options.tooltipClass)
                }
                return tooltipData
            }
        })
    }
    var widgetsTooltip = $.ui.tooltip
}));
(function($) {
    $.support.fileInput = !(new RegExp("(Android (1\\.[0156]|2\\.[01]))|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1\\.0|2\\.[05]|3\\.0))").test(window.navigator.userAgent) || $('<input type="file">').prop("disabled"));
    $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
    $.support.xhrFormDataFileUpload = !!window.FormData;
    $.support.blobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
    $.widget("blueimp.fileupload", {
        options: {
            dropZone: $(document),
            pasteZone: $(document),
            fileInput: undefined,
            replaceFileInput: true,
            paramName: undefined,
            singleFileUploads: true,
            limitMultiFileUploads: undefined,
            limitMultiFileUploadSize: undefined,
            limitMultiFileUploadSizeOverhead: 512,
            sequentialUploads: false,
            limitConcurrentUploads: undefined,
            forceIframeTransport: false,
            redirect: undefined,
            redirectParamName: undefined,
            postMessage: undefined,
            multipart: true,
            maxChunkSize: undefined,
            uploadedBytes: undefined,
            recalculateProgress: true,
            progressInterval: 100,
            bitrateInterval: 500,
            autoUpload: true,
            messages: {
                uploadedBytes: "Uploaded bytes exceed file size"
            },
            i18n: function(message, context) {
                message = this.messages[message] || message.toString();
                if (context) {
                    $.each(context, function(key, value) {
                        message = message.replace("{" + key + "}", value)
                    })
                }
                return message
            },
            formData: function(form) {
                return form.serializeArray()
            },
            add: function(e, data) {
                if (e.isDefaultPrevented()) {
                    return false
                }
                if (data.autoUpload || (data.autoUpload !== false && $(this).fileupload("option", "autoUpload"))) {
                    data.process().done(function() {
                        data.submit()
                    })
                }
            },
            processData: false,
            contentType: false,
            cache: false
        },
        _specialOptions: ["fileInput", "dropZone", "pasteZone", "multipart", "forceIframeTransport"],
        _blobSlice: $.support.blobSlice && function() {
            var slice = this.slice || this.webkitSlice || this.mozSlice;
            return slice.apply(this, arguments)
        },
        _BitrateTimer: function() {
            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());
            this.loaded = 0;
            this.bitrate = 0;
            this.getBitrate = function(now, loaded, interval) {
                var timeDiff = now - this.timestamp;
                if (!this.bitrate || !interval || timeDiff > interval) {
                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
                    this.loaded = loaded;
                    this.timestamp = now
                }
                return this.bitrate
            }
        },
        _isXHRUpload: function(options) {
            return !options.forceIframeTransport && ((!options.multipart && $.support.xhrFileUpload) || $.support.xhrFormDataFileUpload)
        },
        _getFormData: function(options) {
            var formData;
            if ($.type(options.formData) === "function") {
                return options.formData(options.form)
            }
            if ($.isArray(options.formData)) {
                return options.formData
            }
            if ($.type(options.formData) === "object") {
                formData = [];
                $.each(options.formData, function(name, value) {
                    formData.push({
                        name: name,
                        value: value
                    })
                });
                return formData
            }
            return []
        },
        _getTotal: function(files) {
            var total = 0;
            $.each(files, function(index, file) {
                total += file.size || 1
            });
            return total
        },
        _initProgressObject: function(obj) {
            var progress = {
                loaded: 0,
                total: 0,
                bitrate: 0
            };
            if (obj._progress) {
                $.extend(obj._progress, progress)
            } else {
                obj._progress = progress
            }
        },
        _initResponseObject: function(obj) {
            var prop;
            if (obj._response) {
                for (prop in obj._response) {
                    if (obj._response.hasOwnProperty(prop)) {
                        delete obj._response[prop]
                    }
                }
            } else {
                obj._response = {}
            }
        },
        _onProgress: function(e, data) {
            if (e.lengthComputable) {
                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),
                    loaded;
                if (data._time && data.progressInterval && (now - data._time < data.progressInterval) && e.loaded !== e.total) {
                    return
                }
                data._time = now;
                loaded = Math.floor(e.loaded / e.total * (data.chunkSize || data._progress.total)) + (data.uploadedBytes || 0);
                this._progress.loaded += (loaded - data._progress.loaded);
                this._progress.bitrate = this._bitrateTimer.getBitrate(now, this._progress.loaded, data.bitrateInterval);
                data._progress.loaded = data.loaded = loaded;
                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(now, loaded, data.bitrateInterval);
                this._trigger("progress", $.Event("progress", {
                    delegatedEvent: e
                }), data);
                this._trigger("progressall", $.Event("progressall", {
                    delegatedEvent: e
                }), this._progress)
            }
        },
        _initProgressListener: function(options) {
            var that = this,
                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
            if (xhr.upload) {
                $(xhr.upload).bind("progress", function(e) {
                    var oe = e.originalEvent;
                    e.lengthComputable = oe.lengthComputable;
                    e.loaded = oe.loaded;
                    e.total = oe.total;
                    that._onProgress(e, options)
                });
                options.xhr = function() {
                    return xhr
                }
            }
        },
        _isInstanceOf: function(type, obj) {
            return Object.prototype.toString.call(obj) === "[object " + type + "]"
        },
        _initXHRData: function(options) {
            var that = this,
                formData, file = options.files[0],
                multipart = options.multipart || !$.support.xhrFileUpload,
                paramName = $.type(options.paramName) === "array" ? options.paramName[0] : options.paramName;
            options.headers = $.extend({}, options.headers);
            if (options.contentRange) {
                options.headers["Content-Range"] = options.contentRange
            }
            if (!multipart || options.blob || !this._isInstanceOf("File", file)) {
                options.headers["Content-Disposition"] = 'attachment; filename="' + encodeURI(file.name) + '"'
            }
            if (!multipart) {
                options.contentType = file.type || "application/octet-stream";
                options.data = options.blob || file
            } else {
                if ($.support.xhrFormDataFileUpload) {
                    if (options.postMessage) {
                        formData = this._getFormData(options);
                        if (options.blob) {
                            formData.push({
                                name: paramName,
                                value: options.blob
                            })
                        } else {
                            $.each(options.files, function(index, file) {
                                formData.push({
                                    name: ($.type(options.paramName) === "array" && options.paramName[index]) || paramName,
                                    value: file
                                })
                            })
                        }
                    } else {
                        if (that._isInstanceOf("FormData", options.formData)) {
                            formData = options.formData
                        } else {
                            formData = new FormData();
                            $.each(this._getFormData(options), function(index, field) {
                                formData.append(field.name, field.value)
                            })
                        }
                        if (options.blob) {
                            formData.append(paramName, options.blob, file.name)
                        } else {
                            $.each(options.files, function(index, file) {
                                if (that._isInstanceOf("File", file) || that._isInstanceOf("Blob", file)) {
                                    formData.append(($.type(options.paramName) === "array" && options.paramName[index]) || paramName, file, file.uploadName || file.name)
                                }
                            })
                        }
                    }
                    options.data = formData
                }
            }
            options.blob = null
        },
        _initIframeSettings: function(options) {
            var targetHost = $("<a></a>").prop("href", options.url).prop("host");
            options.dataType = "iframe " + (options.dataType || "");
            options.formData = this._getFormData(options);
            if (options.redirect && targetHost && targetHost !== location.host) {
                options.formData.push({
                    name: options.redirectParamName || "redirect",
                    value: options.redirect
                })
            }
        },
        _initDataSettings: function(options) {
            if (this._isXHRUpload(options)) {
                if (!this._chunkedUpload(options, true)) {
                    if (!options.data) {
                        this._initXHRData(options)
                    }
                    this._initProgressListener(options)
                }
                if (options.postMessage) {
                    options.dataType = "postmessage " + (options.dataType || "")
                }
            } else {
                this._initIframeSettings(options)
            }
        },
        _getParamName: function(options) {
            var fileInput = $(options.fileInput),
                paramName = options.paramName;
            if (!paramName) {
                paramName = [];
                fileInput.each(function() {
                    var input = $(this),
                        name = input.prop("name") || "files[]",
                        i = (input.prop("files") || [1]).length;
                    while (i) {
                        paramName.push(name);
                        i -= 1
                    }
                });
                if (!paramName.length) {
                    paramName = [fileInput.prop("name") || "files[]"]
                }
            } else {
                if (!$.isArray(paramName)) {
                    paramName = [paramName]
                }
            }
            return paramName
        },
        _initFormSettings: function(options) {
            if (!options.form || !options.form.length) {
                options.form = $(options.fileInput.prop("form"));
                if (!options.form.length) {
                    options.form = $(this.options.fileInput.prop("form"))
                }
            }
            options.paramName = this._getParamName(options);
            if (!options.url) {
                options.url = options.form.prop("action") || location.href
            }
            options.type = (options.type || ($.type(options.form.prop("method")) === "string" && options.form.prop("method")) || "").toUpperCase();
            if (options.type !== "POST" && options.type !== "PUT" && options.type !== "PATCH") {
                options.type = "POST"
            }
            if (!options.formAcceptCharset) {
                options.formAcceptCharset = options.form.attr("accept-charset")
            }
        },
        _getAJAXSettings: function(data) {
            var options = $.extend({}, this.options, data);
            this._initFormSettings(options);
            this._initDataSettings(options);
            return options
        },
        _getDeferredState: function(deferred) {
            if (deferred.state) {
                return deferred.state()
            }
            if (deferred.isResolved()) {
                return "resolved"
            }
            if (deferred.isRejected()) {
                return "rejected"
            }
            return "pending"
        },
        _enhancePromise: function(promise) {
            promise.success = promise.done;
            promise.error = promise.fail;
            promise.complete = promise.always;
            return promise
        },
        _getXHRPromise: function(resolveOrReject, context, args) {
            var dfd = $.Deferred(),
                promise = dfd.promise();
            context = context || this.options.context || promise;
            if (resolveOrReject === true) {
                dfd.resolveWith(context, args)
            } else {
                if (resolveOrReject === false) {
                    dfd.rejectWith(context, args)
                }
            }
            promise.abort = dfd.promise;
            return this._enhancePromise(promise)
        },
        _addConvenienceMethods: function(e, data) {
            var that = this,
                getPromise = function(args) {
                    return $.Deferred().resolveWith(that, args).promise()
                };
            data.process = function(resolveFunc, rejectFunc) {
                if (resolveFunc || rejectFunc) {
                    data._processQueue = this._processQueue = (this._processQueue || getPromise([this])).pipe(function() {
                        if (data.errorThrown) {
                            return $.Deferred().rejectWith(that, [data]).promise()
                        }
                        return getPromise(arguments)
                    }).pipe(resolveFunc, rejectFunc)
                }
                return this._processQueue || getPromise([this])
            };
            data.submit = function() {
                if (this.state() !== "pending") {
                    data.jqXHR = this.jqXHR = (that._trigger("submit", $.Event("submit", {
                        delegatedEvent: e
                    }), this) !== false) && that._onSend(e, this)
                }
                return this.jqXHR || that._getXHRPromise()
            };
            data.abort = function() {
                if (this.jqXHR) {
                    return this.jqXHR.abort()
                }
                this.errorThrown = "abort";
                that._trigger("fail", null, this);
                return that._getXHRPromise(false)
            };
            data.state = function() {
                if (this.jqXHR) {
                    return that._getDeferredState(this.jqXHR)
                }
                if (this._processQueue) {
                    return that._getDeferredState(this._processQueue)
                }
            };
            data.processing = function() {
                return !this.jqXHR && this._processQueue && that._getDeferredState(this._processQueue) === "pending"
            };
            data.progress = function() {
                return this._progress
            };
            data.response = function() {
                return this._response
            }
        },
        _getUploadedBytes: function(jqXHR) {
            var range = jqXHR.getResponseHeader("Range"),
                parts = range && range.split("-"),
                upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);
            return upperBytesPos && upperBytesPos + 1
        },
        _chunkedUpload: function(options, testOnly) {
            options.uploadedBytes = options.uploadedBytes || 0;
            var that = this,
                file = options.files[0],
                fs = file.size,
                ub = options.uploadedBytes,
                mcs = options.maxChunkSize || fs,
                slice = this._blobSlice,
                dfd = $.Deferred(),
                promise = dfd.promise(),
                jqXHR, upload;
            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) || options.data) {
                return false
            }
            if (testOnly) {
                return true
            }
            if (ub >= fs) {
                file.error = options.i18n("uploadedBytes");
                return this._getXHRPromise(false, options.context, [null, "error", file.error])
            }
            upload = function() {
                var o = $.extend({}, options),
                    currentLoaded = o._progress.loaded;
                o.blob = slice.call(file, ub, ub + mcs, file.type);
                o.chunkSize = o.blob.size;
                o.contentRange = "bytes " + ub + "-" + (ub + o.chunkSize - 1) + "/" + fs;
                that._initXHRData(o);
                that._initProgressListener(o);
                jqXHR = ((that._trigger("chunksend", null, o) !== false && $.ajax(o)) || that._getXHRPromise(false, o.context)).done(function(result, textStatus, jqXHR) {
                    ub = that._getUploadedBytes(jqXHR) || (ub + o.chunkSize);
                    if (currentLoaded + o.chunkSize - o._progress.loaded) {
                        that._onProgress($.Event("progress", {
                            lengthComputable: true,
                            loaded: ub - o.uploadedBytes,
                            total: ub - o.uploadedBytes
                        }), o)
                    }
                    options.uploadedBytes = o.uploadedBytes = ub;
                    o.result = result;
                    o.textStatus = textStatus;
                    o.jqXHR = jqXHR;
                    that._trigger("chunkdone", null, o);
                    that._trigger("chunkalways", null, o);
                    if (ub < fs) {
                        upload()
                    } else {
                        dfd.resolveWith(o.context, [result, textStatus, jqXHR])
                    }
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    o.jqXHR = jqXHR;
                    o.textStatus = textStatus;
                    o.errorThrown = errorThrown;
                    that._trigger("chunkfail", null, o);
                    that._trigger("chunkalways", null, o);
                    dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown])
                })
            };
            this._enhancePromise(promise);
            promise.abort = function() {
                return jqXHR.abort()
            };
            upload();
            return promise
        },
        _beforeSend: function(e, data) {
            if (this._active === 0) {
                this._trigger("start");
                this._bitrateTimer = new this._BitrateTimer();
                this._progress.loaded = this._progress.total = 0;
                this._progress.bitrate = 0
            }
            this._initResponseObject(data);
            this._initProgressObject(data);
            data._progress.loaded = data.loaded = data.uploadedBytes || 0;
            data._progress.total = data.total = this._getTotal(data.files) || 1;
            data._progress.bitrate = data.bitrate = 0;
            this._active += 1;
            this._progress.loaded += data.loaded;
            this._progress.total += data.total
        },
        _onDone: function(result, textStatus, jqXHR, options) {
            var total = options._progress.total,
                response = options._response;
            if (options._progress.loaded < total) {
                this._onProgress($.Event("progress", {
                    lengthComputable: true,
                    loaded: total,
                    total: total
                }), options)
            }
            response.result = options.result = result;
            response.textStatus = options.textStatus = textStatus;
            response.jqXHR = options.jqXHR = jqXHR;
            this._trigger("done", null, options)
        },
        _onFail: function(jqXHR, textStatus, errorThrown, options) {
            var response = options._response;
            if (options.recalculateProgress) {
                this._progress.loaded -= options._progress.loaded;
                this._progress.total -= options._progress.total
            }
            response.jqXHR = options.jqXHR = jqXHR;
            response.textStatus = options.textStatus = textStatus;
            response.errorThrown = options.errorThrown = errorThrown;
            this._trigger("fail", null, options)
        },
        _onAlways: function(jqXHRorResult, textStatus, jqXHRorError, options) {
            this._trigger("always", null, options)
        },
        _onSend: function(e, data) {
            if (!data.submit) {
                this._addConvenienceMethods(e, data)
            }
            var that = this,
                jqXHR, aborted, slot, pipe, options = that._getAJAXSettings(data),
                send = function() {
                    that._sending += 1;
                    options._bitrateTimer = new that._BitrateTimer();
                    jqXHR = jqXHR || (((aborted || that._trigger("send", $.Event("send", {
                        delegatedEvent: e
                    }), options) === false) && that._getXHRPromise(false, options.context, aborted)) || that._chunkedUpload(options) || $.ajax(options)).done(function(result, textStatus, jqXHR) {
                        that._onDone(result, textStatus, jqXHR, options)
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        that._onFail(jqXHR, textStatus, errorThrown, options)
                    }).always(function(jqXHRorResult, textStatus, jqXHRorError) {
                        that._onAlways(jqXHRorResult, textStatus, jqXHRorError, options);
                        that._sending -= 1;
                        that._active -= 1;
                        if (options.limitConcurrentUploads && options.limitConcurrentUploads > that._sending) {
                            var nextSlot = that._slots.shift();
                            while (nextSlot) {
                                if (that._getDeferredState(nextSlot) === "pending") {
                                    nextSlot.resolve();
                                    break
                                }
                                nextSlot = that._slots.shift()
                            }
                        }
                        if (that._active === 0) {
                            that._trigger("stop")
                        }
                    });
                    return jqXHR
                };
            this._beforeSend(e, options);
            if (this.options.sequentialUploads || (this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending)) {
                if (this.options.limitConcurrentUploads > 1) {
                    slot = $.Deferred();
                    this._slots.push(slot);
                    pipe = slot.pipe(send)
                } else {
                    this._sequence = this._sequence.pipe(send, send);
                    pipe = this._sequence
                }
                pipe.abort = function() {
                    aborted = [undefined, "abort", "abort"];
                    if (!jqXHR) {
                        if (slot) {
                            slot.rejectWith(options.context, aborted)
                        }
                        return send()
                    }
                    return jqXHR.abort()
                };
                return this._enhancePromise(pipe)
            }
            return send()
        },
        _onAdd: function(e, data) {
            var that = this,
                result = true,
                options = $.extend({}, this.options, data),
                files = data.files,
                filesLength = files.length,
                limit = options.limitMultiFileUploads,
                limitSize = options.limitMultiFileUploadSize,
                overhead = options.limitMultiFileUploadSizeOverhead,
                batchSize = 0,
                paramName = this._getParamName(options),
                paramNameSet, paramNameSlice, fileSet, i, j = 0;
            if (limitSize && (!filesLength || files[0].size === undefined)) {
                limitSize = undefined
            }
            if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {
                fileSet = [files];
                paramNameSet = [paramName]
            } else {
                if (!(options.singleFileUploads || limitSize) && limit) {
                    fileSet = [];
                    paramNameSet = [];
                    for (i = 0; i < filesLength; i += limit) {
                        fileSet.push(files.slice(i, i + limit));
                        paramNameSlice = paramName.slice(i, i + limit);
                        if (!paramNameSlice.length) {
                            paramNameSlice = paramName
                        }
                        paramNameSet.push(paramNameSlice)
                    }
                } else {
                    if (!options.singleFileUploads && limitSize) {
                        fileSet = [];
                        paramNameSet = [];
                        for (i = 0; i < filesLength; i = i + 1) {
                            batchSize += files[i].size + overhead;
                            if (i + 1 === filesLength || ((batchSize + files[i + 1].size + overhead) > limitSize) || (limit && i + 1 - j >= limit)) {
                                fileSet.push(files.slice(j, i + 1));
                                paramNameSlice = paramName.slice(j, i + 1);
                                if (!paramNameSlice.length) {
                                    paramNameSlice = paramName
                                }
                                paramNameSet.push(paramNameSlice);
                                j = i + 1;
                                batchSize = 0
                            }
                        }
                    } else {
                        paramNameSet = paramName
                    }
                }
            }
            data.originalFiles = files;
            $.each(fileSet || files, function(index, element) {
                var newData = $.extend({}, data);
                newData.files = fileSet ? element : [element];
                newData.paramName = paramNameSet[index];
                that._initResponseObject(newData);
                that._initProgressObject(newData);
                that._addConvenienceMethods(e, newData);
                result = that._trigger("add", $.Event("add", {
                    delegatedEvent: e
                }), newData);
                return result
            });
            return result
        },
        _replaceFileInput: function(data) {
            var input = data.fileInput,
                inputClone = input.clone(true);
            data.fileInputClone = inputClone;
            $("<form></form>").append(inputClone)[0].reset();
            input.after(inputClone).detach();
            $.cleanData(input.unbind("remove"));
            this.options.fileInput = this.options.fileInput.map(function(i, el) {
                if (el === input[0]) {
                    return inputClone[0]
                }
                return el
            });
            if (input[0] === this.element[0]) {
                this.element = inputClone
            }
        },
        _handleFileTreeEntry: function(entry, path) {
            var that = this,
                dfd = $.Deferred(),
                errorHandler = function(e) {
                    if (e && !e.entry) {
                        e.entry = entry
                    }
                    dfd.resolve([e])
                },
                successHandler = function(entries) {
                    that._handleFileTreeEntries(entries, path + entry.name + "/").done(function(files) {
                        dfd.resolve(files)
                    }).fail(errorHandler)
                },
                readEntries = function() {
                    dirReader.readEntries(function(results) {
                        if (!results.length) {
                            successHandler(entries)
                        } else {
                            entries = entries.concat(results);
                            readEntries()
                        }
                    }, errorHandler)
                },
                dirReader, entries = [];
            path = path || "";
            if (entry.isFile) {
                if (entry._file) {
                    entry._file.relativePath = path;
                    dfd.resolve(entry._file)
                } else {
                    entry.file(function(file) {
                        file.relativePath = path;
                        dfd.resolve(file)
                    }, errorHandler)
                }
            } else {
                if (entry.isDirectory) {
                    dirReader = entry.createReader();
                    readEntries()
                } else {
                    dfd.resolve([])
                }
            }
            return dfd.promise()
        },
        _handleFileTreeEntries: function(entries, path) {
            var that = this;
            return $.when.apply($, $.map(entries, function(entry) {
                return that._handleFileTreeEntry(entry, path)
            })).pipe(function() {
                return Array.prototype.concat.apply([], arguments)
            })
        },
        _getDroppedFiles: function(dataTransfer) {
            dataTransfer = dataTransfer || {};
            var items = dataTransfer.items;
            if (items && items.length && (items[0].webkitGetAsEntry || items[0].getAsEntry)) {
                return this._handleFileTreeEntries($.map(items, function(item) {
                    var entry;
                    if (item.webkitGetAsEntry) {
                        entry = item.webkitGetAsEntry();
                        if (entry) {
                            entry._file = item.getAsFile()
                        }
                        return entry
                    }
                    return item.getAsEntry()
                }))
            }
            return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise()
        },
        _getSingleFileInputFiles: function(fileInput) {
            fileInput = $(fileInput);
            var entries = fileInput.prop("webkitEntries") || fileInput.prop("entries"),
                files, value;
            if (entries && entries.length) {
                return this._handleFileTreeEntries(entries)
            }
            files = $.makeArray(fileInput.prop("files"));
            if (!files.length) {
                value = fileInput.prop("value");
                if (!value) {
                    return $.Deferred().resolve([]).promise()
                }
                files = [{
                    name: value.replace(/^.*\\/, "")
                }]
            } else {
                if (files[0].name === undefined && files[0].fileName) {
                    $.each(files, function(index, file) {
                        file.name = file.fileName;
                        file.size = file.fileSize
                    })
                }
            }
            return $.Deferred().resolve(files).promise()
        },
        _getFileInputFiles: function(fileInput) {
            if (!(fileInput instanceof $) || fileInput.length === 1) {
                return this._getSingleFileInputFiles(fileInput)
            }
            return $.when.apply($, $.map(fileInput, this._getSingleFileInputFiles)).pipe(function() {
                return Array.prototype.concat.apply([], arguments)
            })
        },
        _onChange: function(e) {
            var that = this,
                data = {
                    fileInput: $(e.target),
                    form: $(e.target.form)
                };
            this._getFileInputFiles(data.fileInput).always(function(files) {
                data.files = files;
                if (that.options.replaceFileInput) {
                    that._replaceFileInput(data)
                }
                if (that._trigger("change", $.Event("change", {
                        delegatedEvent: e
                    }), data) !== false) {
                    that._onAdd(e, data)
                }
            })
        },
        _onPaste: function(e) {
            var items = e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.items,
                data = {
                    files: []
                };
            if (items && items.length) {
                $.each(items, function(index, item) {
                    var file = item.getAsFile && item.getAsFile();
                    if (file) {
                        data.files.push(file)
                    }
                });
                if (this._trigger("paste", $.Event("paste", {
                        delegatedEvent: e
                    }), data) !== false) {
                    this._onAdd(e, data)
                }
            }
        },
        _onDrop: function(e) {
            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
            var that = this,
                dataTransfer = e.dataTransfer,
                data = {};
            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
                e.preventDefault();
                this._getDroppedFiles(dataTransfer).always(function(files) {
                    data.files = files;
                    if (that._trigger("drop", $.Event("drop", {
                            delegatedEvent: e
                        }), data) !== false) {
                        that._onAdd(e, data)
                    }
                })
            }
        },
        _onDragOver: function(e) {
            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
            var dataTransfer = e.dataTransfer;
            if (dataTransfer && $.inArray("Files", dataTransfer.types) !== -1 && this._trigger("dragover", $.Event("dragover", {
                    delegatedEvent: e
                })) !== false) {
                e.preventDefault();
                dataTransfer.dropEffect = "copy"
            }
        },
        _initEventHandlers: function() {
            if (this._isXHRUpload(this.options)) {
                this._on(this.options.dropZone, {
                    dragover: this._onDragOver,
                    drop: this._onDrop
                });
                this._on(this.options.pasteZone, {
                    paste: this._onPaste
                })
            }
            if ($.support.fileInput) {
                this._on(this.options.fileInput, {
                    change: this._onChange
                })
            }
        },
        _destroyEventHandlers: function() {
            this._off(this.options.dropZone, "dragover drop");
            this._off(this.options.pasteZone, "paste");
            this._off(this.options.fileInput, "change")
        },
        _setOption: function(key, value) {
            var reinit = $.inArray(key, this._specialOptions) !== -1;
            if (reinit) {
                this._destroyEventHandlers()
            }
            this._super(key, value);
            if (reinit) {
                this._initSpecialOptions();
                this._initEventHandlers()
            }
        },
        _initSpecialOptions: function() {
            var options = this.options;
            if (options.fileInput === undefined) {
                options.fileInput = this.element.is('input[type="file"]') ? this.element : this.element.find('input[type="file"]')
            } else {
                if (!(options.fileInput instanceof $)) {
                    options.fileInput = $(options.fileInput)
                }
            }
            if (!(options.dropZone instanceof $)) {
                options.dropZone = $(options.dropZone)
            }
            if (!(options.pasteZone instanceof $)) {
                options.pasteZone = $(options.pasteZone)
            }
        },
        _getRegExp: function(str) {
            var parts = str.split("/"),
                modifiers = parts.pop();
            parts.shift();
            return new RegExp(parts.join("/"), modifiers)
        },
        _isRegExpOption: function(key, value) {
            return key !== "url" && $.type(value) === "string" && /^\/.*\/[igm]{0,3}$/.test(value)
        },
        _initDataAttributes: function() {
            var that = this,
                options = this.options,
                clone = $(this.element[0].cloneNode(false));
            $.each(clone.data(), function(key, value) {
                var dataAttributeName = "data-" + key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
                if (clone.attr(dataAttributeName)) {
                    if (that._isRegExpOption(key, value)) {
                        value = that._getRegExp(value)
                    }
                    options[key] = value
                }
            })
        },
        _create: function() {
            this._initDataAttributes();
            this._initSpecialOptions();
            this._slots = [];
            this._sequence = this._getXHRPromise(true);
            this._sending = this._active = 0;
            this._initProgressObject(this);
            this._initEventHandlers()
        },
        active: function() {
            return this._active
        },
        progress: function() {
            return this._progress
        },
        add: function(data) {
            var that = this;
            if (!data || this.options.disabled) {
                return
            }
            if (data.fileInput && !data.files) {
                this._getFileInputFiles(data.fileInput).always(function(files) {
                    data.files = files;
                    that._onAdd(null, data)
                })
            } else {
                data.files = $.makeArray(data.files);
                this._onAdd(null, data)
            }
        },
        send: function(data) {
            if (data && !this.options.disabled) {
                if (data.fileInput && !data.files) {
                    var that = this,
                        dfd = $.Deferred(),
                        promise = dfd.promise(),
                        jqXHR, aborted;
                    promise.abort = function() {
                        aborted = true;
                        if (jqXHR) {
                            return jqXHR.abort()
                        }
                        dfd.reject(null, "abort", "abort");
                        return promise
                    };
                    this._getFileInputFiles(data.fileInput).always(function(files) {
                        if (aborted) {
                            return
                        }
                        if (!files.length) {
                            dfd.reject();
                            return
                        }
                        data.files = files;
                        jqXHR = that._onSend(null, data);
                        jqXHR.then(function(result, textStatus, jqXHR) {
                            dfd.resolve(result, textStatus, jqXHR)
                        }, function(jqXHR, textStatus, errorThrown) {
                            dfd.reject(jqXHR, textStatus, errorThrown)
                        })
                    });
                    return this._enhancePromise(promise)
                }
                data.files = $.makeArray(data.files);
                if (data.files.length) {
                    return this._onSend(null, data)
                }
            }
            return this._getXHRPromise(false, data && data.context)
        }
    })
})(fs);
(function($) {
    $.fn.extend({
        sliderAccess: function(options) {
            options = options || {};
            options.touchonly = options.touchonly !== undefined ? options.touchonly : true;
            if (options.touchonly === true && !("ontouchend" in document)) {
                return $(this)
            }
            return $(this).each(function(i, obj) {
                var $t = $(this),
                    o = $.extend({}, {
                        where: "after",
                        step: $t.slider("option", "step"),
                        upIcon: "ui-icon-plus",
                        downIcon: "ui-icon-minus",
                        text: false,
                        upText: "+",
                        downText: "-",
                        buttonset: true,
                        buttonsetTag: "span",
                        isRTL: false
                    }, options),
                    $buttons = $("<" + o.buttonsetTag + ' class="ui-slider-access"><button data-icon="' + o.downIcon + '" data-step="' + (o.isRTL ? o.step : o.step * -1) + '">' + o.downText + '</button><button data-icon="' + o.upIcon + '" data-step="' + (o.isRTL ? o.step * -1 : o.step) + '">' + o.upText + "</button></" + o.buttonsetTag + ">");
                $buttons.children("button").each(function(j, jobj) {
                    var $jt = $(this);
                    $jt.button({
                        text: o.text,
                        icons: {
                            primary: $jt.data("icon")
                        }
                    }).click(function(e) {
                        var step = $jt.data("step"),
                            curr = $t.slider("value"),
                            newval = curr += step * 1,
                            minval = $t.slider("option", "min"),
                            maxval = $t.slider("option", "max"),
                            slidee = $t.slider("option", "slide") || function() {},
                            stope = $t.slider("option", "stop") || function() {};
                        e.preventDefault();
                        if (newval < minval || newval > maxval) {
                            return
                        }
                        $t.slider("value", newval);
                        slidee.call($t, null, {
                            value: newval
                        });
                        stope.call($t, null, {
                            value: newval
                        })
                    })
                });
                $t[o.where]($buttons);
                if (o.buttonset) {
                    $buttons.removeClass("ui-corner-right").removeClass("ui-corner-left").buttonset();
                    $buttons.eq(0).addClass("ui-corner-left");
                    $buttons.eq(1).addClass("ui-corner-right")
                }
                var bOuterWidth = $buttons.css({
                    marginLeft: ((o.where === "after" && !o.isRTL) || (o.where === "before" && o.isRTL) ? 10 : 0),
                    marginRight: ((o.where === "before" && !o.isRTL) || (o.where === "after" && o.isRTL) ? 10 : 0)
                }).outerWidth(true) + 5;
                var tOuterWidth = $t.outerWidth(true);
                $t.css("display", "inline-block").width(tOuterWidth - bOuterWidth)
            })
        }
    })
})(fs);
(function($) {
    $.ui.timepicker = $.ui.timepicker || {};
    if ($.ui.timepicker.version) {
        return
    }
    $.extend($.ui, {
        timepicker: {
            version: "@@version"
        }
    });
    var Timepicker = function() {
        this.regional = [];
        this.regional[""] = {
            currentText: "Now",
            closeText: "Done",
            amNames: ["AM", "A"],
            pmNames: ["PM", "P"],
            timeFormat: "HH:mm",
            timeSuffix: "",
            timeOnlyTitle: "Choose Time",
            timeText: "Time",
            hourText: "Hour",
            minuteText: "Minute",
            secondText: "Second",
            millisecText: "Millisecond",
            microsecText: "Microsecond",
            timezoneText: "Time Zone",
            isRTL: false
        };
        this._defaults = {
            showButtonPanel: true,
            timeOnly: false,
            timeOnlyShowDate: false,
            showHour: null,
            showMinute: null,
            showSecond: null,
            showMillisec: null,
            showMicrosec: null,
            showTimezone: null,
            showTime: true,
            stepHour: 1,
            stepMinute: 1,
            stepSecond: 1,
            stepMillisec: 1,
            stepMicrosec: 1,
            hour: 0,
            minute: 0,
            second: 0,
            millisec: 0,
            microsec: 0,
            timezone: null,
            hourMin: 0,
            minuteMin: 0,
            secondMin: 0,
            millisecMin: 0,
            microsecMin: 0,
            hourMax: 23,
            minuteMax: 59,
            secondMax: 59,
            millisecMax: 999,
            microsecMax: 999,
            minDateTime: null,
            maxDateTime: null,
            maxTime: null,
            minTime: null,
            onSelect: null,
            hourGrid: 0,
            minuteGrid: 0,
            secondGrid: 0,
            millisecGrid: 0,
            microsecGrid: 0,
            alwaysSetTime: true,
            separator: " ",
            altFieldTimeOnly: true,
            altTimeFormat: null,
            altSeparator: null,
            altTimeSuffix: null,
            altRedirectFocus: true,
            pickerTimeFormat: null,
            pickerTimeSuffix: null,
            showTimepicker: true,
            timezoneList: null,
            addSliderAccess: false,
            sliderAccessArgs: null,
            controlType: "slider",
            defaultValue: null,
            parse: "strict"
        };
        $.extend(this._defaults, this.regional[""])
    };
    $.extend(Timepicker.prototype, {
        $input: null,
        $altInput: null,
        $timeObj: null,
        inst: null,
        hour_slider: null,
        minute_slider: null,
        second_slider: null,
        millisec_slider: null,
        microsec_slider: null,
        timezone_select: null,
        maxTime: null,
        minTime: null,
        hour: 0,
        minute: 0,
        second: 0,
        millisec: 0,
        microsec: 0,
        timezone: null,
        hourMinOriginal: null,
        minuteMinOriginal: null,
        secondMinOriginal: null,
        millisecMinOriginal: null,
        microsecMinOriginal: null,
        hourMaxOriginal: null,
        minuteMaxOriginal: null,
        secondMaxOriginal: null,
        millisecMaxOriginal: null,
        microsecMaxOriginal: null,
        ampm: "",
        formattedDate: "",
        formattedTime: "",
        formattedDateTime: "",
        timezoneList: null,
        units: ["hour", "minute", "second", "millisec", "microsec"],
        support: {},
        control: null,
        setDefaults: function(settings) {
            extendRemove(this._defaults, settings || {});
            return this
        },
        _newInst: function($input, opts) {
            var tp_inst = new Timepicker(),
                inlineSettings = {},
                fns = {},
                overrides, i;
            for (var attrName in this._defaults) {
                if (this._defaults.hasOwnProperty(attrName)) {
                    var attrValue = $input.attr("time:" + attrName);
                    if (attrValue) {
                        try {
                            inlineSettings[attrName] = eval(attrValue)
                        } catch (err) {
                            inlineSettings[attrName] = attrValue
                        }
                    }
                }
            }
            overrides = {
                beforeShow: function(input, dp_inst) {
                    if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {
                        return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst)
                    }
                },
                onChangeMonthYear: function(year, month, dp_inst) {
                    tp_inst._updateDateTime(dp_inst);
                    if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {
                        tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst)
                    }
                },
                onClose: function(dateText, dp_inst) {
                    if (tp_inst.timeDefined === true && $input.val() !== "") {
                        tp_inst._updateDateTime(dp_inst)
                    }
                    if ($.isFunction(tp_inst._defaults.evnts.onClose)) {
                        tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst)
                    }
                }
            };
            for (i in overrides) {
                if (overrides.hasOwnProperty(i)) {
                    fns[i] = opts[i] || null
                }
            }
            tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {
                evnts: fns,
                timepicker: tp_inst
            });
            tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {
                return val.toUpperCase()
            });
            tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {
                return val.toUpperCase()
            });
            tp_inst.support = detectSupport(tp_inst._defaults.timeFormat + (tp_inst._defaults.pickerTimeFormat ? tp_inst._defaults.pickerTimeFormat : "") + (tp_inst._defaults.altTimeFormat ? tp_inst._defaults.altTimeFormat : ""));
            if (typeof(tp_inst._defaults.controlType) === "string") {
                if (tp_inst._defaults.controlType === "slider" && typeof($.ui.slider) === "undefined") {
                    tp_inst._defaults.controlType = "select"
                }
                tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType]
            } else {
                tp_inst.control = tp_inst._defaults.controlType
            }
            var timezoneList = [-720, -660, -600, -570, -540, -480, -420, -360, -300, -270, -240, -210, -180, -120, -60, 0, 60, 120, 180, 210, 240, 270, 300, 330, 345, 360, 390, 420, 480, 525, 540, 570, 600, 630, 660, 690, 720, 765, 780, 840];
            if (tp_inst._defaults.timezoneList !== null) {
                timezoneList = tp_inst._defaults.timezoneList
            }
            var tzl = timezoneList.length,
                tzi = 0,
                tzv = null;
            if (tzl > 0 && typeof timezoneList[0] !== "object") {
                for (; tzi < tzl; tzi++) {
                    tzv = timezoneList[tzi];
                    timezoneList[tzi] = {
                        value: tzv,
                        label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601)
                    }
                }
            }
            tp_inst._defaults.timezoneList = timezoneList;
            tp_inst.timezone = tp_inst._defaults.timezone !== null ? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) : ((new Date()).getTimezoneOffset() * -1);
            tp_inst.hour = tp_inst._defaults.hour < tp_inst._defaults.hourMin ? tp_inst._defaults.hourMin : tp_inst._defaults.hour > tp_inst._defaults.hourMax ? tp_inst._defaults.hourMax : tp_inst._defaults.hour;
            tp_inst.minute = tp_inst._defaults.minute < tp_inst._defaults.minuteMin ? tp_inst._defaults.minuteMin : tp_inst._defaults.minute > tp_inst._defaults.minuteMax ? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;
            tp_inst.second = tp_inst._defaults.second < tp_inst._defaults.secondMin ? tp_inst._defaults.secondMin : tp_inst._defaults.second > tp_inst._defaults.secondMax ? tp_inst._defaults.secondMax : tp_inst._defaults.second;
            tp_inst.millisec = tp_inst._defaults.millisec < tp_inst._defaults.millisecMin ? tp_inst._defaults.millisecMin : tp_inst._defaults.millisec > tp_inst._defaults.millisecMax ? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;
            tp_inst.microsec = tp_inst._defaults.microsec < tp_inst._defaults.microsecMin ? tp_inst._defaults.microsecMin : tp_inst._defaults.microsec > tp_inst._defaults.microsecMax ? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;
            tp_inst.ampm = "";
            tp_inst.$input = $input;
            if (tp_inst._defaults.altField) {
                tp_inst.$altInput = $(tp_inst._defaults.altField);
                if (tp_inst._defaults.altRedirectFocus === true) {
                    tp_inst.$altInput.css({
                        cursor: "pointer"
                    }).focus(function() {
                        $input.trigger("focus")
                    })
                }
            }
            if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {
                tp_inst._defaults.minDate = new Date()
            }
            if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {
                tp_inst._defaults.maxDate = new Date()
            }
            if (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {
                tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime())
            }
            if (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {
                tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime())
            }
            if (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {
                tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime())
            }
            if (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {
                tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime())
            }
            tp_inst.$input.bind("focus", function() {
                tp_inst._onFocus()
            });
            return tp_inst
        },
        _addTimePicker: function(dp_inst) {
            var currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + " " + this.$altInput.val() : this.$input.val();
            this.timeDefined = this._parseTime(currDT);
            this._limitMinMaxDateTime(dp_inst, false);
            this._injectTimePicker()
        },
        _parseTime: function(timeString, withDate) {
            if (!this.inst) {
                this.inst = $.datepicker._getInst(this.$input[0])
            }
            if (withDate || !this._defaults.timeOnly) {
                var dp_dateFormat = $.datepicker._get(this.inst, "dateFormat");
                try {
                    var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);
                    if (!parseRes.timeObj) {
                        return false
                    }
                    $.extend(this, parseRes.timeObj)
                } catch (err) {
                    $.timepicker.log("Error parsing the date/time string: " + err + "\ndate/time string = " + timeString + "\ntimeFormat = " + this._defaults.timeFormat + "\ndateFormat = " + dp_dateFormat);
                    return false
                }
                return true
            } else {
                var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);
                if (!timeObj) {
                    return false
                }
                $.extend(this, timeObj);
                return true
            }
        },
        _injectTimePicker: function() {
            var $dp = this.inst.dpDiv,
                o = this.inst.settings,
                tp_inst = this,
                litem = "",
                uitem = "",
                show = null,
                max = {},
                gridSize = {},
                size = null,
                i = 0,
                l = 0;
            if ($dp.find("div.ui-timepicker-div").length === 0 && o.showTimepicker) {
                var noDisplay = ' style="display:none;"',
                    html = '<div class="ui-timepicker-div' + (o.isRTL ? " ui-timepicker-rtl" : "") + '"><dl><dt class="ui_tpicker_time_label"' + ((o.showTime) ? "" : noDisplay) + ">" + o.timeText + '</dt><dd class="ui_tpicker_time"' + ((o.showTime) ? "" : noDisplay) + "></dd>";
                for (i = 0, l = this.units.length; i < l; i++) {
                    litem = this.units[i];
                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);
                    show = o["show" + uitem] !== null ? o["show" + uitem] : this.support[litem];
                    max[litem] = parseInt((o[litem + "Max"] - ((o[litem + "Max"] - o[litem + "Min"]) % o["step" + uitem])), 10);
                    gridSize[litem] = 0;
                    html += '<dt class="ui_tpicker_' + litem + '_label"' + (show ? "" : noDisplay) + ">" + o[litem + "Text"] + '</dt><dd class="ui_tpicker_' + litem + '"><div class="ui_tpicker_' + litem + '_slider"' + (show ? "" : noDisplay) + "></div>";
                    if (show && o[litem + "Grid"] > 0) {
                        html += '<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';
                        if (litem === "hour") {
                            for (var h = o[litem + "Min"]; h <= max[litem]; h += parseInt(o[litem + "Grid"], 10)) {
                                gridSize[litem]++;
                                var tmph = $.datepicker.formatTime(this.support.ampm ? "hht" : "HH", {
                                    hour: h
                                }, o);
                                html += '<td data-for="' + litem + '">' + tmph + "</td>"
                            }
                        } else {
                            for (var m = o[litem + "Min"]; m <= max[litem]; m += parseInt(o[litem + "Grid"], 10)) {
                                gridSize[litem]++;
                                html += '<td data-for="' + litem + '">' + ((m < 10) ? "0" : "") + m + "</td>"
                            }
                        }
                        html += "</tr></table></div>"
                    }
                    html += "</dd>"
                }
                var showTz = o.showTimezone !== null ? o.showTimezone : this.support.timezone;
                html += '<dt class="ui_tpicker_timezone_label"' + (showTz ? "" : noDisplay) + ">" + o.timezoneText + "</dt>";
                html += '<dd class="ui_tpicker_timezone" ' + (showTz ? "" : noDisplay) + "></dd>";
                html += "</dl></div>";
                var $tp = $(html);
                if (o.timeOnly === true) {
                    $tp.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all"><div class="ff-ui-datepicker-title">' + o.timeOnlyTitle + "</div></div>");
                    $dp.find(".ff-ui-datepicker-header, .ff-ui-datepicker-calendar").hide()
                }
                for (i = 0, l = tp_inst.units.length; i < l; i++) {
                    litem = tp_inst.units[i];
                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);
                    show = o["show" + uitem] !== null ? o["show" + uitem] : this.support[litem];
                    tp_inst[litem + "_slider"] = tp_inst.control.create(tp_inst, $tp.find(".ui_tpicker_" + litem + "_slider"), litem, tp_inst[litem], o[litem + "Min"], max[litem], o["step" + uitem]);
                    if (show && o[litem + "Grid"] > 0) {
                        size = 100 * gridSize[litem] * o[litem + "Grid"] / (max[litem] - o[litem + "Min"]);
                        $tp.find(".ui_tpicker_" + litem + " table").css({
                            width: size + "%",
                            marginLeft: o.isRTL ? "0" : ((size / (-2 * gridSize[litem])) + "%"),
                            marginRight: o.isRTL ? ((size / (-2 * gridSize[litem])) + "%") : "0",
                            borderCollapse: "collapse"
                        }).find("td").click(function(e) {
                            var $t = $(this),
                                h = $t.html(),
                                n = parseInt(h.replace(/[^0-9]/g), 10),
                                ap = h.replace(/[^apm]/ig),
                                f = $t.data("for");
                            if (f === "hour") {
                                if (ap.indexOf("p") !== -1 && n < 12) {
                                    n += 12
                                } else {
                                    if (ap.indexOf("a") !== -1 && n === 12) {
                                        n = 0
                                    }
                                }
                            }
                            tp_inst.control.value(tp_inst, tp_inst[f + "_slider"], litem, n);
                            tp_inst._onTimeChange();
                            tp_inst._onSelectHandler()
                        }).css({
                            cursor: "pointer",
                            width: (100 / gridSize[litem]) + "%",
                            textAlign: "center",
                            overflow: "hidden"
                        })
                    }
                }
                this.timezone_select = $tp.find(".ui_tpicker_timezone").append("<select></select>").find("select");
                $.fn.append.apply(this.timezone_select, $.map(o.timezoneList, function(val, idx) {
                    return $("<option />").val(typeof val === "object" ? val.value : val).text(typeof val === "object" ? val.label : val)
                }));
                if (typeof(this.timezone) !== "undefined" && this.timezone !== null && this.timezone !== "") {
                    var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset() * -1;
                    if (local_timezone === this.timezone) {
                        selectLocalTimezone(tp_inst)
                    } else {
                        this.timezone_select.val(this.timezone)
                    }
                } else {
                    if (typeof(this.hour) !== "undefined" && this.hour !== null && this.hour !== "") {
                        this.timezone_select.val(o.timezone)
                    } else {
                        selectLocalTimezone(tp_inst)
                    }
                }
                this.timezone_select.change(function() {
                    tp_inst._onTimeChange();
                    tp_inst._onSelectHandler()
                });
                var $buttonPanel = $dp.find(".ff-ui-datepicker-buttonpane");
                if ($buttonPanel.length) {
                    $buttonPanel.before($tp)
                } else {
                    $dp.append($tp)
                }
                this.$timeObj = $tp.find(".ui_tpicker_time");
                if (this.inst !== null) {
                    var timeDefined = this.timeDefined;
                    this._onTimeChange();
                    this.timeDefined = timeDefined
                }
                if (this._defaults.addSliderAccess) {
                    var sliderAccessArgs = this._defaults.sliderAccessArgs,
                        rtl = this._defaults.isRTL;
                    sliderAccessArgs.isRTL = rtl;
                    setTimeout(function() {
                        if ($tp.find(".ui-slider-access").length === 0) {
                            $tp.find(".ui-slider:visible").sliderAccess(sliderAccessArgs);
                            var sliderAccessWidth = $tp.find(".ui-slider-access:eq(0)").outerWidth(true);
                            if (sliderAccessWidth) {
                                $tp.find("table:visible").each(function() {
                                    var $g = $(this),
                                        oldWidth = $g.outerWidth(),
                                        oldMarginLeft = $g.css(rtl ? "marginRight" : "marginLeft").toString().replace("%", ""),
                                        newWidth = oldWidth - sliderAccessWidth,
                                        newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + "%",
                                        css = {
                                            width: newWidth,
                                            marginRight: 0,
                                            marginLeft: 0
                                        };
                                    css[rtl ? "marginRight" : "marginLeft"] = newMarginLeft;
                                    $g.css(css)
                                })
                            }
                        }
                    }, 10)
                }
                tp_inst._limitMinMaxDateTime(this.inst, true)
            }
        },
        _limitMinMaxDateTime: function(dp_inst, adjustSliders) {
            var o = this._defaults,
                dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);
            if (!this._defaults.showTimepicker) {
                return
            }
            if ($.datepicker._get(dp_inst, "minDateTime") !== null && $.datepicker._get(dp_inst, "minDateTime") !== undefined && dp_date) {
                var minDateTime = $.datepicker._get(dp_inst, "minDateTime"),
                    minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);
                if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {
                    this.hourMinOriginal = o.hourMin;
                    this.minuteMinOriginal = o.minuteMin;
                    this.secondMinOriginal = o.secondMin;
                    this.millisecMinOriginal = o.millisecMin;
                    this.microsecMinOriginal = o.microsecMin
                }
                if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() === dp_date.getTime()) {
                    this._defaults.hourMin = minDateTime.getHours();
                    if (this.hour <= this._defaults.hourMin) {
                        this.hour = this._defaults.hourMin;
                        this._defaults.minuteMin = minDateTime.getMinutes();
                        if (this.minute <= this._defaults.minuteMin) {
                            this.minute = this._defaults.minuteMin;
                            this._defaults.secondMin = minDateTime.getSeconds();
                            if (this.second <= this._defaults.secondMin) {
                                this.second = this._defaults.secondMin;
                                this._defaults.millisecMin = minDateTime.getMilliseconds();
                                if (this.millisec <= this._defaults.millisecMin) {
                                    this.millisec = this._defaults.millisecMin;
                                    this._defaults.microsecMin = minDateTime.getMicroseconds()
                                } else {
                                    if (this.microsec < this._defaults.microsecMin) {
                                        this.microsec = this._defaults.microsecMin
                                    }
                                    this._defaults.microsecMin = this.microsecMinOriginal
                                }
                            } else {
                                this._defaults.millisecMin = this.millisecMinOriginal;
                                this._defaults.microsecMin = this.microsecMinOriginal
                            }
                        } else {
                            this._defaults.secondMin = this.secondMinOriginal;
                            this._defaults.millisecMin = this.millisecMinOriginal;
                            this._defaults.microsecMin = this.microsecMinOriginal
                        }
                    } else {
                        this._defaults.minuteMin = this.minuteMinOriginal;
                        this._defaults.secondMin = this.secondMinOriginal;
                        this._defaults.millisecMin = this.millisecMinOriginal;
                        this._defaults.microsecMin = this.microsecMinOriginal
                    }
                } else {
                    this._defaults.hourMin = this.hourMinOriginal;
                    this._defaults.minuteMin = this.minuteMinOriginal;
                    this._defaults.secondMin = this.secondMinOriginal;
                    this._defaults.millisecMin = this.millisecMinOriginal;
                    this._defaults.microsecMin = this.microsecMinOriginal
                }
            }
            if ($.datepicker._get(dp_inst, "maxDateTime") !== null && $.datepicker._get(dp_inst, "maxDateTime") !== undefined && dp_date) {
                var maxDateTime = $.datepicker._get(dp_inst, "maxDateTime"),
                    maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);
                if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {
                    this.hourMaxOriginal = o.hourMax;
                    this.minuteMaxOriginal = o.minuteMax;
                    this.secondMaxOriginal = o.secondMax;
                    this.millisecMaxOriginal = o.millisecMax;
                    this.microsecMaxOriginal = o.microsecMax
                }
                if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() === dp_date.getTime()) {
                    this._defaults.hourMax = maxDateTime.getHours();
                    if (this.hour >= this._defaults.hourMax) {
                        this.hour = this._defaults.hourMax;
                        this._defaults.minuteMax = maxDateTime.getMinutes();
                        if (this.minute >= this._defaults.minuteMax) {
                            this.minute = this._defaults.minuteMax;
                            this._defaults.secondMax = maxDateTime.getSeconds();
                            if (this.second >= this._defaults.secondMax) {
                                this.second = this._defaults.secondMax;
                                this._defaults.millisecMax = maxDateTime.getMilliseconds();
                                if (this.millisec >= this._defaults.millisecMax) {
                                    this.millisec = this._defaults.millisecMax;
                                    this._defaults.microsecMax = maxDateTime.getMicroseconds()
                                } else {
                                    if (this.microsec > this._defaults.microsecMax) {
                                        this.microsec = this._defaults.microsecMax
                                    }
                                    this._defaults.microsecMax = this.microsecMaxOriginal
                                }
                            } else {
                                this._defaults.millisecMax = this.millisecMaxOriginal;
                                this._defaults.microsecMax = this.microsecMaxOriginal
                            }
                        } else {
                            this._defaults.secondMax = this.secondMaxOriginal;
                            this._defaults.millisecMax = this.millisecMaxOriginal;
                            this._defaults.microsecMax = this.microsecMaxOriginal
                        }
                    } else {
                        this._defaults.minuteMax = this.minuteMaxOriginal;
                        this._defaults.secondMax = this.secondMaxOriginal;
                        this._defaults.millisecMax = this.millisecMaxOriginal;
                        this._defaults.microsecMax = this.microsecMaxOriginal
                    }
                } else {
                    this._defaults.hourMax = this.hourMaxOriginal;
                    this._defaults.minuteMax = this.minuteMaxOriginal;
                    this._defaults.secondMax = this.secondMaxOriginal;
                    this._defaults.millisecMax = this.millisecMaxOriginal;
                    this._defaults.microsecMax = this.microsecMaxOriginal
                }
            }
            if (dp_inst.settings.minTime !== null) {
                var tempMinTime = new Date("01/01/1970 " + dp_inst.settings.minTime);
                if (this.hour < tempMinTime.getHours()) {
                    this.hour = this._defaults.hourMin = tempMinTime.getHours();
                    this.minute = this._defaults.minuteMin = tempMinTime.getMinutes()
                } else {
                    if (this.hour === tempMinTime.getHours() && this.minute < tempMinTime.getMinutes()) {
                        this.minute = this._defaults.minuteMin = tempMinTime.getMinutes()
                    } else {
                        if (this._defaults.hourMin < tempMinTime.getHours()) {
                            this._defaults.hourMin = tempMinTime.getHours();
                            this._defaults.minuteMin = tempMinTime.getMinutes()
                        } else {
                            if (this._defaults.hourMin === tempMinTime.getHours() === this.hour && this._defaults.minuteMin < tempMinTime.getMinutes()) {
                                this._defaults.minuteMin = tempMinTime.getMinutes()
                            } else {
                                this._defaults.minuteMin = 0
                            }
                        }
                    }
                }
            }
            if (dp_inst.settings.maxTime !== null) {
                var tempMaxTime = new Date("01/01/1970 " + dp_inst.settings.maxTime);
                if (this.hour > tempMaxTime.getHours()) {
                    this.hour = this._defaults.hourMax = tempMaxTime.getHours();
                    this.minute = this._defaults.minuteMax = tempMaxTime.getMinutes()
                } else {
                    if (this.hour === tempMaxTime.getHours() && this.minute > tempMaxTime.getMinutes()) {
                        this.minute = this._defaults.minuteMax = tempMaxTime.getMinutes()
                    } else {
                        if (this._defaults.hourMax > tempMaxTime.getHours()) {
                            this._defaults.hourMax = tempMaxTime.getHours();
                            this._defaults.minuteMax = tempMaxTime.getMinutes()
                        } else {
                            if (this._defaults.hourMax === tempMaxTime.getHours() === this.hour && this._defaults.minuteMax > tempMaxTime.getMinutes()) {
                                this._defaults.minuteMax = tempMaxTime.getMinutes()
                            } else {
                                this._defaults.minuteMax = 59
                            }
                        }
                    }
                }
            }
            if (adjustSliders !== undefined && adjustSliders === true) {
                var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),
                    minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),
                    secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),
                    millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10),
                    microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);
                if (this.hour_slider) {
                    this.control.options(this, this.hour_slider, "hour", {
                        min: this._defaults.hourMin,
                        max: hourMax,
                        step: this._defaults.stepHour
                    });
                    this.control.value(this, this.hour_slider, "hour", this.hour - (this.hour % this._defaults.stepHour))
                }
                if (this.minute_slider) {
                    this.control.options(this, this.minute_slider, "minute", {
                        min: this._defaults.minuteMin,
                        max: minMax,
                        step: this._defaults.stepMinute
                    });
                    this.control.value(this, this.minute_slider, "minute", this.minute - (this.minute % this._defaults.stepMinute))
                }
                if (this.second_slider) {
                    this.control.options(this, this.second_slider, "second", {
                        min: this._defaults.secondMin,
                        max: secMax,
                        step: this._defaults.stepSecond
                    });
                    this.control.value(this, this.second_slider, "second", this.second - (this.second % this._defaults.stepSecond))
                }
                if (this.millisec_slider) {
                    this.control.options(this, this.millisec_slider, "millisec", {
                        min: this._defaults.millisecMin,
                        max: millisecMax,
                        step: this._defaults.stepMillisec
                    });
                    this.control.value(this, this.millisec_slider, "millisec", this.millisec - (this.millisec % this._defaults.stepMillisec))
                }
                if (this.microsec_slider) {
                    this.control.options(this, this.microsec_slider, "microsec", {
                        min: this._defaults.microsecMin,
                        max: microsecMax,
                        step: this._defaults.stepMicrosec
                    });
                    this.control.value(this, this.microsec_slider, "microsec", this.microsec - (this.microsec % this._defaults.stepMicrosec))
                }
            }
        },
        _onTimeChange: function() {
            if (!this._defaults.showTimepicker) {
                return
            }
            var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, "hour") : false,
                minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, "minute") : false,
                second = (this.second_slider) ? this.control.value(this, this.second_slider, "second") : false,
                millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, "millisec") : false,
                microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, "microsec") : false,
                timezone = (this.timezone_select) ? this.timezone_select.val() : false,
                o = this._defaults,
                pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,
                pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;
            if (typeof(hour) === "object") {
                hour = false
            }
            if (typeof(minute) === "object") {
                minute = false
            }
            if (typeof(second) === "object") {
                second = false
            }
            if (typeof(millisec) === "object") {
                millisec = false
            }
            if (typeof(microsec) === "object") {
                microsec = false
            }
            if (typeof(timezone) === "object") {
                timezone = false
            }
            if (hour !== false) {
                hour = parseInt(hour, 10)
            }
            if (minute !== false) {
                minute = parseInt(minute, 10)
            }
            if (second !== false) {
                second = parseInt(second, 10)
            }
            if (millisec !== false) {
                millisec = parseInt(millisec, 10)
            }
            if (microsec !== false) {
                microsec = parseInt(microsec, 10)
            }
            if (timezone !== false) {
                timezone = timezone.toString()
            }
            var ampm = o[hour < 12 ? "amNames" : "pmNames"][0];
            var hasChanged = (hour !== parseInt(this.hour, 10) || minute !== parseInt(this.minute, 10) || second !== parseInt(this.second, 10) || millisec !== parseInt(this.millisec, 10) || microsec !== parseInt(this.microsec, 10) || (this.ampm.length > 0 && (hour < 12) !== ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) || (this.timezone !== null && timezone !== this.timezone.toString()));
            if (hasChanged) {
                if (hour !== false) {
                    this.hour = hour
                }
                if (minute !== false) {
                    this.minute = minute
                }
                if (second !== false) {
                    this.second = second
                }
                if (millisec !== false) {
                    this.millisec = millisec
                }
                if (microsec !== false) {
                    this.microsec = microsec
                }
                if (timezone !== false) {
                    this.timezone = timezone
                }
                if (!this.inst) {
                    this.inst = $.datepicker._getInst(this.$input[0])
                }
                this._limitMinMaxDateTime(this.inst, true)
            }
            if (this.support.ampm) {
                this.ampm = ampm
            }
            this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);
            if (this.$timeObj) {
                if (pickerTimeFormat === o.timeFormat) {
                    this.$timeObj.text(this.formattedTime + pickerTimeSuffix)
                } else {
                    this.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix)
                }
            }
            this.timeDefined = true;
            if (hasChanged) {
                this._updateDateTime()
            }
        },
        _onSelectHandler: function() {
            var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;
            var inputEl = this.$input ? this.$input[0] : null;
            if (onSelect && inputEl) {
                onSelect.apply(inputEl, [this.formattedDateTime, this])
            }
        },
        _updateDateTime: function(dp_inst) {
            dp_inst = this.inst || dp_inst;
            var dtTmp = (dp_inst.currentYear > 0 ? new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay) : new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),
                dt = $.datepicker._daylightSavingAdjust(dtTmp),
                dateFmt = $.datepicker._get(dp_inst, "dateFormat"),
                formatCfg = $.datepicker._getFormatConfig(dp_inst),
                timeAvailable = dt !== null && this.timeDefined;
            this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);
            var formattedDateTime = this.formattedDate;
            if (dp_inst.lastVal === "") {
                dp_inst.currentYear = dp_inst.selectedYear;
                dp_inst.currentMonth = dp_inst.selectedMonth;
                dp_inst.currentDay = dp_inst.selectedDay
            }
            if (this._defaults.timeOnly === true && this._defaults.timeOnlyShowDate === false) {
                formattedDateTime = this.formattedTime
            } else {
                if ((this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) || (this._defaults.timeOnly === true && this._defaults.timeOnlyShowDate === true)) {
                    formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix
                }
            }
            this.formattedDateTime = formattedDateTime;
            if (!this._defaults.showTimepicker) {
                this.$input.val(this.formattedDate)
            } else {
                if (this.$altInput && this._defaults.timeOnly === false && this._defaults.altFieldTimeOnly === true) {
                    this.$altInput.val(this.formattedTime);
                    this.$input.val(this.formattedDate)
                } else {
                    if (this.$altInput) {
                        this.$input.val(formattedDateTime);
                        var altFormattedDateTime = "",
                            altSeparator = this._defaults.altSeparator !== null ? this._defaults.altSeparator : this._defaults.separator,
                            altTimeSuffix = this._defaults.altTimeSuffix !== null ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;
                        if (!this._defaults.timeOnly) {
                            if (this._defaults.altFormat) {
                                altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg)
                            } else {
                                altFormattedDateTime = this.formattedDate
                            }
                            if (altFormattedDateTime) {
                                altFormattedDateTime += altSeparator
                            }
                        }
                        if (this._defaults.altTimeFormat !== null) {
                            altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix
                        } else {
                            altFormattedDateTime += this.formattedTime + altTimeSuffix
                        }
                        this.$altInput.val(altFormattedDateTime)
                    } else {
                        this.$input.val(formattedDateTime)
                    }
                }
            }
            this.$input.trigger("change")
        },
        _onFocus: function() {
            if (!this.$input.val() && this._defaults.defaultValue) {
                this.$input.val(this._defaults.defaultValue);
                var inst = $.datepicker._getInst(this.$input.get(0)),
                    tp_inst = $.datepicker._get(inst, "timepicker");
                if (tp_inst) {
                    if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {
                        try {
                            $.datepicker._updateDatepicker(inst)
                        } catch (err) {
                            $.timepicker.log(err)
                        }
                    }
                }
            }
        },
        _controls: {
            slider: {
                create: function(tp_inst, obj, unit, val, min, max, step) {
                    var rtl = tp_inst._defaults.isRTL;
                    return obj.prop("slide", null).slider({
                        orientation: "horizontal",
                        value: rtl ? val * -1 : val,
                        min: rtl ? max * -1 : min,
                        max: rtl ? min * -1 : max,
                        step: step,
                        slide: function(event, ui) {
                            tp_inst.control.value(tp_inst, $(this), unit, rtl ? ui.value * -1 : ui.value);
                            tp_inst._onTimeChange()
                        },
                        stop: function(event, ui) {
                            tp_inst._onSelectHandler()
                        }
                    })
                },
                options: function(tp_inst, obj, unit, opts, val) {
                    if (tp_inst._defaults.isRTL) {
                        if (typeof(opts) === "string") {
                            if (opts === "min" || opts === "max") {
                                if (val !== undefined) {
                                    return obj.slider(opts, val * -1)
                                }
                                return Math.abs(obj.slider(opts))
                            }
                            return obj.slider(opts)
                        }
                        var min = opts.min,
                            max = opts.max;
                        opts.min = opts.max = null;
                        if (min !== undefined) {
                            opts.max = min * -1
                        }
                        if (max !== undefined) {
                            opts.min = max * -1
                        }
                        return obj.slider(opts)
                    }
                    if (typeof(opts) === "string" && val !== undefined) {
                        return obj.slider(opts, val)
                    }
                    return obj.slider(opts)
                },
                value: function(tp_inst, obj, unit, val) {
                    if (tp_inst._defaults.isRTL) {
                        if (val !== undefined) {
                            return obj.slider("value", val * -1)
                        }
                        return Math.abs(obj.slider("value"))
                    }
                    if (val !== undefined) {
                        return obj.slider("value", val)
                    }
                    return obj.slider("value")
                }
            },
            select: {
                create: function(tp_inst, obj, unit, val, min, max, step) {
                    var sel = '<select class="ui-timepicker-select" data-unit="' + unit + '" data-min="' + min + '" data-max="' + max + '" data-step="' + step + '">',
                        format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;
                    for (var i = min; i <= max; i += step) {
                        sel += '<option value="' + i + '"' + (i === val ? " selected" : "") + ">";
                        if (unit === "hour") {
                            sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig, "")), {
                                hour: i
                            }, tp_inst._defaults)
                        } else {
                            if (unit === "millisec" || unit === "microsec" || i >= 10) {
                                sel += i
                            } else {
                                sel += "0" + i.toString()
                            }
                        }
                        sel += "</option>"
                    }
                    sel += "</select>";
                    obj.children("select").remove();
                    $(sel).appendTo(obj).change(function(e) {
                        tp_inst._onTimeChange();
                        tp_inst._onSelectHandler()
                    });
                    return obj
                },
                options: function(tp_inst, obj, unit, opts, val) {
                    var o = {},
                        $t = obj.children("select");
                    if (typeof(opts) === "string") {
                        if (val === undefined) {
                            return $t.data(opts)
                        }
                        o[opts] = val
                    } else {
                        o = opts
                    }
                    return tp_inst.control.create(tp_inst, obj, $t.data("unit"), $t.val(), o.min || $t.data("min"), o.max || $t.data("max"), o.step || $t.data("step"))
                },
                value: function(tp_inst, obj, unit, val) {
                    var $t = obj.children("select");
                    if (val !== undefined) {
                        return $t.val(val)
                    }
                    return $t.val()
                }
            }
        }
    });
    $.fn.extend({
        timepicker: function(o) {
            o = o || {};
            var tmp_args = Array.prototype.slice.call(arguments);
            if (typeof o === "object") {
                tmp_args[0] = $.extend(o, {
                    timeOnly: true
                })
            }
            return $(this).each(function() {
                $.fn.datetimepicker.apply($(this), tmp_args)
            })
        },
        datetimepicker: function(o) {
            o = o || {};
            var tmp_args = arguments;
            if (typeof(o) === "string") {
                if (o === "getDate" || (o === "option" && tmp_args.length === 2 && typeof(tmp_args[1]) === "string")) {
                    return $.fn.datepicker.apply($(this[0]), tmp_args)
                } else {
                    return this.each(function() {
                        var $t = $(this);
                        $t.datepicker.apply($t, tmp_args)
                    })
                }
            } else {
                return this.each(function() {
                    var $t = $(this);
                    $t.datepicker($.timepicker._newInst($t, o)._defaults)
                })
            }
        }
    });
    $.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
        var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);
        if (parseRes.timeObj) {
            var t = parseRes.timeObj;
            parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);
            parseRes.date.setMicroseconds(t.microsec)
        }
        return parseRes.date
    };
    $.datepicker.parseTime = function(timeFormat, timeString, options) {
        var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),
            iso8601 = (timeFormat.replace(/\'.*?\'/g, "").indexOf("Z") !== -1);
        var strictParse = function(f, s, o) {
            var getPatternAmpm = function(amNames, pmNames) {
                var markers = [];
                if (amNames) {
                    $.merge(markers, amNames)
                }
                if (pmNames) {
                    $.merge(markers, pmNames)
                }
                markers = $.map(markers, function(val) {
                    return val.replace(/[.*+?|()\[\]{}\\]/g, "\\$&")
                });
                return "(" + markers.join("|") + ")?"
            };
            var getFormatPositions = function(timeFormat) {
                var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),
                    orders = {
                        h: -1,
                        m: -1,
                        s: -1,
                        l: -1,
                        c: -1,
                        t: -1,
                        z: -1
                    };
                if (finds) {
                    for (var i = 0; i < finds.length; i++) {
                        if (orders[finds[i].toString().charAt(0)] === -1) {
                            orders[finds[i].toString().charAt(0)] = i + 1
                        }
                    }
                }
                return orders
            };
            var regstr = "^" + f.toString().replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function(match) {
                    var ml = match.length;
                    switch (match.charAt(0).toLowerCase()) {
                        case "h":
                            return ml === 1 ? "(\\d?\\d)" : "(\\d{" + ml + "})";
                        case "m":
                            return ml === 1 ? "(\\d?\\d)" : "(\\d{" + ml + "})";
                        case "s":
                            return ml === 1 ? "(\\d?\\d)" : "(\\d{" + ml + "})";
                        case "l":
                            return "(\\d?\\d?\\d)";
                        case "c":
                            return "(\\d?\\d?\\d)";
                        case "z":
                            return "(z|[-+]\\d\\d:?\\d\\d|\\S+)?";
                        case "t":
                            return getPatternAmpm(o.amNames, o.pmNames);
                        default:
                            return "(" + match.replace(/\'/g, "").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g, function(m) {
                                return "\\" + m
                            }) + ")?"
                    }
                }).replace(/\s/g, "\\s?") + o.timeSuffix + "$",
                order = getFormatPositions(f),
                ampm = "",
                treg;
            treg = s.match(new RegExp(regstr, "i"));
            var resTime = {
                hour: 0,
                minute: 0,
                second: 0,
                millisec: 0,
                microsec: 0
            };
            if (treg) {
                if (order.t !== -1) {
                    if (treg[order.t] === undefined || treg[order.t].length === 0) {
                        ampm = "";
                        resTime.ampm = ""
                    } else {
                        ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? "AM" : "PM";
                        resTime.ampm = o[ampm === "AM" ? "amNames" : "pmNames"][0]
                    }
                }
                if (order.h !== -1) {
                    if (ampm === "AM" && treg[order.h] === "12") {
                        resTime.hour = 0
                    } else {
                        if (ampm === "PM" && treg[order.h] !== "12") {
                            resTime.hour = parseInt(treg[order.h], 10) + 12
                        } else {
                            resTime.hour = Number(treg[order.h])
                        }
                    }
                }
                if (order.m !== -1) {
                    resTime.minute = Number(treg[order.m])
                }
                if (order.s !== -1) {
                    resTime.second = Number(treg[order.s])
                }
                if (order.l !== -1) {
                    resTime.millisec = Number(treg[order.l])
                }
                if (order.c !== -1) {
                    resTime.microsec = Number(treg[order.c])
                }
                if (order.z !== -1 && treg[order.z] !== undefined) {
                    resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z])
                }
                return resTime
            }
            return false
        };
        var looseParse = function(f, s, o) {
            try {
                var d = new Date("2012-01-01 " + s);
                if (isNaN(d.getTime())) {
                    d = new Date("2012-01-01T" + s);
                    if (isNaN(d.getTime())) {
                        d = new Date("01/01/2012 " + s);
                        if (isNaN(d.getTime())) {
                            throw "Unable to parse time with native Date: " + s
                        }
                    }
                }
                return {
                    hour: d.getHours(),
                    minute: d.getMinutes(),
                    second: d.getSeconds(),
                    millisec: d.getMilliseconds(),
                    microsec: d.getMicroseconds(),
                    timezone: d.getTimezoneOffset() * -1
                }
            } catch (err) {
                try {
                    return strictParse(f, s, o)
                } catch (err2) {
                    $.timepicker.log("Unable to parse \ntimeString: " + s + "\ntimeFormat: " + f)
                }
            }
            return false
        };
        if (typeof o.parse === "function") {
            return o.parse(timeFormat, timeString, o)
        }
        if (o.parse === "loose") {
            return looseParse(timeFormat, timeString, o)
        }
        return strictParse(timeFormat, timeString, o)
    };
    $.datepicker.formatTime = function(format, time, options) {
        options = options || {};
        options = $.extend({}, $.timepicker._defaults, options);
        time = $.extend({
            hour: 0,
            minute: 0,
            second: 0,
            millisec: 0,
            microsec: 0,
            timezone: null
        }, time);
        var tmptime = format,
            ampmName = options.amNames[0],
            hour = parseInt(time.hour, 10);
        if (hour > 11) {
            ampmName = options.pmNames[0]
        }
        tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function(match) {
            switch (match) {
                case "HH":
                    return ("0" + hour).slice(-2);
                case "H":
                    return hour;
                case "hh":
                    return ("0" + convert24to12(hour)).slice(-2);
                case "h":
                    return convert24to12(hour);
                case "mm":
                    return ("0" + time.minute).slice(-2);
                case "m":
                    return time.minute;
                case "ss":
                    return ("0" + time.second).slice(-2);
                case "s":
                    return time.second;
                case "l":
                    return ("00" + time.millisec).slice(-3);
                case "c":
                    return ("00" + time.microsec).slice(-3);
                case "z":
                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, false);
                case "Z":
                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, true);
                case "T":
                    return ampmName.charAt(0).toUpperCase();
                case "TT":
                    return ampmName.toUpperCase();
                case "t":
                    return ampmName.charAt(0).toLowerCase();
                case "tt":
                    return ampmName.toLowerCase();
                default:
                    return match.replace(/'/g, "")
            }
        });
        return tmptime
    };
    $.datepicker._base_selectDate = $.datepicker._selectDate;
    $.datepicker._selectDate = function(id, dateStr) {
        var inst = this._getInst($(id)[0]),
            tp_inst = this._get(inst, "timepicker");
        if (tp_inst && inst.settings.showTimepicker) {
            tp_inst._limitMinMaxDateTime(inst, true);
            inst.inline = inst.stay_open = true;
            this._base_selectDate(id, dateStr);
            inst.inline = inst.stay_open = false;
            this._notifyChange(inst);
            this._updateDatepicker(inst)
        } else {
            this._base_selectDate(id, dateStr)
        }
    };
    $.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;
    $.datepicker._updateDatepicker = function(inst) {
        var input = inst.input[0];
        if ($.datepicker._curInst && $.datepicker._curInst !== inst && $.datepicker._datepickerShowing && $.datepicker._lastInput !== input) {
            return
        }
        if (typeof(inst.stay_open) !== "boolean" || inst.stay_open === false) {
            this._base_updateDatepicker(inst);
            var tp_inst = this._get(inst, "timepicker");
            if (tp_inst) {
                tp_inst._addTimePicker(inst)
            }
        }
    };
    $.datepicker._base_doKeyPress = $.datepicker._doKeyPress;
    $.datepicker._doKeyPress = function(event) {
        var inst = $.datepicker._getInst(event.target),
            tp_inst = $.datepicker._get(inst, "timepicker");
        if (tp_inst) {
            if ($.datepicker._get(inst, "constrainInput")) {
                var ampm = tp_inst.support.ampm,
                    tz = tp_inst._defaults.showTimezone !== null ? tp_inst._defaults.showTimezone : tp_inst.support.timezone,
                    dateChars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat")),
                    datetimeChars = tp_inst._defaults.timeFormat.toString().replace(/[hms]/g, "").replace(/TT/g, ampm ? "APM" : "").replace(/Tt/g, ampm ? "AaPpMm" : "").replace(/tT/g, ampm ? "AaPpMm" : "").replace(/T/g, ampm ? "AP" : "").replace(/tt/g, ampm ? "apm" : "").replace(/t/g, ampm ? "ap" : "") + " " + tp_inst._defaults.separator + tp_inst._defaults.timeSuffix + (tz ? tp_inst._defaults.timezoneList.join("") : "") + (tp_inst._defaults.amNames.join("")) + (tp_inst._defaults.pmNames.join("")) + dateChars,
                    chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);
                return event.ctrlKey || (chr < " " || !dateChars || datetimeChars.indexOf(chr) > -1)
            }
        }
        return $.datepicker._base_doKeyPress(event)
    };
    $.datepicker._base_updateAlternate = $.datepicker._updateAlternate;
    $.datepicker._updateAlternate = function(inst) {
        var tp_inst = this._get(inst, "timepicker");
        if (tp_inst) {
            var altField = tp_inst._defaults.altField;
            if (altField) {
                var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,
                    date = this._getDate(inst),
                    formatCfg = $.datepicker._getFormatConfig(inst),
                    altFormattedDateTime = "",
                    altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator,
                    altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,
                    altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;
                altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;
                if (!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly && date !== null) {
                    if (tp_inst._defaults.altFormat) {
                        altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime
                    } else {
                        altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime
                    }
                }
                $(altField).val(inst.input.val() ? altFormattedDateTime : "")
            }
        } else {
            $.datepicker._base_updateAlternate(inst)
        }
    };
    $.datepicker._base_doKeyUp = $.datepicker._doKeyUp;
    $.datepicker._doKeyUp = function(event) {
        var inst = $.datepicker._getInst(event.target),
            tp_inst = $.datepicker._get(inst, "timepicker");
        if (tp_inst) {
            if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {
                try {
                    $.datepicker._updateDatepicker(inst)
                } catch (err) {
                    $.timepicker.log(err)
                }
            }
        }
        return $.datepicker._base_doKeyUp(event)
    };
    $.datepicker._base_gotoToday = $.datepicker._gotoToday;
    $.datepicker._gotoToday = function(id) {
        var inst = this._getInst($(id)[0]),
            $dp = inst.dpDiv;
        this._base_gotoToday(id);
        var tp_inst = this._get(inst, "timepicker");
        selectLocalTimezone(tp_inst);
        var now = new Date();
        this._setTime(inst, now);
        $(".ff-ui-datepicker-today", $dp).click()
    };
    $.datepicker._disableTimepickerDatepicker = function(target) {
        var inst = this._getInst(target);
        if (!inst) {
            return
        }
        var tp_inst = this._get(inst, "timepicker");
        $(target).datepicker("getDate");
        if (tp_inst) {
            inst.settings.showTimepicker = false;
            tp_inst._defaults.showTimepicker = false;
            tp_inst._updateDateTime(inst)
        }
    };
    $.datepicker._enableTimepickerDatepicker = function(target) {
        var inst = this._getInst(target);
        if (!inst) {
            return
        }
        var tp_inst = this._get(inst, "timepicker");
        $(target).datepicker("getDate");
        if (tp_inst) {
            inst.settings.showTimepicker = true;
            tp_inst._defaults.showTimepicker = true;
            tp_inst._addTimePicker(inst);
            tp_inst._updateDateTime(inst)
        }
    };
    $.datepicker._setTime = function(inst, date) {
        var tp_inst = this._get(inst, "timepicker");
        if (tp_inst) {
            var defaults = tp_inst._defaults;
            tp_inst.hour = date ? date.getHours() : defaults.hour;
            tp_inst.minute = date ? date.getMinutes() : defaults.minute;
            tp_inst.second = date ? date.getSeconds() : defaults.second;
            tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;
            tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;
            tp_inst._limitMinMaxDateTime(inst, true);
            tp_inst._onTimeChange();
            tp_inst._updateDateTime(inst)
        }
    };
    $.datepicker._setTimeDatepicker = function(target, date, withDate) {
        var inst = this._getInst(target);
        if (!inst) {
            return
        }
        var tp_inst = this._get(inst, "timepicker");
        if (tp_inst) {
            this._setDateFromField(inst);
            var tp_date;
            if (date) {
                if (typeof date === "string") {
                    tp_inst._parseTime(date, withDate);
                    tp_date = new Date();
                    tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
                    tp_date.setMicroseconds(tp_inst.microsec)
                } else {
                    tp_date = new Date(date.getTime());
                    tp_date.setMicroseconds(date.getMicroseconds())
                }
                if (tp_date.toString() === "Invalid Date") {
                    tp_date = undefined
                }
                this._setTime(inst, tp_date)
            }
        }
    };
    $.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;
    $.datepicker._setDateDatepicker = function(target, _date) {
        var inst = this._getInst(target);
        var date = _date;
        if (!inst) {
            return
        }
        if (typeof(_date) === "string") {
            date = new Date(_date);
            if (!date.getTime()) {
                this._base_setDateDatepicker.apply(this, arguments);
                date = $(target).datepicker("getDate")
            }
        }
        var tp_inst = this._get(inst, "timepicker");
        var tp_date;
        if (date instanceof Date) {
            tp_date = new Date(date.getTime());
            tp_date.setMicroseconds(date.getMicroseconds())
        } else {
            tp_date = date
        }
        if (tp_inst && tp_date) {
            if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {
                tp_inst.timezone = tp_date.getTimezoneOffset() * -1
            }
            date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
            tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone)
        }
        this._updateDatepicker(inst);
        this._base_setDateDatepicker.apply(this, arguments);
        this._setTimeDatepicker(target, tp_date, true)
    };
    $.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;
    $.datepicker._getDateDatepicker = function(target, noDefault) {
        var inst = this._getInst(target);
        if (!inst) {
            return
        }
        var tp_inst = this._get(inst, "timepicker");
        if (tp_inst) {
            if (inst.lastVal === undefined) {
                this._setDateFromField(inst, noDefault)
            }
            var date = this._getDate(inst);
            if (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {
                date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
                date.setMicroseconds(tp_inst.microsec);
                if (tp_inst.timezone != null) {
                    if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {
                        tp_inst.timezone = date.getTimezoneOffset() * -1
                    }
                    date = $.timepicker.timezoneAdjust(date, tp_inst.timezone)
                }
            }
            return date
        }
        return this._base_getDateDatepicker(target, noDefault)
    };
    $.datepicker._base_parseDate = $.datepicker.parseDate;
    $.datepicker.parseDate = function(format, value, settings) {
        var date;
        try {
            date = this._base_parseDate(format, value, settings)
        } catch (err) {
            if (err.indexOf(":") >= 0) {
                date = this._base_parseDate(format, value.substring(0, value.length - (err.length - err.indexOf(":") - 2)), settings);
                $.timepicker.log("Error parsing the date string: " + err + "\ndate string = " + value + "\ndate format = " + format)
            } else {
                throw err
            }
        }
        return date
    };
    $.datepicker._base_formatDate = $.datepicker._formatDate;
    $.datepicker._formatDate = function(inst, day, month, year) {
        var tp_inst = this._get(inst, "timepicker");
        if (tp_inst) {
            tp_inst._updateDateTime(inst);
            return tp_inst.$input.val()
        }
        return this._base_formatDate(inst)
    };
    $.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;
    $.datepicker._optionDatepicker = function(target, name, value) {
        var inst = this._getInst(target),
            name_clone;
        if (!inst) {
            return null
        }
        var tp_inst = this._get(inst, "timepicker");
        if (tp_inst) {
            var min = null,
                max = null,
                onselect = null,
                overrides = tp_inst._defaults.evnts,
                fns = {},
                prop;
            if (typeof name === "string") {
                if (name === "minDate" || name === "minDateTime") {
                    min = value
                } else {
                    if (name === "maxDate" || name === "maxDateTime") {
                        max = value
                    } else {
                        if (name === "onSelect") {
                            onselect = value
                        } else {
                            if (overrides.hasOwnProperty(name)) {
                                if (typeof(value) === "undefined") {
                                    return overrides[name]
                                }
                                fns[name] = value;
                                name_clone = {}
                            }
                        }
                    }
                }
            } else {
                if (typeof name === "object") {
                    if (name.minDate) {
                        min = name.minDate
                    } else {
                        if (name.minDateTime) {
                            min = name.minDateTime
                        } else {
                            if (name.maxDate) {
                                max = name.maxDate
                            } else {
                                if (name.maxDateTime) {
                                    max = name.maxDateTime
                                }
                            }
                        }
                    }
                    for (prop in overrides) {
                        if (overrides.hasOwnProperty(prop) && name[prop]) {
                            fns[prop] = name[prop]
                        }
                    }
                }
            }
            for (prop in fns) {
                if (fns.hasOwnProperty(prop)) {
                    overrides[prop] = fns[prop];
                    if (!name_clone) {
                        name_clone = $.extend({}, name)
                    }
                    delete name_clone[prop]
                }
            }
            if (name_clone && isEmptyObject(name_clone)) {
                return
            }
            if (min) {
                if (min === 0) {
                    min = new Date()
                } else {
                    min = new Date(min)
                }
                tp_inst._defaults.minDate = min;
                tp_inst._defaults.minDateTime = min
            } else {
                if (max) {
                    if (max === 0) {
                        max = new Date()
                    } else {
                        max = new Date(max)
                    }
                    tp_inst._defaults.maxDate = max;
                    tp_inst._defaults.maxDateTime = max
                } else {
                    if (onselect) {
                        tp_inst._defaults.onSelect = onselect
                    }
                }
            }
        }
        if (value === undefined) {
            return this._base_optionDatepicker.call($.datepicker, target, name)
        }
        return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value)
    };
    var isEmptyObject = function(obj) {
        var prop;
        for (prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                return false
            }
        }
        return true
    };
    var extendRemove = function(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] === null || props[name] === undefined) {
                target[name] = props[name]
            }
        }
        return target
    };
    var detectSupport = function(timeFormat) {
        var tf = timeFormat.replace(/'.*?'/g, "").toLowerCase(),
            isIn = function(f, t) {
                return f.indexOf(t) !== -1 ? true : false
            };
        return {
            hour: isIn(tf, "h"),
            minute: isIn(tf, "m"),
            second: isIn(tf, "s"),
            millisec: isIn(tf, "l"),
            microsec: isIn(tf, "c"),
            timezone: isIn(tf, "z"),
            ampm: isIn(tf, "t") && isIn(timeFormat, "h"),
            iso8601: isIn(timeFormat, "Z")
        }
    };
    var convert24to12 = function(hour) {
        hour %= 12;
        if (hour === 0) {
            hour = 12
        }
        return String(hour)
    };
    var computeEffectiveSetting = function(settings, property) {
        return settings && settings[property] ? settings[property] : $.timepicker._defaults[property]
    };
    var splitDateTime = function(dateTimeString, timeSettings) {
        var separator = computeEffectiveSetting(timeSettings, "separator"),
            format = computeEffectiveSetting(timeSettings, "timeFormat"),
            timeParts = format.split(separator),
            timePartsLen = timeParts.length,
            allParts = dateTimeString.split(separator),
            allPartsLen = allParts.length;
        if (allPartsLen > 1) {
            return {
                dateString: allParts.splice(0, allPartsLen - timePartsLen).join(separator),
                timeString: allParts.splice(0, timePartsLen).join(separator)
            }
        }
        return {
            dateString: dateTimeString,
            timeString: ""
        }
    };
    var parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
        var date, parts, parsedTime;
        parts = splitDateTime(dateTimeString, timeSettings);
        date = $.datepicker._base_parseDate(dateFormat, parts.dateString, dateSettings);
        if (parts.timeString === "") {
            return {
                date: date
            }
        }
        parsedTime = $.datepicker.parseTime(timeFormat, parts.timeString, timeSettings);
        if (!parsedTime) {
            throw "Wrong time format"
        }
        return {
            date: date,
            timeObj: parsedTime
        }
    };
    var selectLocalTimezone = function(tp_inst, date) {
        if (tp_inst && tp_inst.timezone_select) {
            var now = date || new Date();
            tp_inst.timezone_select.val(-now.getTimezoneOffset())
        }
    };
    $.timepicker = new Timepicker();
    $.timepicker.timezoneOffsetString = function(tzMinutes, iso8601) {
        if (isNaN(tzMinutes) || tzMinutes > 840 || tzMinutes < -720) {
            return tzMinutes
        }
        var off = tzMinutes,
            minutes = off % 60,
            hours = (off - minutes) / 60,
            iso = iso8601 ? ":" : "",
            tz = (off >= 0 ? "+" : "-") + ("0" + Math.abs(hours)).slice(-2) + iso + ("0" + Math.abs(minutes)).slice(-2);
        if (tz === "+00:00") {
            return "Z"
        }
        return tz
    };
    $.timepicker.timezoneOffsetNumber = function(tzString) {
        var normalized = tzString.toString().replace(":", "");
        if (normalized.toUpperCase() === "Z") {
            return 0
        }
        if (!/^(\-|\+)\d{4}$/.test(normalized)) {
            return tzString
        }
        return ((normalized.substr(0, 1) === "-" ? -1 : 1) * ((parseInt(normalized.substr(1, 2), 10) * 60) + parseInt(normalized.substr(3, 2), 10)))
    };
    $.timepicker.timezoneAdjust = function(date, toTimezone) {
        var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);
        if (!isNaN(toTz)) {
            date.setMinutes(date.getMinutes() + -date.getTimezoneOffset() - toTz)
        }
        return date
    };
    $.timepicker.timeRange = function(startTime, endTime, options) {
        return $.timepicker.handleRange("timepicker", startTime, endTime, options)
    };
    $.timepicker.datetimeRange = function(startTime, endTime, options) {
        $.timepicker.handleRange("datetimepicker", startTime, endTime, options)
    };
    $.timepicker.dateRange = function(startTime, endTime, options) {
        $.timepicker.handleRange("datepicker", startTime, endTime, options)
    };
    $.timepicker.handleRange = function(method, startTime, endTime, options) {
        options = $.extend({}, {
            minInterval: 0,
            maxInterval: 0,
            start: {},
            end: {}
        }, options);
        var timeOnly = false;
        if (method === "timepicker") {
            timeOnly = true;
            method = "datetimepicker"
        }

        function checkDates(changed, other) {
            var startdt = startTime[method]("getDate"),
                enddt = endTime[method]("getDate"),
                changeddt = changed[method]("getDate");
            if (startdt !== null) {
                var minDate = new Date(startdt.getTime()),
                    maxDate = new Date(startdt.getTime());
                minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);
                maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);
                if (options.minInterval > 0 && minDate > enddt) {
                    endTime[method]("setDate", minDate)
                } else {
                    if (options.maxInterval > 0 && maxDate < enddt) {
                        endTime[method]("setDate", maxDate)
                    } else {
                        if (startdt > enddt) {
                            other[method]("setDate", changeddt)
                        }
                    }
                }
            }
        }

        function selected(changed, other, option) {
            if (!changed.val()) {
                return
            }
            var date = changed[method].call(changed, "getDate");
            if (date !== null && options.minInterval > 0) {
                if (option === "minDate") {
                    date.setMilliseconds(date.getMilliseconds() + options.minInterval)
                }
                if (option === "maxDate") {
                    date.setMilliseconds(date.getMilliseconds() - options.minInterval)
                }
            }
            if (date.getTime) {
                other[method].call(other, "option", option, date)
            }
        }
        $.fn[method].call(startTime, $.extend({
            timeOnly: timeOnly,
            onClose: function(dateText, inst) {
                checkDates($(this), endTime)
            },
            onSelect: function(selectedDateTime) {
                selected($(this), endTime, "minDate")
            }
        }, options, options.start));
        $.fn[method].call(endTime, $.extend({
            timeOnly: timeOnly,
            onClose: function(dateText, inst) {
                checkDates($(this), startTime)
            },
            onSelect: function(selectedDateTime) {
                selected($(this), startTime, "maxDate")
            }
        }, options, options.end));
        checkDates(startTime, endTime);
        selected(startTime, endTime, "minDate");
        selected(endTime, startTime, "maxDate");
        return $([startTime.get(0), endTime.get(0)])
    };
    $.timepicker.log = function(err) {
        if (window.console) {
            window.console.log(err)
        }
    };
    $.timepicker._util = {
        _extendRemove: extendRemove,
        _isEmptyObject: isEmptyObject,
        _convert24to12: convert24to12,
        _detectSupport: detectSupport,
        _selectLocalTimezone: selectLocalTimezone,
        _computeEffectiveSetting: computeEffectiveSetting,
        _splitDateTime: splitDateTime,
        _parseDateTimeInternal: parseDateTimeInternal
    };
    if (!Date.prototype.getMicroseconds) {
        Date.prototype.microseconds = 0;
        Date.prototype.getMicroseconds = function() {
            return this.microseconds
        };
        Date.prototype.setMicroseconds = function(m) {
            this.setMilliseconds(this.getMilliseconds() + Math.floor(m / 1000));
            this.microseconds = m % 1000;
            return this
        }
    }
    $.timepicker.version = "@@version"
})(fs);
(function($) {
    if (typeof $.fn.each2 == "undefined") {
        $.extend($.fn, {
            each2: function(c) {
                var j = $([0]),
                    i = -1,
                    l = this.length;
                while (++i < l && (j.context = j[0] = this[i]) && c.call(j[0], i, j) !== false) {}
                return this
            }
        })
    }
})(fs);
(function($, undefined) {
    if (window.Select2 !== undefined) {
        return
    }
    var KEY, AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer, lastMousePosition = {
            x: 0,
            y: 0
        },
        $document, scrollBarDimensions, KEY = {
            TAB: 9,
            ENTER: 13,
            ESC: 27,
            SPACE: 32,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            HOME: 36,
            END: 35,
            BACKSPACE: 8,
            DELETE: 46,
            isArrow: function(k) {
                k = k.which ? k.which : k;
                switch (k) {
                    case KEY.LEFT:
                    case KEY.RIGHT:
                    case KEY.UP:
                    case KEY.DOWN:
                        return true
                }
                return false
            },
            isControl: function(e) {
                var k = e.which;
                switch (k) {
                    case KEY.SHIFT:
                    case KEY.CTRL:
                    case KEY.ALT:
                        return true
                }
                if (e.metaKey) {
                    return true
                }
                return false
            },
            isFunctionKey: function(k) {
                k = k.which ? k.which : k;
                return k >= 112 && k <= 123
            }
        },
        MEASURE_SCROLLBAR_TEMPLATE = "<div class='select2-measure-scrollbar'></div>",
        DIACRITICS = {
            "\u24B6": "A",
            "\uFF21": "A",
            "\u00C0": "A",
            "\u00C1": "A",
            "\u00C2": "A",
            "\u1EA6": "A",
            "\u1EA4": "A",
            "\u1EAA": "A",
            "\u1EA8": "A",
            "\u00C3": "A",
            "\u0100": "A",
            "\u0102": "A",
            "\u1EB0": "A",
            "\u1EAE": "A",
            "\u1EB4": "A",
            "\u1EB2": "A",
            "\u0226": "A",
            "\u01E0": "A",
            "\u00C4": "A",
            "\u01DE": "A",
            "\u1EA2": "A",
            "\u00C5": "A",
            "\u01FA": "A",
            "\u01CD": "A",
            "\u0200": "A",
            "\u0202": "A",
            "\u1EA0": "A",
            "\u1EAC": "A",
            "\u1EB6": "A",
            "\u1E00": "A",
            "\u0104": "A",
            "\u023A": "A",
            "\u2C6F": "A",
            "\uA732": "AA",
            "\u00C6": "AE",
            "\u01FC": "AE",
            "\u01E2": "AE",
            "\uA734": "AO",
            "\uA736": "AU",
            "\uA738": "AV",
            "\uA73A": "AV",
            "\uA73C": "AY",
            "\u24B7": "B",
            "\uFF22": "B",
            "\u1E02": "B",
            "\u1E04": "B",
            "\u1E06": "B",
            "\u0243": "B",
            "\u0182": "B",
            "\u0181": "B",
            "\u24B8": "C",
            "\uFF23": "C",
            "\u0106": "C",
            "\u0108": "C",
            "\u010A": "C",
            "\u010C": "C",
            "\u00C7": "C",
            "\u1E08": "C",
            "\u0187": "C",
            "\u023B": "C",
            "\uA73E": "C",
            "\u24B9": "D",
            "\uFF24": "D",
            "\u1E0A": "D",
            "\u010E": "D",
            "\u1E0C": "D",
            "\u1E10": "D",
            "\u1E12": "D",
            "\u1E0E": "D",
            "\u0110": "D",
            "\u018B": "D",
            "\u018A": "D",
            "\u0189": "D",
            "\uA779": "D",
            "\u01F1": "DZ",
            "\u01C4": "DZ",
            "\u01F2": "Dz",
            "\u01C5": "Dz",
            "\u24BA": "E",
            "\uFF25": "E",
            "\u00C8": "E",
            "\u00C9": "E",
            "\u00CA": "E",
            "\u1EC0": "E",
            "\u1EBE": "E",
            "\u1EC4": "E",
            "\u1EC2": "E",
            "\u1EBC": "E",
            "\u0112": "E",
            "\u1E14": "E",
            "\u1E16": "E",
            "\u0114": "E",
            "\u0116": "E",
            "\u00CB": "E",
            "\u1EBA": "E",
            "\u011A": "E",
            "\u0204": "E",
            "\u0206": "E",
            "\u1EB8": "E",
            "\u1EC6": "E",
            "\u0228": "E",
            "\u1E1C": "E",
            "\u0118": "E",
            "\u1E18": "E",
            "\u1E1A": "E",
            "\u0190": "E",
            "\u018E": "E",
            "\u24BB": "F",
            "\uFF26": "F",
            "\u1E1E": "F",
            "\u0191": "F",
            "\uA77B": "F",
            "\u24BC": "G",
            "\uFF27": "G",
            "\u01F4": "G",
            "\u011C": "G",
            "\u1E20": "G",
            "\u011E": "G",
            "\u0120": "G",
            "\u01E6": "G",
            "\u0122": "G",
            "\u01E4": "G",
            "\u0193": "G",
            "\uA7A0": "G",
            "\uA77D": "G",
            "\uA77E": "G",
            "\u24BD": "H",
            "\uFF28": "H",
            "\u0124": "H",
            "\u1E22": "H",
            "\u1E26": "H",
            "\u021E": "H",
            "\u1E24": "H",
            "\u1E28": "H",
            "\u1E2A": "H",
            "\u0126": "H",
            "\u2C67": "H",
            "\u2C75": "H",
            "\uA78D": "H",
            "\u24BE": "I",
            "\uFF29": "I",
            "\u00CC": "I",
            "\u00CD": "I",
            "\u00CE": "I",
            "\u0128": "I",
            "\u012A": "I",
            "\u012C": "I",
            "\u0130": "I",
            "\u00CF": "I",
            "\u1E2E": "I",
            "\u1EC8": "I",
            "\u01CF": "I",
            "\u0208": "I",
            "\u020A": "I",
            "\u1ECA": "I",
            "\u012E": "I",
            "\u1E2C": "I",
            "\u0197": "I",
            "\u24BF": "J",
            "\uFF2A": "J",
            "\u0134": "J",
            "\u0248": "J",
            "\u24C0": "K",
            "\uFF2B": "K",
            "\u1E30": "K",
            "\u01E8": "K",
            "\u1E32": "K",
            "\u0136": "K",
            "\u1E34": "K",
            "\u0198": "K",
            "\u2C69": "K",
            "\uA740": "K",
            "\uA742": "K",
            "\uA744": "K",
            "\uA7A2": "K",
            "\u24C1": "L",
            "\uFF2C": "L",
            "\u013F": "L",
            "\u0139": "L",
            "\u013D": "L",
            "\u1E36": "L",
            "\u1E38": "L",
            "\u013B": "L",
            "\u1E3C": "L",
            "\u1E3A": "L",
            "\u0141": "L",
            "\u023D": "L",
            "\u2C62": "L",
            "\u2C60": "L",
            "\uA748": "L",
            "\uA746": "L",
            "\uA780": "L",
            "\u01C7": "LJ",
            "\u01C8": "Lj",
            "\u24C2": "M",
            "\uFF2D": "M",
            "\u1E3E": "M",
            "\u1E40": "M",
            "\u1E42": "M",
            "\u2C6E": "M",
            "\u019C": "M",
            "\u24C3": "N",
            "\uFF2E": "N",
            "\u01F8": "N",
            "\u0143": "N",
            "\u00D1": "N",
            "\u1E44": "N",
            "\u0147": "N",
            "\u1E46": "N",
            "\u0145": "N",
            "\u1E4A": "N",
            "\u1E48": "N",
            "\u0220": "N",
            "\u019D": "N",
            "\uA790": "N",
            "\uA7A4": "N",
            "\u01CA": "NJ",
            "\u01CB": "Nj",
            "\u24C4": "O",
            "\uFF2F": "O",
            "\u00D2": "O",
            "\u00D3": "O",
            "\u00D4": "O",
            "\u1ED2": "O",
            "\u1ED0": "O",
            "\u1ED6": "O",
            "\u1ED4": "O",
            "\u00D5": "O",
            "\u1E4C": "O",
            "\u022C": "O",
            "\u1E4E": "O",
            "\u014C": "O",
            "\u1E50": "O",
            "\u1E52": "O",
            "\u014E": "O",
            "\u022E": "O",
            "\u0230": "O",
            "\u00D6": "O",
            "\u022A": "O",
            "\u1ECE": "O",
            "\u0150": "O",
            "\u01D1": "O",
            "\u020C": "O",
            "\u020E": "O",
            "\u01A0": "O",
            "\u1EDC": "O",
            "\u1EDA": "O",
            "\u1EE0": "O",
            "\u1EDE": "O",
            "\u1EE2": "O",
            "\u1ECC": "O",
            "\u1ED8": "O",
            "\u01EA": "O",
            "\u01EC": "O",
            "\u00D8": "O",
            "\u01FE": "O",
            "\u0186": "O",
            "\u019F": "O",
            "\uA74A": "O",
            "\uA74C": "O",
            "\u01A2": "OI",
            "\uA74E": "OO",
            "\u0222": "OU",
            "\u24C5": "P",
            "\uFF30": "P",
            "\u1E54": "P",
            "\u1E56": "P",
            "\u01A4": "P",
            "\u2C63": "P",
            "\uA750": "P",
            "\uA752": "P",
            "\uA754": "P",
            "\u24C6": "Q",
            "\uFF31": "Q",
            "\uA756": "Q",
            "\uA758": "Q",
            "\u024A": "Q",
            "\u24C7": "R",
            "\uFF32": "R",
            "\u0154": "R",
            "\u1E58": "R",
            "\u0158": "R",
            "\u0210": "R",
            "\u0212": "R",
            "\u1E5A": "R",
            "\u1E5C": "R",
            "\u0156": "R",
            "\u1E5E": "R",
            "\u024C": "R",
            "\u2C64": "R",
            "\uA75A": "R",
            "\uA7A6": "R",
            "\uA782": "R",
            "\u24C8": "S",
            "\uFF33": "S",
            "\u1E9E": "S",
            "\u015A": "S",
            "\u1E64": "S",
            "\u015C": "S",
            "\u1E60": "S",
            "\u0160": "S",
            "\u1E66": "S",
            "\u1E62": "S",
            "\u1E68": "S",
            "\u0218": "S",
            "\u015E": "S",
            "\u2C7E": "S",
            "\uA7A8": "S",
            "\uA784": "S",
            "\u24C9": "T",
            "\uFF34": "T",
            "\u1E6A": "T",
            "\u0164": "T",
            "\u1E6C": "T",
            "\u021A": "T",
            "\u0162": "T",
            "\u1E70": "T",
            "\u1E6E": "T",
            "\u0166": "T",
            "\u01AC": "T",
            "\u01AE": "T",
            "\u023E": "T",
            "\uA786": "T",
            "\uA728": "TZ",
            "\u24CA": "U",
            "\uFF35": "U",
            "\u00D9": "U",
            "\u00DA": "U",
            "\u00DB": "U",
            "\u0168": "U",
            "\u1E78": "U",
            "\u016A": "U",
            "\u1E7A": "U",
            "\u016C": "U",
            "\u00DC": "U",
            "\u01DB": "U",
            "\u01D7": "U",
            "\u01D5": "U",
            "\u01D9": "U",
            "\u1EE6": "U",
            "\u016E": "U",
            "\u0170": "U",
            "\u01D3": "U",
            "\u0214": "U",
            "\u0216": "U",
            "\u01AF": "U",
            "\u1EEA": "U",
            "\u1EE8": "U",
            "\u1EEE": "U",
            "\u1EEC": "U",
            "\u1EF0": "U",
            "\u1EE4": "U",
            "\u1E72": "U",
            "\u0172": "U",
            "\u1E76": "U",
            "\u1E74": "U",
            "\u0244": "U",
            "\u24CB": "V",
            "\uFF36": "V",
            "\u1E7C": "V",
            "\u1E7E": "V",
            "\u01B2": "V",
            "\uA75E": "V",
            "\u0245": "V",
            "\uA760": "VY",
            "\u24CC": "W",
            "\uFF37": "W",
            "\u1E80": "W",
            "\u1E82": "W",
            "\u0174": "W",
            "\u1E86": "W",
            "\u1E84": "W",
            "\u1E88": "W",
            "\u2C72": "W",
            "\u24CD": "X",
            "\uFF38": "X",
            "\u1E8A": "X",
            "\u1E8C": "X",
            "\u24CE": "Y",
            "\uFF39": "Y",
            "\u1EF2": "Y",
            "\u00DD": "Y",
            "\u0176": "Y",
            "\u1EF8": "Y",
            "\u0232": "Y",
            "\u1E8E": "Y",
            "\u0178": "Y",
            "\u1EF6": "Y",
            "\u1EF4": "Y",
            "\u01B3": "Y",
            "\u024E": "Y",
            "\u1EFE": "Y",
            "\u24CF": "Z",
            "\uFF3A": "Z",
            "\u0179": "Z",
            "\u1E90": "Z",
            "\u017B": "Z",
            "\u017D": "Z",
            "\u1E92": "Z",
            "\u1E94": "Z",
            "\u01B5": "Z",
            "\u0224": "Z",
            "\u2C7F": "Z",
            "\u2C6B": "Z",
            "\uA762": "Z",
            "\u24D0": "a",
            "\uFF41": "a",
            "\u1E9A": "a",
            "\u00E0": "a",
            "\u00E1": "a",
            "\u00E2": "a",
            "\u1EA7": "a",
            "\u1EA5": "a",
            "\u1EAB": "a",
            "\u1EA9": "a",
            "\u00E3": "a",
            "\u0101": "a",
            "\u0103": "a",
            "\u1EB1": "a",
            "\u1EAF": "a",
            "\u1EB5": "a",
            "\u1EB3": "a",
            "\u0227": "a",
            "\u01E1": "a",
            "\u00E4": "a",
            "\u01DF": "a",
            "\u1EA3": "a",
            "\u00E5": "a",
            "\u01FB": "a",
            "\u01CE": "a",
            "\u0201": "a",
            "\u0203": "a",
            "\u1EA1": "a",
            "\u1EAD": "a",
            "\u1EB7": "a",
            "\u1E01": "a",
            "\u0105": "a",
            "\u2C65": "a",
            "\u0250": "a",
            "\uA733": "aa",
            "\u00E6": "ae",
            "\u01FD": "ae",
            "\u01E3": "ae",
            "\uA735": "ao",
            "\uA737": "au",
            "\uA739": "av",
            "\uA73B": "av",
            "\uA73D": "ay",
            "\u24D1": "b",
            "\uFF42": "b",
            "\u1E03": "b",
            "\u1E05": "b",
            "\u1E07": "b",
            "\u0180": "b",
            "\u0183": "b",
            "\u0253": "b",
            "\u24D2": "c",
            "\uFF43": "c",
            "\u0107": "c",
            "\u0109": "c",
            "\u010B": "c",
            "\u010D": "c",
            "\u00E7": "c",
            "\u1E09": "c",
            "\u0188": "c",
            "\u023C": "c",
            "\uA73F": "c",
            "\u2184": "c",
            "\u24D3": "d",
            "\uFF44": "d",
            "\u1E0B": "d",
            "\u010F": "d",
            "\u1E0D": "d",
            "\u1E11": "d",
            "\u1E13": "d",
            "\u1E0F": "d",
            "\u0111": "d",
            "\u018C": "d",
            "\u0256": "d",
            "\u0257": "d",
            "\uA77A": "d",
            "\u01F3": "dz",
            "\u01C6": "dz",
            "\u24D4": "e",
            "\uFF45": "e",
            "\u00E8": "e",
            "\u00E9": "e",
            "\u00EA": "e",
            "\u1EC1": "e",
            "\u1EBF": "e",
            "\u1EC5": "e",
            "\u1EC3": "e",
            "\u1EBD": "e",
            "\u0113": "e",
            "\u1E15": "e",
            "\u1E17": "e",
            "\u0115": "e",
            "\u0117": "e",
            "\u00EB": "e",
            "\u1EBB": "e",
            "\u011B": "e",
            "\u0205": "e",
            "\u0207": "e",
            "\u1EB9": "e",
            "\u1EC7": "e",
            "\u0229": "e",
            "\u1E1D": "e",
            "\u0119": "e",
            "\u1E19": "e",
            "\u1E1B": "e",
            "\u0247": "e",
            "\u025B": "e",
            "\u01DD": "e",
            "\u24D5": "f",
            "\uFF46": "f",
            "\u1E1F": "f",
            "\u0192": "f",
            "\uA77C": "f",
            "\u24D6": "g",
            "\uFF47": "g",
            "\u01F5": "g",
            "\u011D": "g",
            "\u1E21": "g",
            "\u011F": "g",
            "\u0121": "g",
            "\u01E7": "g",
            "\u0123": "g",
            "\u01E5": "g",
            "\u0260": "g",
            "\uA7A1": "g",
            "\u1D79": "g",
            "\uA77F": "g",
            "\u24D7": "h",
            "\uFF48": "h",
            "\u0125": "h",
            "\u1E23": "h",
            "\u1E27": "h",
            "\u021F": "h",
            "\u1E25": "h",
            "\u1E29": "h",
            "\u1E2B": "h",
            "\u1E96": "h",
            "\u0127": "h",
            "\u2C68": "h",
            "\u2C76": "h",
            "\u0265": "h",
            "\u0195": "hv",
            "\u24D8": "i",
            "\uFF49": "i",
            "\u00EC": "i",
            "\u00ED": "i",
            "\u00EE": "i",
            "\u0129": "i",
            "\u012B": "i",
            "\u012D": "i",
            "\u00EF": "i",
            "\u1E2F": "i",
            "\u1EC9": "i",
            "\u01D0": "i",
            "\u0209": "i",
            "\u020B": "i",
            "\u1ECB": "i",
            "\u012F": "i",
            "\u1E2D": "i",
            "\u0268": "i",
            "\u0131": "i",
            "\u24D9": "j",
            "\uFF4A": "j",
            "\u0135": "j",
            "\u01F0": "j",
            "\u0249": "j",
            "\u24DA": "k",
            "\uFF4B": "k",
            "\u1E31": "k",
            "\u01E9": "k",
            "\u1E33": "k",
            "\u0137": "k",
            "\u1E35": "k",
            "\u0199": "k",
            "\u2C6A": "k",
            "\uA741": "k",
            "\uA743": "k",
            "\uA745": "k",
            "\uA7A3": "k",
            "\u24DB": "l",
            "\uFF4C": "l",
            "\u0140": "l",
            "\u013A": "l",
            "\u013E": "l",
            "\u1E37": "l",
            "\u1E39": "l",
            "\u013C": "l",
            "\u1E3D": "l",
            "\u1E3B": "l",
            "\u017F": "l",
            "\u0142": "l",
            "\u019A": "l",
            "\u026B": "l",
            "\u2C61": "l",
            "\uA749": "l",
            "\uA781": "l",
            "\uA747": "l",
            "\u01C9": "lj",
            "\u24DC": "m",
            "\uFF4D": "m",
            "\u1E3F": "m",
            "\u1E41": "m",
            "\u1E43": "m",
            "\u0271": "m",
            "\u026F": "m",
            "\u24DD": "n",
            "\uFF4E": "n",
            "\u01F9": "n",
            "\u0144": "n",
            "\u00F1": "n",
            "\u1E45": "n",
            "\u0148": "n",
            "\u1E47": "n",
            "\u0146": "n",
            "\u1E4B": "n",
            "\u1E49": "n",
            "\u019E": "n",
            "\u0272": "n",
            "\u0149": "n",
            "\uA791": "n",
            "\uA7A5": "n",
            "\u01CC": "nj",
            "\u24DE": "o",
            "\uFF4F": "o",
            "\u00F2": "o",
            "\u00F3": "o",
            "\u00F4": "o",
            "\u1ED3": "o",
            "\u1ED1": "o",
            "\u1ED7": "o",
            "\u1ED5": "o",
            "\u00F5": "o",
            "\u1E4D": "o",
            "\u022D": "o",
            "\u1E4F": "o",
            "\u014D": "o",
            "\u1E51": "o",
            "\u1E53": "o",
            "\u014F": "o",
            "\u022F": "o",
            "\u0231": "o",
            "\u00F6": "o",
            "\u022B": "o",
            "\u1ECF": "o",
            "\u0151": "o",
            "\u01D2": "o",
            "\u020D": "o",
            "\u020F": "o",
            "\u01A1": "o",
            "\u1EDD": "o",
            "\u1EDB": "o",
            "\u1EE1": "o",
            "\u1EDF": "o",
            "\u1EE3": "o",
            "\u1ECD": "o",
            "\u1ED9": "o",
            "\u01EB": "o",
            "\u01ED": "o",
            "\u00F8": "o",
            "\u01FF": "o",
            "\u0254": "o",
            "\uA74B": "o",
            "\uA74D": "o",
            "\u0275": "o",
            "\u01A3": "oi",
            "\u0223": "ou",
            "\uA74F": "oo",
            "\u24DF": "p",
            "\uFF50": "p",
            "\u1E55": "p",
            "\u1E57": "p",
            "\u01A5": "p",
            "\u1D7D": "p",
            "\uA751": "p",
            "\uA753": "p",
            "\uA755": "p",
            "\u24E0": "q",
            "\uFF51": "q",
            "\u024B": "q",
            "\uA757": "q",
            "\uA759": "q",
            "\u24E1": "r",
            "\uFF52": "r",
            "\u0155": "r",
            "\u1E59": "r",
            "\u0159": "r",
            "\u0211": "r",
            "\u0213": "r",
            "\u1E5B": "r",
            "\u1E5D": "r",
            "\u0157": "r",
            "\u1E5F": "r",
            "\u024D": "r",
            "\u027D": "r",
            "\uA75B": "r",
            "\uA7A7": "r",
            "\uA783": "r",
            "\u24E2": "s",
            "\uFF53": "s",
            "\u00DF": "s",
            "\u015B": "s",
            "\u1E65": "s",
            "\u015D": "s",
            "\u1E61": "s",
            "\u0161": "s",
            "\u1E67": "s",
            "\u1E63": "s",
            "\u1E69": "s",
            "\u0219": "s",
            "\u015F": "s",
            "\u023F": "s",
            "\uA7A9": "s",
            "\uA785": "s",
            "\u1E9B": "s",
            "\u24E3": "t",
            "\uFF54": "t",
            "\u1E6B": "t",
            "\u1E97": "t",
            "\u0165": "t",
            "\u1E6D": "t",
            "\u021B": "t",
            "\u0163": "t",
            "\u1E71": "t",
            "\u1E6F": "t",
            "\u0167": "t",
            "\u01AD": "t",
            "\u0288": "t",
            "\u2C66": "t",
            "\uA787": "t",
            "\uA729": "tz",
            "\u24E4": "u",
            "\uFF55": "u",
            "\u00F9": "u",
            "\u00FA": "u",
            "\u00FB": "u",
            "\u0169": "u",
            "\u1E79": "u",
            "\u016B": "u",
            "\u1E7B": "u",
            "\u016D": "u",
            "\u00FC": "u",
            "\u01DC": "u",
            "\u01D8": "u",
            "\u01D6": "u",
            "\u01DA": "u",
            "\u1EE7": "u",
            "\u016F": "u",
            "\u0171": "u",
            "\u01D4": "u",
            "\u0215": "u",
            "\u0217": "u",
            "\u01B0": "u",
            "\u1EEB": "u",
            "\u1EE9": "u",
            "\u1EEF": "u",
            "\u1EED": "u",
            "\u1EF1": "u",
            "\u1EE5": "u",
            "\u1E73": "u",
            "\u0173": "u",
            "\u1E77": "u",
            "\u1E75": "u",
            "\u0289": "u",
            "\u24E5": "v",
            "\uFF56": "v",
            "\u1E7D": "v",
            "\u1E7F": "v",
            "\u028B": "v",
            "\uA75F": "v",
            "\u028C": "v",
            "\uA761": "vy",
            "\u24E6": "w",
            "\uFF57": "w",
            "\u1E81": "w",
            "\u1E83": "w",
            "\u0175": "w",
            "\u1E87": "w",
            "\u1E85": "w",
            "\u1E98": "w",
            "\u1E89": "w",
            "\u2C73": "w",
            "\u24E7": "x",
            "\uFF58": "x",
            "\u1E8B": "x",
            "\u1E8D": "x",
            "\u24E8": "y",
            "\uFF59": "y",
            "\u1EF3": "y",
            "\u00FD": "y",
            "\u0177": "y",
            "\u1EF9": "y",
            "\u0233": "y",
            "\u1E8F": "y",
            "\u00FF": "y",
            "\u1EF7": "y",
            "\u1E99": "y",
            "\u1EF5": "y",
            "\u01B4": "y",
            "\u024F": "y",
            "\u1EFF": "y",
            "\u24E9": "z",
            "\uFF5A": "z",
            "\u017A": "z",
            "\u1E91": "z",
            "\u017C": "z",
            "\u017E": "z",
            "\u1E93": "z",
            "\u1E95": "z",
            "\u01B6": "z",
            "\u0225": "z",
            "\u0240": "z",
            "\u2C6C": "z",
            "\uA763": "z",
            "\u0386": "\u0391",
            "\u0388": "\u0395",
            "\u0389": "\u0397",
            "\u038A": "\u0399",
            "\u03AA": "\u0399",
            "\u038C": "\u039F",
            "\u038E": "\u03A5",
            "\u03AB": "\u03A5",
            "\u038F": "\u03A9",
            "\u03AC": "\u03B1",
            "\u03AD": "\u03B5",
            "\u03AE": "\u03B7",
            "\u03AF": "\u03B9",
            "\u03CA": "\u03B9",
            "\u0390": "\u03B9",
            "\u03CC": "\u03BF",
            "\u03CD": "\u03C5",
            "\u03CB": "\u03C5",
            "\u03B0": "\u03C5",
            "\u03C9": "\u03C9",
            "\u03C2": "\u03C3"
        };
    $document = $(document);
    nextUid = (function() {
        var counter = 1;
        return function() {
            return counter++
        }
    }());

    function reinsertElement(element) {
        var placeholder = $(document.createTextNode(""));
        element.before(placeholder);
        placeholder.before(element);
        placeholder.remove()
    }

    function stripDiacritics(str) {
        function match(a) {
            return DIACRITICS[a] || a
        }
        return str.replace(/[^\u0000-\u007E]/g, match)
    }

    function indexOf(value, array) {
        var i = 0,
            l = array.length;
        for (; i < l; i = i + 1) {
            if (equal(value, array[i])) {
                return i
            }
        }
        return -1
    }

    function measureScrollbar() {
        var $template = $(MEASURE_SCROLLBAR_TEMPLATE);
        $template.appendTo("body");
        var dim = {
            width: $template.width() - $template[0].clientWidth,
            height: $template.height() - $template[0].clientHeight
        };
        $template.remove();
        return dim
    }

    function equal(a, b) {
        if (a === b) {
            return true
        }
        if (a === undefined || b === undefined) {
            return false
        }
        if (a === null || b === null) {
            return false
        }
        if (a.constructor === String) {
            return a + "" === b + ""
        }
        if (b.constructor === String) {
            return b + "" === a + ""
        }
        return false
    }

    function splitVal(string, separator) {
        var val, i, l;
        if (string === null || string.length < 1) {
            return []
        }
        val = string.split(separator);
        for (i = 0, l = val.length; i < l; i = i + 1) {
            val[i] = $.trim(val[i])
        }
        return val
    }

    function getSideBorderPadding(element) {
        return element.outerWidth(false) - element.width()
    }

    function installKeyUpChangeEvent(element) {
        var key = "keyup-change-value";
        element.on("keydown", function() {
            if ($.data(element, key) === undefined) {
                $.data(element, key, element.val())
            }
        });
        element.on("keyup", function() {
            var val = $.data(element, key);
            if (val !== undefined && element.val() !== val) {
                $.removeData(element, key);
                element.trigger("keyup-change")
            }
        })
    }

    function installFilteredMouseMove(element) {
        element.on("mousemove", function(e) {
            var lastpos = lastMousePosition;
            if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {
                $(e.target).trigger("mousemove-filtered", e)
            }
        })
    }

    function debounce(quietMillis, fn, ctx) {
        ctx = ctx || undefined;
        var timeout;
        return function() {
            var args = arguments;
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                fn.apply(ctx, args)
            }, quietMillis)
        }
    }

    function installDebouncedScroll(threshold, element) {
        var notify = debounce(threshold, function(e) {
            element.trigger("scroll-debounced", e)
        });
        element.on("scroll", function(e) {
            if (indexOf(e.target, element.get()) >= 0) {
                notify(e)
            }
        })
    }

    function focus($el) {
        if ($el[0] === document.activeElement) {
            return
        }
        window.setTimeout(function() {
            var el = $el[0],
                pos = $el.val().length,
                range;
            $el.focus();
            var isVisible = (el.offsetWidth > 0 || el.offsetHeight > 0);
            if (isVisible && el === document.activeElement) {
                if (el.setSelectionRange) {
                    el.setSelectionRange(pos, pos)
                } else {
                    if (el.createTextRange) {
                        range = el.createTextRange();
                        range.collapse(false);
                        range.select()
                    }
                }
            }
        }, 0)
    }

    function getCursorInfo(el) {
        el = $(el)[0];
        var offset = 0;
        var length = 0;
        if ("selectionStart" in el) {
            offset = el.selectionStart;
            length = el.selectionEnd - offset
        } else {
            if ("selection" in document) {
                el.focus();
                var sel = document.selection.createRange();
                length = document.selection.createRange().text.length;
                sel.moveStart("character", -el.value.length);
                offset = sel.text.length - length
            }
        }
        return {
            offset: offset,
            length: length
        }
    }

    function killEvent(event) {
        event.preventDefault();
        event.stopPropagation()
    }

    function killEventImmediately(event) {
        event.preventDefault();
        event.stopImmediatePropagation()
    }

    function measureTextWidth(e) {
        if (!sizer) {
            var style = e[0].currentStyle || window.getComputedStyle(e[0], null);
            sizer = $(document.createElement("div")).css({
                position: "absolute",
                left: "-10000px",
                top: "-10000px",
                display: "none",
                fontSize: style.fontSize,
                fontFamily: style.fontFamily,
                fontStyle: style.fontStyle,
                fontWeight: style.fontWeight,
                letterSpacing: style.letterSpacing,
                textTransform: style.textTransform,
                whiteSpace: "nowrap"
            });
            sizer.attr("class", "select2-sizer");
            $("body").append(sizer)
        }
        sizer.text(e.val());
        return sizer.width()
    }

    function syncCssClasses(dest, src, adapter) {
        var classes, replacements = [],
            adapted;
        classes = $.trim(dest.attr("class"));
        if (classes) {
            classes = "" + classes;
            $(classes.split(/\s+/)).each2(function() {
                if (this.indexOf("select2-") === 0) {
                    replacements.push(this)
                }
            })
        }
        classes = $.trim(src.attr("class"));
        if (classes) {
            classes = "" + classes;
            $(classes.split(/\s+/)).each2(function() {
                if (this.indexOf("select2-") !== 0) {
                    adapted = adapter(this);
                    if (adapted) {
                        replacements.push(adapted)
                    }
                }
            })
        }
        dest.attr("class", replacements.join(" "))
    }

    function markMatch(text, term, markup, escapeMarkup) {
        var match = stripDiacritics(text.toUpperCase()).indexOf(stripDiacritics(term.toUpperCase())),
            tl = term.length;
        if (match < 0) {
            markup.push(escapeMarkup(text));
            return
        }
        markup.push(escapeMarkup(text.substring(0, match)));
        markup.push("<span class='select2-match'>");
        markup.push(escapeMarkup(text.substring(match, match + tl)));
        markup.push("</span>");
        markup.push(escapeMarkup(text.substring(match + tl, text.length)))
    }

    function defaultEscapeMarkup(markup) {
        var replace_map = {
            "\\": "&#92;",
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#47;"
        };
        return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
            return replace_map[match]
        })
    }

    function ajax(options) {
        var timeout, handler = null,
            quietMillis = options.quietMillis || 100,
            ajaxUrl = options.url,
            self = this;
        return function(query) {
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                var data = options.data,
                    url = ajaxUrl,
                    transport = options.transport || $.fn.select2.ajaxDefaults.transport,
                    deprecated = {
                        type: options.type || "GET",
                        cache: options.cache || false,
                        jsonpCallback: options.jsonpCallback || undefined,
                        dataType: options.dataType || "json"
                    },
                    params = $.extend({}, $.fn.select2.ajaxDefaults.params, deprecated);
                data = data ? data.call(self, query.term, query.page, query.context) : null;
                url = (typeof url === "function") ? url.call(self, query.term, query.page, query.context) : url;
                if (handler && typeof handler.abort === "function") {
                    handler.abort()
                }
                if (options.params) {
                    if ($.isFunction(options.params)) {
                        $.extend(params, options.params.call(self))
                    } else {
                        $.extend(params, options.params)
                    }
                }
                $.extend(params, {
                    url: url,
                    dataType: options.dataType,
                    data: data,
                    success: function(data) {
                        var results = options.results(data, query.page, query);
                        query.callback(results)
                    }
                });
                handler = transport.call(self, params)
            }, quietMillis)
        }
    }

    function local(options) {
        var data = options,
            dataText, tmp, text = function(item) {
                return "" + item.text
            };
        if ($.isArray(data)) {
            tmp = data;
            data = {
                results: tmp
            }
        }
        if ($.isFunction(data) === false) {
            tmp = data;
            data = function() {
                return tmp
            }
        }
        var dataItem = data();
        if (dataItem.text) {
            text = dataItem.text;
            if (!$.isFunction(text)) {
                dataText = dataItem.text;
                text = function(item) {
                    return item[dataText]
                }
            }
        }
        return function(query) {
            var t = query.term,
                filtered = {
                    results: []
                },
                process;
            if (t === "") {
                query.callback(data());
                return
            }
            process = function(datum, collection) {
                var group, attr;
                datum = datum[0];
                if (datum.children) {
                    group = {};
                    for (attr in datum) {
                        if (datum.hasOwnProperty(attr)) {
                            group[attr] = datum[attr]
                        }
                    }
                    group.children = [];
                    $(datum.children).each2(function(i, childDatum) {
                        process(childDatum, group.children)
                    });
                    if (group.children.length || query.matcher(t, text(group), datum)) {
                        collection.push(group)
                    }
                } else {
                    if (query.matcher(t, text(datum), datum)) {
                        collection.push(datum)
                    }
                }
            };
            $(data().results).each2(function(i, datum) {
                process(datum, filtered.results)
            });
            query.callback(filtered)
        }
    }

    function tags(data) {
        var isFunc = $.isFunction(data);
        return function(query) {
            var t = query.term,
                filtered = {
                    results: []
                };
            var result = isFunc ? data(query) : data;
            if ($.isArray(result)) {
                $(result).each(function() {
                    var isObject = this.text !== undefined,
                        text = isObject ? this.text : this;
                    if (t === "" || query.matcher(t, text)) {
                        filtered.results.push(isObject ? this : {
                            id: this,
                            text: this
                        })
                    }
                });
                query.callback(filtered)
            }
        }
    }

    function checkFormatter(formatter, formatterName) {
        if ($.isFunction(formatter)) {
            return true
        }
        if (!formatter) {
            return false
        }
        if (typeof(formatter) === "string") {
            return true
        }
        throw new Error(formatterName + " must be a string, function, or falsy value")
    }

    function evaluate(val, context) {
        if ($.isFunction(val)) {
            var args = Array.prototype.slice.call(arguments, 2);
            return val.apply(context, args)
        }
        return val
    }

    function countResults(results) {
        var count = 0;
        $.each(results, function(i, item) {
            if (item.children) {
                count += countResults(item.children)
            } else {
                count++
            }
        });
        return count
    }

    function defaultTokenizer(input, selection, selectCallback, opts) {
        var original = input,
            dupe = false,
            token, index, i, l, separator;
        if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) {
            return undefined
        }
        while (true) {
            index = -1;
            for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
                separator = opts.tokenSeparators[i];
                index = input.indexOf(separator);
                if (index >= 0) {
                    break
                }
            }
            if (index < 0) {
                break
            }
            token = input.substring(0, index);
            input = input.substring(index + separator.length);
            if (token.length > 0) {
                token = opts.createSearchChoice.call(this, token, selection);
                if (token !== undefined && token !== null && opts.id(token) !== undefined && opts.id(token) !== null) {
                    dupe = false;
                    for (i = 0, l = selection.length; i < l; i++) {
                        if (equal(opts.id(token), opts.id(selection[i]))) {
                            dupe = true;
                            break
                        }
                    }
                    if (!dupe) {
                        selectCallback(token)
                    }
                }
            }
        }
        if (original !== input) {
            return input
        }
    }

    function cleanupJQueryElements() {
        var self = this;
        $.each(arguments, function(i, element) {
            self[element].remove();
            self[element] = null
        })
    }

    function clazz(SuperClass, methods) {
        var constructor = function() {};
        constructor.prototype = new SuperClass;
        constructor.prototype.constructor = constructor;
        constructor.prototype.parent = SuperClass.prototype;
        constructor.prototype = $.extend(constructor.prototype, methods);
        return constructor
    }
    AbstractSelect2 = clazz(Object, {
        bind: function(func) {
            var self = this;
            return function() {
                func.apply(self, arguments)
            }
        },
        init: function(opts) {
            var results, search, resultsSelector = ".select2-results";
            this.opts = opts = this.prepareOpts(opts);
            this.id = opts.id;
            if (opts.element.data("select2") !== undefined && opts.element.data("select2") !== null) {
                opts.element.data("select2").destroy()
            }
            this.container = this.createContainer();
            this.liveRegion = $("<span>", {
                role: "status",
                "aria-live": "polite"
            }).addClass("select2-hidden-accessible").appendTo(document.body);
            this.containerId = "s2id_" + (opts.element.attr("id") || "autogen" + nextUid());
            this.containerEventName = this.containerId.replace(/([.])/g, "_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
            this.container.attr("id", this.containerId);
            this.container.attr("title", opts.element.attr("title"));
            this.body = $("body");
            syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
            this.container.attr("style", opts.element.attr("style"));
            this.container.css(evaluate(opts.containerCss, this.opts.element));
            this.container.addClass(evaluate(opts.containerCssClass, this.opts.element));
            this.elementTabIndex = this.opts.element.attr("tabindex");
            this.opts.element.data("select2", this).attr("tabindex", "-1").before(this.container).on("click.select2", killEvent);
            this.container.data("select2", this);
            this.dropdown = this.container.find(".select2-drop");
            syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
            this.dropdown.addClass(evaluate(opts.dropdownCssClass, this.opts.element));
            this.dropdown.data("select2", this);
            this.dropdown.on("click", killEvent);
            this.results = results = this.container.find(resultsSelector);
            this.search = search = this.container.find("input.select2-input");
            this.queryCount = 0;
            this.resultsPage = 0;
            this.context = null;
            this.initContainer();
            this.container.on("click", killEvent);
            installFilteredMouseMove(this.results);
            this.dropdown.on("mousemove-filtered", resultsSelector, this.bind(this.highlightUnderEvent));
            this.dropdown.on("touchstart touchmove touchend", resultsSelector, this.bind(function(event) {
                this._touchEvent = true;
                this.highlightUnderEvent(event)
            }));
            this.dropdown.on("touchmove", resultsSelector, this.bind(this.touchMoved));
            this.dropdown.on("touchstart touchend", resultsSelector, this.bind(this.clearTouchMoved));
            this.dropdown.on("click", this.bind(function(event) {
                if (this._touchEvent) {
                    this._touchEvent = false;
                    this.selectHighlighted()
                }
            }));
            installDebouncedScroll(80, this.results);
            this.dropdown.on("scroll-debounced", resultsSelector, this.bind(this.loadMoreIfNeeded));
            $(this.container).on("change", ".select2-input", function(e) {
                e.stopPropagation()
            });
            $(this.dropdown).on("change", ".select2-input", function(e) {
                e.stopPropagation()
            });
            if ($.fn.mousewheel) {
                results.mousewheel(function(e, delta, deltaX, deltaY) {
                    var top = results.scrollTop();
                    if (deltaY > 0 && top - deltaY <= 0) {
                        results.scrollTop(0);
                        killEvent(e)
                    } else {
                        if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
                            results.scrollTop(results.get(0).scrollHeight - results.height());
                            killEvent(e)
                        }
                    }
                })
            }
            installKeyUpChangeEvent(search);
            search.on("keyup-change input paste", this.bind(this.updateResults));
            search.on("focus", function() {
                search.addClass("select2-focused")
            });
            search.on("blur", function() {
                search.removeClass("select2-focused")
            });
            this.dropdown.on("mouseup", resultsSelector, this.bind(function(e) {
                if ($(e.target).closest(".select2-result-selectable").length > 0) {
                    this.highlightUnderEvent(e);
                    this.selectHighlighted(e)
                }
            }));
            this.dropdown.on("click mouseup mousedown touchstart touchend focusin", function(e) {
                e.stopPropagation()
            });
            this.nextSearchTerm = undefined;
            if ($.isFunction(this.opts.initSelection)) {
                this.initSelection();
                this.monitorSource()
            }
            if (opts.maximumInputLength !== null) {
                this.search.attr("maxlength", opts.maximumInputLength)
            }
            var disabled = opts.element.prop("disabled");
            if (disabled === undefined) {
                disabled = false
            }
            this.enable(!disabled);
            var readonly = opts.element.prop("readonly");
            if (readonly === undefined) {
                readonly = false
            }
            this.readonly(readonly);
            scrollBarDimensions = scrollBarDimensions || measureScrollbar();
            this.autofocus = opts.element.prop("autofocus");
            opts.element.prop("autofocus", false);
            if (this.autofocus) {
                this.focus()
            }
            this.search.attr("placeholder", opts.searchInputPlaceholder)
        },
        destroy: function() {
            var element = this.opts.element,
                select2 = element.data("select2");
            this.close();
            if (element.length && element[0].detachEvent) {
                element.each(function() {
                    this.detachEvent("onpropertychange", this._sync)
                })
            }
            if (this.propertyObserver) {
                this.propertyObserver.disconnect();
                this.propertyObserver = null
            }
            this._sync = null;
            if (select2 !== undefined) {
                select2.container.remove();
                select2.liveRegion.remove();
                select2.dropdown.remove();
                element.removeClass("select2-offscreen").removeData("select2").off(".select2").prop("autofocus", this.autofocus || false);
                if (this.elementTabIndex) {
                    element.attr({
                        tabindex: this.elementTabIndex
                    })
                } else {
                    element.removeAttr("tabindex")
                }
                element.show()
            }
            cleanupJQueryElements.call(this, "container", "liveRegion", "dropdown", "results", "search")
        },
        optionToData: function(element) {
            if (element.is("option")) {
                return {
                    id: element.prop("value"),
                    text: element.text(),
                    element: element.get(),
                    css: element.attr("class"),
                    disabled: element.prop("disabled"),
                    locked: equal(element.attr("locked"), "locked") || equal(element.data("locked"), true)
                }
            } else {
                if (element.is("optgroup")) {
                    return {
                        text: element.attr("label"),
                        children: [],
                        element: element.get(),
                        css: element.attr("class")
                    }
                }
            }
        },
        prepareOpts: function(opts) {
            var element, select, idKey, ajaxUrl, self = this;
            element = opts.element;
            if (element.get(0).tagName.toLowerCase() === "select") {
                this.select = select = opts.element
            }
            if (select) {
                $.each(["id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags"], function() {
                    if (this in opts) {
                        throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.")
                    }
                })
            }
            opts = $.extend({}, {
                populateResults: function(container, results, query) {
                    var populate, id = this.opts.id,
                        liveRegion = this.liveRegion;
                    populate = function(results, container, depth) {
                        var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;
                        results = opts.sortResults(results, container, query);
                        var nodes = [];
                        for (i = 0, l = results.length; i < l; i = i + 1) {
                            result = results[i];
                            disabled = (result.disabled === true);
                            selectable = (!disabled) && (id(result) !== undefined);
                            compound = result.children && result.children.length > 0;
                            node = $("<li></li>");
                            node.addClass("select2-results-dept-" + depth);
                            node.addClass("select2-result");
                            node.addClass(selectable ? "select2-result-selectable" : "select2-result-unselectable");
                            if (disabled) {
                                node.addClass("select2-disabled")
                            }
                            if (compound) {
                                node.addClass("select2-result-with-children")
                            }
                            node.addClass(self.opts.formatResultCssClass(result));
                            node.attr("role", "presentation");
                            label = $(document.createElement("div"));
                            label.addClass("select2-result-label");
                            label.attr("id", "select2-result-label-" + nextUid());
                            label.attr("role", "option");
                            formatted = opts.formatResult(result, label, query, self.opts.escapeMarkup);
                            if (formatted !== undefined) {
                                label.html(formatted);
                                node.append(label)
                            }
                            if (compound) {
                                innerContainer = $("<ul></ul>");
                                innerContainer.addClass("select2-result-sub");
                                populate(result.children, innerContainer, depth + 1);
                                node.append(innerContainer)
                            }
                            node.data("select2-data", result);
                            nodes.push(node[0])
                        }
                        container.append(nodes);
                        liveRegion.text(opts.formatMatches(results.length))
                    };
                    populate(results, container, 0)
                }
            }, $.fn.select2.defaults, opts);
            if (typeof(opts.id) !== "function") {
                idKey = opts.id;
                opts.id = function(e) {
                    return e[idKey]
                }
            }
            if ($.isArray(opts.element.data("select2Tags"))) {
                if ("tags" in opts) {
                    throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + opts.element.attr("id")
                }
                opts.tags = opts.element.data("select2Tags")
            }
            if (select) {
                opts.query = this.bind(function(query) {
                    var data = {
                            results: [],
                            more: false
                        },
                        term = query.term,
                        children, placeholderOption, process;
                    process = function(element, collection) {
                        var group;
                        if (element.is("option")) {
                            if (query.matcher(term, element.text(), element)) {
                                collection.push(self.optionToData(element))
                            }
                        } else {
                            if (element.is("optgroup")) {
                                group = self.optionToData(element);
                                element.children().each2(function(i, elm) {
                                    process(elm, group.children)
                                });
                                if (group.children.length > 0) {
                                    collection.push(group)
                                }
                            }
                        }
                    };
                    children = element.children();
                    if (this.getPlaceholder() !== undefined && children.length > 0) {
                        placeholderOption = this.getPlaceholderOption();
                        if (placeholderOption) {
                            children = children.not(placeholderOption)
                        }
                    }
                    children.each2(function(i, elm) {
                        process(elm, data.results)
                    });
                    query.callback(data)
                });
                opts.id = function(e) {
                    return e.id
                }
            } else {
                if (!("query" in opts)) {
                    if ("ajax" in opts) {
                        ajaxUrl = opts.element.data("ajax-url");
                        if (ajaxUrl && ajaxUrl.length > 0) {
                            opts.ajax.url = ajaxUrl
                        }
                        opts.query = ajax.call(opts.element, opts.ajax)
                    } else {
                        if ("data" in opts) {
                            opts.query = local(opts.data)
                        } else {
                            if ("tags" in opts) {
                                opts.query = tags(opts.tags);
                                if (opts.createSearchChoice === undefined) {
                                    opts.createSearchChoice = function(term) {
                                        return {
                                            id: $.trim(term),
                                            text: $.trim(term)
                                        }
                                    }
                                }
                                if (opts.initSelection === undefined) {
                                    opts.initSelection = function(element, callback) {
                                        var data = [];
                                        $(splitVal(element.val(), opts.separator)).each(function() {
                                            var obj = {
                                                    id: this,
                                                    text: this
                                                },
                                                tags = opts.tags;
                                            if ($.isFunction(tags)) {
                                                tags = tags()
                                            }
                                            $(tags).each(function() {
                                                if (equal(this.id, obj.id)) {
                                                    obj = this;
                                                    return false
                                                }
                                            });
                                            data.push(obj)
                                        });
                                        callback(data)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (typeof(opts.query) !== "function") {
                throw "query function not defined for Select2 " + opts.element.attr("id")
            }
            if (opts.createSearchChoicePosition === "top") {
                opts.createSearchChoicePosition = function(list, item) {
                    list.unshift(item)
                }
            } else {
                if (opts.createSearchChoicePosition === "bottom") {
                    opts.createSearchChoicePosition = function(list, item) {
                        list.push(item)
                    }
                } else {
                    if (typeof(opts.createSearchChoicePosition) !== "function") {
                        throw "invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function"
                    }
                }
            }
            return opts
        },
        monitorSource: function() {
            var el = this.opts.element,
                observer, self = this;
            el.on("change.select2", this.bind(function(e) {
                if (this.opts.element.data("select2-change-triggered") !== true) {
                    this.initSelection()
                }
            }));
            this._sync = this.bind(function() {
                var disabled = el.prop("disabled");
                if (disabled === undefined) {
                    disabled = false
                }
                this.enable(!disabled);
                var readonly = el.prop("readonly");
                if (readonly === undefined) {
                    readonly = false
                }
                this.readonly(readonly);
                syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
                this.container.addClass(evaluate(this.opts.containerCssClass, this.opts.element));
                syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
                this.dropdown.addClass(evaluate(this.opts.dropdownCssClass, this.opts.element))
            });
            if (el.length && el[0].attachEvent) {
                el.each(function() {
                    this.attachEvent("onpropertychange", self._sync)
                })
            }
            observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
            if (observer !== undefined) {
                if (this.propertyObserver) {
                    delete this.propertyObserver;
                    this.propertyObserver = null
                }
                this.propertyObserver = new observer(function(mutations) {
                    $.each(mutations, self._sync)
                });
                this.propertyObserver.observe(el.get(0), {
                    attributes: true,
                    subtree: false
                })
            }
        },
        triggerSelect: function(data) {
            var evt = $.Event("select2-selecting", {
                val: this.id(data),
                object: data,
                choice: data
            });
            this.opts.element.trigger(evt);
            return !evt.isDefaultPrevented()
        },
        triggerChange: function(details) {
            details = details || {};
            details = $.extend({}, details, {
                type: "change",
                val: this.val()
            });
            this.opts.element.data("select2-change-triggered", true);
            this.opts.element.trigger(details);
            this.opts.element.data("select2-change-triggered", false);
            this.opts.element.click();
            if (this.opts.blurOnChange) {
                this.opts.element.blur()
            }
        },
        isInterfaceEnabled: function() {
            return this.enabledInterface === true
        },
        enableInterface: function() {
            var enabled = this._enabled && !this._readonly,
                disabled = !enabled;
            if (enabled === this.enabledInterface) {
                return false
            }
            this.container.toggleClass("select2-container-disabled", disabled);
            this.close();
            this.enabledInterface = enabled;
            return true
        },
        enable: function(enabled) {
            if (enabled === undefined) {
                enabled = true
            }
            if (this._enabled === enabled) {
                return
            }
            this._enabled = enabled;
            this.opts.element.prop("disabled", !enabled);
            this.enableInterface()
        },
        disable: function() {
            this.enable(false)
        },
        readonly: function(enabled) {
            if (enabled === undefined) {
                enabled = false
            }
            if (this._readonly === enabled) {
                return
            }
            this._readonly = enabled;
            this.opts.element.prop("readonly", enabled);
            this.enableInterface()
        },
        opened: function() {
            return (this.container) ? this.container.hasClass("select2-dropdown-open") : false
        },
        positionDropdown: function() {
            var $dropdown = this.dropdown,
                offset = this.container.offset(),
                height = this.container.outerHeight(false),
                width = this.container.outerWidth(false),
                dropHeight = $dropdown.outerHeight(false),
                $window = $(window),
                windowWidth = $window.width(),
                windowHeight = $window.height(),
                viewPortRight = $window.scrollLeft() + windowWidth,
                viewportBottom = $window.scrollTop() + windowHeight,
                dropTop = offset.top + height,
                dropLeft = offset.left,
                enoughRoomBelow = dropTop + dropHeight <= viewportBottom,
                enoughRoomAbove = (offset.top - dropHeight) >= $window.scrollTop(),
                dropWidth = $dropdown.outerWidth(false),
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight,
                aboveNow = $dropdown.hasClass("select2-drop-above"),
                bodyOffset, above, changeDirection, css, resultsListNode;
            if (aboveNow) {
                above = true;
                if (!enoughRoomAbove && enoughRoomBelow) {
                    changeDirection = true;
                    above = false
                }
            } else {
                above = false;
                if (!enoughRoomBelow && enoughRoomAbove) {
                    changeDirection = true;
                    above = true
                }
            }
            if (changeDirection) {
                $dropdown.hide();
                offset = this.container.offset();
                height = this.container.outerHeight(false);
                width = this.container.outerWidth(false);
                dropHeight = $dropdown.outerHeight(false);
                viewPortRight = $window.scrollLeft() + windowWidth;
                viewportBottom = $window.scrollTop() + windowHeight;
                dropTop = offset.top + height;
                dropLeft = offset.left;
                dropWidth = $dropdown.outerWidth(false);
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
                $dropdown.show();
                this.focusSearch()
            }
            if (this.opts.dropdownAutoWidth) {
                resultsListNode = $(".select2-results", $dropdown)[0];
                $dropdown.addClass("select2-drop-auto-width");
                $dropdown.css("width", "");
                dropWidth = $dropdown.outerWidth(false) + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);
                dropWidth > width ? width = dropWidth : dropWidth = width;
                dropHeight = $dropdown.outerHeight(false);
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight
            } else {
                this.container.removeClass("select2-drop-auto-width")
            }
            if (this.body.css("position") !== "static") {
                bodyOffset = this.body.offset();
                dropTop -= bodyOffset.top;
                dropLeft -= bodyOffset.left
            }
            if (!enoughRoomOnRight) {
                dropLeft = offset.left + this.container.outerWidth(false) - dropWidth
            }
            css = {
                left: dropLeft,
                width: width
            };
            if (above) {
                css.top = offset.top - dropHeight;
                css.bottom = "auto";
                this.container.addClass("select2-drop-above");
                $dropdown.addClass("select2-drop-above")
            } else {
                css.top = dropTop;
                css.bottom = "auto";
                this.container.removeClass("select2-drop-above");
                $dropdown.removeClass("select2-drop-above")
            }
            css = $.extend(css, evaluate(this.opts.dropdownCss, this.opts.element));
            $dropdown.css(css)
        },
        shouldOpen: function() {
            var event;
            if (this.opened()) {
                return false
            }
            if (this._enabled === false || this._readonly === true) {
                return false
            }
            event = $.Event("select2-opening");
            this.opts.element.trigger(event);
            return !event.isDefaultPrevented()
        },
        clearDropdownAlignmentPreference: function() {
            this.container.removeClass("select2-drop-above");
            this.dropdown.removeClass("select2-drop-above")
        },
        open: function() {
            if (!this.shouldOpen()) {
                return false
            }
            this.opening();
            $document.on("mousemove.select2Event", function(e) {
                lastMousePosition.x = e.pageX;
                lastMousePosition.y = e.pageY
            });
            return true
        },
        opening: function() {
            var cid = this.containerEventName,
                scroll = "scroll." + cid,
                resize = "resize." + cid,
                orient = "orientationchange." + cid,
                mask;
            this.container.addClass("select2-dropdown-open").addClass("select2-container-active");
            this.clearDropdownAlignmentPreference();
            if (this.dropdown[0] !== this.body.children().last()[0]) {
                this.dropdown.detach().appendTo(this.body)
            }
            mask = $("#select2-drop-mask");
            if (mask.length == 0) {
                mask = $(document.createElement("div"));
                mask.attr("id", "select2-drop-mask").attr("class", "select2-drop-mask");
                mask.hide();
                mask.appendTo(this.body);
                mask.on("mousedown touchstart click", function(e) {
                    reinsertElement(mask);
                    var dropdown = $("#select2-drop"),
                        self;
                    if (dropdown.length > 0) {
                        self = dropdown.data("select2");
                        if (self.opts.selectOnBlur) {
                            self.selectHighlighted({
                                noFocus: true
                            })
                        }
                        self.close();
                        e.preventDefault();
                        e.stopPropagation()
                    }
                })
            }
            if (this.dropdown.prev()[0] !== mask[0]) {
                this.dropdown.before(mask)
            }
            $("#select2-drop").removeAttr("id");
            this.dropdown.attr("id", "select2-drop");
            mask.show();
            this.positionDropdown();
            this.dropdown.show();
            this.positionDropdown();
            this.dropdown.addClass("select2-drop-active");
            var that = this;
            this.container.parents().add(window).each(function() {
                $(this).on(resize + " " + scroll + " " + orient, function(e) {
                    if (that.opened()) {
                        that.positionDropdown()
                    }
                })
            })
        },
        close: function() {
            if (!this.opened()) {
                return
            }
            var cid = this.containerEventName,
                scroll = "scroll." + cid,
                resize = "resize." + cid,
                orient = "orientationchange." + cid;
            this.container.parents().add(window).each(function() {
                $(this).off(scroll).off(resize).off(orient)
            });
            this.clearDropdownAlignmentPreference();
            $("#select2-drop-mask").hide();
            this.dropdown.removeAttr("id");
            this.dropdown.hide();
            this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active");
            this.results.empty();
            $document.off("mousemove.select2Event");
            this.clearSearch();
            this.search.removeClass("select2-active");
            this.opts.element.trigger($.Event("select2-close"))
        },
        externalSearch: function(term) {
            this.open();
            this.search.val(term);
            this.updateResults(false)
        },
        clearSearch: function() {},
        getMaximumSelectionSize: function() {
            return evaluate(this.opts.maximumSelectionSize, this.opts.element)
        },
        ensureHighlightVisible: function() {
            var results = this.results,
                children, index, child, hb, rb, y, more, topOffset;
            index = this.highlight();
            if (index < 0) {
                return
            }
            if (index == 0) {
                results.scrollTop(0);
                return
            }
            children = this.findHighlightableChoices().find(".select2-result-label");
            child = $(children[index]);
            topOffset = (child.offset() || {}).top || 0;
            hb = topOffset + child.outerHeight(true);
            if (index === children.length - 1) {
                more = results.find("li.select2-more-results");
                if (more.length > 0) {
                    hb = more.offset().top + more.outerHeight(true)
                }
            }
            rb = results.offset().top + results.outerHeight(true);
            if (hb > rb) {
                results.scrollTop(results.scrollTop() + (hb - rb))
            }
            y = topOffset - results.offset().top;
            if (y < 0 && child.css("display") != "none") {
                results.scrollTop(results.scrollTop() + y)
            }
        },
        findHighlightableChoices: function() {
            return this.results.find(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)")
        },
        moveHighlight: function(delta) {
            var choices = this.findHighlightableChoices(),
                index = this.highlight();
            while (index > -1 && index < choices.length) {
                index += delta;
                var choice = $(choices[index]);
                if (choice.hasClass("select2-result-selectable") && !choice.hasClass("select2-disabled") && !choice.hasClass("select2-selected")) {
                    this.highlight(index);
                    break
                }
            }
        },
        highlight: function(index) {
            var choices = this.findHighlightableChoices(),
                choice, data;
            if (arguments.length === 0) {
                return indexOf(choices.filter(".select2-highlighted")[0], choices.get())
            }
            if (index >= choices.length) {
                index = choices.length - 1
            }
            if (index < 0) {
                index = 0
            }
            this.removeHighlight();
            choice = $(choices[index]);
            choice.addClass("select2-highlighted");
            this.search.attr("aria-activedescendant", choice.find(".select2-result-label").attr("id"));
            this.ensureHighlightVisible();
            this.liveRegion.text(choice.text());
            data = choice.data("select2-data");
            if (data) {
                this.opts.element.trigger({
                    type: "select2-highlight",
                    val: this.id(data),
                    choice: data
                })
            }
        },
        removeHighlight: function() {
            this.results.find(".select2-highlighted").removeClass("select2-highlighted")
        },
        touchMoved: function() {
            this._touchMoved = true
        },
        clearTouchMoved: function() {
            this._touchMoved = false
        },
        countSelectableResults: function() {
            return this.findHighlightableChoices().length
        },
        highlightUnderEvent: function(event) {
            var el = $(event.target).closest(".select2-result-selectable");
            if (el.length > 0 && !el.is(".select2-highlighted")) {
                var choices = this.findHighlightableChoices();
                this.highlight(choices.index(el))
            } else {
                if (el.length == 0) {
                    this.removeHighlight()
                }
            }
        },
        loadMoreIfNeeded: function() {
            var results = this.results,
                more = results.find("li.select2-more-results"),
                below, page = this.resultsPage + 1,
                self = this,
                term = this.search.val(),
                context = this.context;
            if (more.length === 0) {
                return
            }
            below = more.offset().top - results.offset().top - results.height();
            if (below <= this.opts.loadMorePadding) {
                more.addClass("select2-active");
                this.opts.query({
                    element: this.opts.element,
                    term: term,
                    page: page,
                    context: context,
                    matcher: this.opts.matcher,
                    callback: this.bind(function(data) {
                        if (!self.opened()) {
                            return
                        }
                        self.opts.populateResults.call(this, results, data.results, {
                            term: term,
                            page: page,
                            context: context
                        });
                        self.postprocessResults(data, false, false);
                        if (data.more === true) {
                            more.detach().appendTo(results).text(evaluate(self.opts.formatLoadMore, self.opts.element, page + 1));
                            window.setTimeout(function() {
                                self.loadMoreIfNeeded()
                            }, 10)
                        } else {
                            more.remove()
                        }
                        self.positionDropdown();
                        self.resultsPage = page;
                        self.context = data.context;
                        this.opts.element.trigger({
                            type: "select2-loaded",
                            items: data
                        })
                    })
                })
            }
        },
        tokenize: function() {},
        updateResults: function(initial) {
            var search = this.search,
                results = this.results,
                opts = this.opts,
                data, self = this,
                input, term = search.val(),
                lastTerm = $.data(this.container, "select2-last-term"),
                queryNumber;
            if (initial !== true && lastTerm && equal(term, lastTerm)) {
                return
            }
            $.data(this.container, "select2-last-term", term);
            if (initial !== true && (this.showSearchInput === false || !this.opened())) {
                return
            }

            function postRender() {
                search.removeClass("select2-active");
                self.positionDropdown();
                if (results.find(".select2-no-results,.select2-selection-limit,.select2-searching").length) {
                    self.liveRegion.text(results.text())
                } else {
                    self.liveRegion.text(self.opts.formatMatches(results.find(".select2-result-selectable").length))
                }
            }

            function render(html) {
                results.html(html);
                postRender()
            }
            queryNumber = ++this.queryCount;
            var maxSelSize = this.getMaximumSelectionSize();
            if (maxSelSize >= 1) {
                data = this.data();
                if ($.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
                    render("<li class='select2-selection-limit'>" + evaluate(opts.formatSelectionTooBig, opts.element, maxSelSize) + "</li>");
                    return
                }
            }
            if (search.val().length < opts.minimumInputLength) {
                if (checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) {
                    render("<li class='select2-no-results'>" + evaluate(opts.formatInputTooShort, opts.element, search.val(), opts.minimumInputLength) + "</li>")
                } else {
                    render("")
                }
                if (initial && this.showSearch) {
                    this.showSearch(true)
                }
                return
            }
            if (opts.maximumInputLength && search.val().length > opts.maximumInputLength) {
                if (checkFormatter(opts.formatInputTooLong, "formatInputTooLong")) {
                    render("<li class='select2-no-results'>" + evaluate(opts.formatInputTooLong, opts.element, search.val(), opts.maximumInputLength) + "</li>")
                } else {
                    render("")
                }
                return
            }
            if (opts.formatSearching && this.findHighlightableChoices().length === 0) {
                render("<li class='select2-searching'>" + evaluate(opts.formatSearching, opts.element) + "</li>")
            }
            search.addClass("select2-active");
            this.removeHighlight();
            input = this.tokenize();
            if (input != undefined && input != null) {
                search.val(input)
            }
            this.resultsPage = 1;
            opts.query({
                element: opts.element,
                term: search.val(),
                page: this.resultsPage,
                context: null,
                matcher: opts.matcher,
                callback: this.bind(function(data) {
                    var def;
                    if (queryNumber != this.queryCount) {
                        return
                    }
                    if (!this.opened()) {
                        this.search.removeClass("select2-active");
                        return
                    }
                    this.context = (data.context === undefined) ? null : data.context;
                    if (this.opts.createSearchChoice && search.val() !== "") {
                        def = this.opts.createSearchChoice.call(self, search.val(), data.results);
                        if (def !== undefined && def !== null && self.id(def) !== undefined && self.id(def) !== null) {
                            if ($(data.results).filter(function() {
                                    return equal(self.id(this), self.id(def))
                                }).length === 0) {
                                this.opts.createSearchChoicePosition(data.results, def)
                            }
                        }
                    }
                    if (data.results.length === 0 && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
                        render("<li class='select2-no-results'>" + evaluate(opts.formatNoMatches, opts.element, search.val()) + "</li>");
                        return
                    }
                    results.empty();
                    self.opts.populateResults.call(this, results, data.results, {
                        term: search.val(),
                        page: this.resultsPage,
                        context: null
                    });
                    if (data.more === true && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
                        results.append("<li class='select2-more-results'>" + opts.escapeMarkup(evaluate(opts.formatLoadMore, opts.element, this.resultsPage)) + "</li>");
                        window.setTimeout(function() {
                            self.loadMoreIfNeeded()
                        }, 10)
                    }
                    this.postprocessResults(data, initial);
                    postRender();
                    this.opts.element.trigger({
                        type: "select2-loaded",
                        items: data
                    })
                })
            })
        },
        cancel: function() {
            this.close()
        },
        blur: function() {
            if (this.opts.selectOnBlur) {
                this.selectHighlighted({
                    noFocus: true
                })
            }
            this.close();
            this.container.removeClass("select2-container-active");
            if (this.search[0] === document.activeElement) {
                this.search.blur()
            }
            this.clearSearch();
            this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus")
        },
        focusSearch: function() {
            focus(this.search)
        },
        selectHighlighted: function(options) {
            if (this._touchMoved) {
                this.clearTouchMoved();
                return
            }
            var index = this.highlight(),
                highlighted = this.results.find(".select2-highlighted"),
                data = highlighted.closest(".select2-result").data("select2-data");
            if (data) {
                this.highlight(index);
                this.onSelect(data, options)
            } else {
                if (options && options.noFocus) {
                    this.close()
                }
            }
        },
        getPlaceholder: function() {
            var placeholderOption;
            return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder || ((placeholderOption = this.getPlaceholderOption()) !== undefined ? placeholderOption.text() : undefined)
        },
        getPlaceholderOption: function() {
            if (this.select) {
                var firstOption = this.select.children("option").first();
                if (this.opts.placeholderOption !== undefined) {
                    return (this.opts.placeholderOption === "first" && firstOption) || (typeof this.opts.placeholderOption === "function" && this.opts.placeholderOption(this.select))
                } else {
                    if ($.trim(firstOption.text()) === "" && firstOption.val() === "") {
                        return firstOption
                    }
                }
            }
        },
        initContainerWidth: function() {
            function resolveContainerWidth() {
                var style, attrs, matches, i, l, attr;
                if (this.opts.width === "off") {
                    return null
                } else {
                    if (this.opts.width === "element") {
                        return this.opts.element.outerWidth(false) === 0 ? "auto" : this.opts.element.outerWidth(false) + "px"
                    } else {
                        if (this.opts.width === "copy" || this.opts.width === "resolve") {
                            style = this.opts.element.attr("style");
                            if (style !== undefined) {
                                attrs = style.split(";");
                                for (i = 0, l = attrs.length; i < l; i = i + 1) {
                                    attr = attrs[i].replace(/\s/g, "");
                                    matches = attr.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);
                                    if (matches !== null && matches.length >= 1) {
                                        return matches[1]
                                    }
                                }
                            }
                            if (this.opts.width === "resolve") {
                                style = this.opts.element.css("width");
                                if (style.indexOf("%") > 0) {
                                    return style
                                }
                                return (this.opts.element.outerWidth(false) === 0 ? "auto" : this.opts.element.outerWidth(false) + "px")
                            }
                            return null
                        } else {
                            if ($.isFunction(this.opts.width)) {
                                return this.opts.width()
                            } else {
                                return this.opts.width
                            }
                        }
                    }
                }
            }
            var width = resolveContainerWidth.call(this);
            if (width !== null) {
                this.container.css("width", width)
            }
        }
    });
    SingleSelect2 = clazz(AbstractSelect2, {
        createContainer: function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container"
            }).html(["<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>", "   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>", "   <span class='select2-arrow' role='presentation'><strong role='presentation'></strong></span>", "</a>", "<label for='' class='select2-offscreen'></label>", "<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />", "<div class='select2-drop select2-display-none'>", "   <div class='select2-search'>", "       <label for='' class='select2-offscreen'></label>", "       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'", "       aria-autocomplete='list' />", "   </div>", "   <ul class='select2-results' role='listbox'>", "   </ul>", "</div>"].join(""));
            return container
        },
        enableInterface: function() {
            if (this.parent.enableInterface.apply(this, arguments)) {
                this.focusser.prop("disabled", !this.isInterfaceEnabled())
            }
        },
        opening: function() {
            var el, range, len;
            if (this.opts.minimumResultsForSearch >= 0) {
                this.showSearch(true)
            }
            this.parent.opening.apply(this, arguments);
            if (this.showSearchInput !== false) {
                this.search.val(this.focusser.val())
            }
            if (this.opts.shouldFocusInput(this)) {
                this.search.focus();
                el = this.search.get(0);
                if (el.createTextRange) {
                    range = el.createTextRange();
                    range.collapse(false);
                    range.select()
                } else {
                    if (el.setSelectionRange) {
                        len = this.search.val().length;
                        el.setSelectionRange(len, len)
                    }
                }
            }
            if (this.search.val() === "") {
                if (this.nextSearchTerm != undefined) {
                    this.search.val(this.nextSearchTerm);
                    this.search.select()
                }
            }
            this.focusser.prop("disabled", true).val("");
            this.updateResults(true);
            this.opts.element.trigger($.Event("select2-open"))
        },
        close: function() {
            if (!this.opened()) {
                return
            }
            this.parent.close.apply(this, arguments);
            this.focusser.prop("disabled", false);
            if (this.opts.shouldFocusInput(this)) {
                this.focusser.focus()
            }
        },
        focus: function() {
            if (this.opened()) {
                this.close()
            } else {
                this.focusser.prop("disabled", false);
                if (this.opts.shouldFocusInput(this)) {
                    this.focusser.focus()
                }
            }
        },
        isFocused: function() {
            return this.container.hasClass("select2-container-active")
        },
        cancel: function() {
            this.parent.cancel.apply(this, arguments);
            this.focusser.prop("disabled", false);
            if (this.opts.shouldFocusInput(this)) {
                this.focusser.focus()
            }
        },
        destroy: function() {
            $("label[for='" + this.focusser.attr("id") + "']").attr("for", this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
            cleanupJQueryElements.call(this, "selection", "focusser")
        },
        initContainer: function() {
            var selection, container = this.container,
                dropdown = this.dropdown,
                idSuffix = nextUid(),
                elementLabel;
            if (this.opts.minimumResultsForSearch < 0) {
                this.showSearch(false)
            } else {
                this.showSearch(true)
            }
            this.selection = selection = container.find(".select2-choice");
            this.focusser = container.find(".select2-focusser");
            selection.find(".select2-chosen").attr("id", "select2-chosen-" + idSuffix);
            this.focusser.attr("aria-labelledby", "select2-chosen-" + idSuffix);
            this.results.attr("id", "select2-results-" + idSuffix);
            this.search.attr("aria-owns", "select2-results-" + idSuffix);
            this.focusser.attr("id", "s2id_autogen" + idSuffix);
            elementLabel = $("label[for='" + this.opts.element.attr("id") + "']");
            this.focusser.prev().text(elementLabel.text()).attr("for", this.focusser.attr("id"));
            var originalTitle = this.opts.element.attr("title");
            this.opts.element.attr("title", (originalTitle || elementLabel.text()));
            this.focusser.attr("tabindex", this.elementTabIndex);
            this.search.attr("id", this.focusser.attr("id") + "_search");
            this.search.prev().text($("label[for='" + this.focusser.attr("id") + "']").text()).attr("for", this.search.attr("id"));
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) {
                    return
                }
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    killEvent(e);
                    return
                }
                switch (e.which) {
                    case KEY.UP:
                    case KEY.DOWN:
                        this.moveHighlight((e.which === KEY.UP) ? -1 : 1);
                        killEvent(e);
                        return;
                    case KEY.ENTER:
                        this.selectHighlighted();
                        killEvent(e);
                        return;
                    case KEY.TAB:
                        this.selectHighlighted({
                            noFocus: true
                        });
                        return;
                    case KEY.ESC:
                        this.cancel(e);
                        killEvent(e);
                        return
                }
            }));
            this.search.on("blur", this.bind(function(e) {
                if (document.activeElement === this.body.get(0)) {
                    window.setTimeout(this.bind(function() {
                        if (this.opened()) {
                            this.search.focus()
                        }
                    }), 0)
                }
            }));
            this.focusser.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) {
                    return
                }
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                    return
                }
                if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
                    killEvent(e);
                    return
                }
                if (e.which == KEY.DOWN || e.which == KEY.UP || (e.which == KEY.ENTER && this.opts.openOnEnter)) {
                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                        return
                    }
                    this.open();
                    killEvent(e);
                    return
                }
                if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {
                    if (this.opts.allowClear) {
                        this.clear()
                    }
                    killEvent(e);
                    return
                }
            }));
            installKeyUpChangeEvent(this.focusser);
            this.focusser.on("keyup-change input", this.bind(function(e) {
                if (this.opts.minimumResultsForSearch >= 0) {
                    e.stopPropagation();
                    if (this.opened()) {
                        return
                    }
                    this.open()
                }
            }));
            selection.on("mousedown touchstart", "abbr", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) {
                    return
                }
                this.clear();
                killEventImmediately(e);
                this.close();
                this.selection.focus()
            }));
            selection.on("mousedown touchstart", this.bind(function(e) {
                reinsertElement(selection);
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"))
                }
                if (this.opened()) {
                    this.close()
                } else {
                    if (this.isInterfaceEnabled()) {
                        this.open()
                    }
                }
                killEvent(e)
            }));
            dropdown.on("mousedown touchstart", this.bind(function() {
                if (this.opts.shouldFocusInput(this)) {
                    this.search.focus()
                }
            }));
            selection.on("focus", this.bind(function(e) {
                killEvent(e)
            }));
            this.focusser.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"))
                }
                this.container.addClass("select2-container-active")
            })).on("blur", this.bind(function() {
                if (!this.opened()) {
                    this.container.removeClass("select2-container-active");
                    this.opts.element.trigger($.Event("select2-blur"))
                }
            }));
            this.search.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"))
                }
                this.container.addClass("select2-container-active")
            }));
            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.setPlaceholder()
        },
        clear: function(triggerChange) {
            var data = this.selection.data("select2-data");
            if (data) {
                var evt = $.Event("select2-clearing");
                this.opts.element.trigger(evt);
                if (evt.isDefaultPrevented()) {
                    return
                }
                var placeholderOption = this.getPlaceholderOption();
                this.opts.element.val(placeholderOption ? placeholderOption.val() : "");
                this.selection.find(".select2-chosen").empty();
                this.selection.removeData("select2-data");
                this.setPlaceholder();
                if (triggerChange !== false) {
                    this.opts.element.trigger({
                        type: "select2-removed",
                        val: this.id(data),
                        choice: data
                    });
                    this.triggerChange({
                        removed: data
                    })
                }
            }
        },
        initSelection: function() {
            var selected;
            if (this.isPlaceholderOptionSelected()) {
                this.updateSelection(null);
                this.close();
                this.setPlaceholder()
            } else {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(selected) {
                    if (selected !== undefined && selected !== null) {
                        self.updateSelection(selected);
                        self.close();
                        self.setPlaceholder();
                        self.nextSearchTerm = self.opts.nextSearchTerm(selected, self.search.val())
                    }
                })
            }
        },
        isPlaceholderOptionSelected: function() {
            var placeholderOption;
            if (this.getPlaceholder() === undefined) {
                return false
            }
            return ((placeholderOption = this.getPlaceholderOption()) !== undefined && placeholderOption.prop("selected")) || (this.opts.element.val() === "") || (this.opts.element.val() === undefined) || (this.opts.element.val() === null)
        },
        prepareOpts: function() {
            var opts = this.parent.prepareOpts.apply(this, arguments),
                self = this;
            if (opts.element.get(0).tagName.toLowerCase() === "select") {
                opts.initSelection = function(element, callback) {
                    var selected = element.find("option").filter(function() {
                        return this.selected && !this.disabled
                    });
                    callback(self.optionToData(selected))
                }
            } else {
                if ("data" in opts) {
                    opts.initSelection = opts.initSelection || function(element, callback) {
                        var id = element.val();
                        var match = null;
                        opts.query({
                            matcher: function(term, text, el) {
                                var is_match = equal(id, opts.id(el));
                                if (is_match) {
                                    match = el
                                }
                                return is_match
                            },
                            callback: !$.isFunction(callback) ? $.noop : function() {
                                callback(match)
                            }
                        })
                    }
                }
            }
            return opts
        },
        getPlaceholder: function() {
            if (this.select) {
                if (this.getPlaceholderOption() === undefined) {
                    return undefined
                }
            }
            return this.parent.getPlaceholder.apply(this, arguments)
        },
        setPlaceholder: function() {
            var placeholder = this.getPlaceholder();
            if (this.isPlaceholderOptionSelected() && placeholder !== undefined) {
                if (this.select && this.getPlaceholderOption() === undefined) {
                    return
                }
                this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(placeholder));
                this.selection.addClass("select2-default");
                this.container.removeClass("select2-allowclear")
            }
        },
        postprocessResults: function(data, initial, noHighlightUpdate) {
            var selected = 0,
                self = this,
                showSearchInput = true;
            this.findHighlightableChoices().each2(function(i, elm) {
                if (equal(self.id(elm.data("select2-data")), self.opts.element.val())) {
                    selected = i;
                    return false
                }
            });
            if (noHighlightUpdate !== false) {
                if (initial === true && selected >= 0) {
                    this.highlight(selected)
                } else {
                    this.highlight(0)
                }
            }
            if (initial === true) {
                var min = this.opts.minimumResultsForSearch;
                if (min >= 0) {
                    this.showSearch(countResults(data.results) >= min)
                }
            }
        },
        showSearch: function(showSearchInput) {
            if (this.showSearchInput === showSearchInput) {
                return
            }
            this.showSearchInput = showSearchInput;
            this.dropdown.find(".select2-search").toggleClass("select2-search-hidden", !showSearchInput);
            this.dropdown.find(".select2-search").toggleClass("select2-offscreen", !showSearchInput);
            $(this.dropdown, this.container).toggleClass("select2-with-searchbox", showSearchInput)
        },
        onSelect: function(data, options) {
            if (!this.triggerSelect(data)) {
                return
            }
            var old = this.opts.element.val(),
                oldData = this.data();
            this.opts.element.val(this.id(data));
            this.updateSelection(data);
            this.opts.element.trigger({
                type: "select2-selected",
                val: this.id(data),
                choice: data
            });
            this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.val());
            this.close();
            if ((!options || !options.noFocus) && this.opts.shouldFocusInput(this)) {
                this.focusser.focus()
            }
            if (!equal(old, this.id(data))) {
                this.triggerChange({
                    added: data,
                    removed: oldData
                })
            }
        },
        updateSelection: function(data) {
            var container = this.selection.find(".select2-chosen"),
                formatted, cssClass;
            this.selection.data("select2-data", data);
            container.empty();
            if (data !== null) {
                formatted = this.opts.formatSelection(data, container, this.opts.escapeMarkup)
            }
            if (formatted !== undefined) {
                container.append(formatted)
            }
            cssClass = this.opts.formatSelectionCssClass(data, container);
            if (cssClass !== undefined) {
                container.addClass(cssClass)
            }
            this.selection.removeClass("select2-default");
            if (this.opts.allowClear && this.getPlaceholder() !== undefined) {
                this.container.addClass("select2-allowclear")
            }
        },
        val: function() {
            var val, triggerChange = false,
                data = null,
                self = this,
                oldData = this.data();
            if (arguments.length === 0) {
                return this.opts.element.val()
            }
            val = arguments[0];
            if (arguments.length > 1) {
                triggerChange = arguments[1]
            }
            if (this.select) {
                this.select.val(val).find("option").filter(function() {
                    return this.selected
                }).each2(function(i, elm) {
                    data = self.optionToData(elm);
                    return false
                });
                this.updateSelection(data);
                this.setPlaceholder();
                if (triggerChange) {
                    this.triggerChange({
                        added: data,
                        removed: oldData
                    })
                }
            } else {
                if (!val && val !== 0) {
                    this.clear(triggerChange);
                    return
                }
                if (this.opts.initSelection === undefined) {
                    throw new Error("cannot call val() if initSelection() is not defined")
                }
                this.opts.element.val(val);
                this.opts.initSelection(this.opts.element, function(data) {
                    self.opts.element.val(!data ? "" : self.id(data));
                    self.updateSelection(data);
                    self.setPlaceholder();
                    if (triggerChange) {
                        self.triggerChange({
                            added: data,
                            removed: oldData
                        })
                    }
                })
            }
        },
        clearSearch: function() {
            this.search.val("");
            this.focusser.val("")
        },
        data: function(value) {
            var data, triggerChange = false;
            if (arguments.length === 0) {
                data = this.selection.data("select2-data");
                if (data == undefined) {
                    data = null
                }
                return data
            } else {
                if (arguments.length > 1) {
                    triggerChange = arguments[1]
                }
                if (!value) {
                    this.clear(triggerChange)
                } else {
                    data = this.data();
                    this.opts.element.val(!value ? "" : this.id(value));
                    this.updateSelection(value);
                    if (triggerChange) {
                        this.triggerChange({
                            added: value,
                            removed: data
                        })
                    }
                }
            }
        }
    });
    MultiSelect2 = clazz(AbstractSelect2, {
        createContainer: function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container select2-container-multi"
            }).html(["<ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <label for='' class='select2-offscreen'></label>", "    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi select2-display-none'>", "   <ul class='select2-results'>", "   </ul>", "</div>"].join(""));
            return container
        },
        prepareOpts: function() {
            var opts = this.parent.prepareOpts.apply(this, arguments),
                self = this;
            if (opts.element.get(0).tagName.toLowerCase() === "select") {
                opts.initSelection = function(element, callback) {
                    var data = [];
                    element.find("option").filter(function() {
                        return this.selected && !this.disabled
                    }).each2(function(i, elm) {
                        data.push(self.optionToData(elm))
                    });
                    callback(data)
                }
            } else {
                if ("data" in opts) {
                    opts.initSelection = opts.initSelection || function(element, callback) {
                        var ids = splitVal(element.val(), opts.separator);
                        var matches = [];
                        opts.query({
                            matcher: function(term, text, el) {
                                var is_match = $.grep(ids, function(id) {
                                    return equal(id, opts.id(el))
                                }).length;
                                if (is_match) {
                                    matches.push(el)
                                }
                                return is_match
                            },
                            callback: !$.isFunction(callback) ? $.noop : function() {
                                var ordered = [];
                                for (var i = 0; i < ids.length; i++) {
                                    var id = ids[i];
                                    for (var j = 0; j < matches.length; j++) {
                                        var match = matches[j];
                                        if (equal(id, opts.id(match))) {
                                            ordered.push(match);
                                            matches.splice(j, 1);
                                            break
                                        }
                                    }
                                }
                                callback(ordered)
                            }
                        })
                    }
                }
            }
            return opts
        },
        selectChoice: function(choice) {
            var selected = this.container.find(".select2-search-choice-focus");
            if (selected.length && choice && choice[0] == selected[0]) {} else {
                if (selected.length) {
                    this.opts.element.trigger("choice-deselected", selected)
                }
                selected.removeClass("select2-search-choice-focus");
                if (choice && choice.length) {
                    this.close();
                    choice.addClass("select2-search-choice-focus");
                    this.opts.element.trigger("choice-selected", choice)
                }
            }
        },
        destroy: function() {
            $("label[for='" + this.search.attr("id") + "']").attr("for", this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
            cleanupJQueryElements.call(this, "searchContainer", "selection")
        },
        initContainer: function() {
            var selector = ".select2-choices",
                selection;
            this.searchContainer = this.container.find(".select2-search-field");
            this.selection = selection = this.container.find(selector);
            var _this = this;
            this.selection.on("click", ".select2-search-choice:not(.select2-locked)", function(e) {
                _this.search[0].focus();
                _this.selectChoice($(this))
            });
            this.search.attr("id", "s2id_autogen" + nextUid());
            this.search.prev().text($("label[for='" + this.opts.element.attr("id") + "']").text()).attr("for", this.search.attr("id"));
            this.search.on("input paste", this.bind(function() {
                if (this.search.attr("placeholder") && this.search.val().length == 0) {
                    return
                }
                if (!this.isInterfaceEnabled()) {
                    return
                }
                if (!this.opened()) {
                    this.open()
                }
            }));
            this.search.attr("tabindex", this.elementTabIndex);
            this.keydowns = 0;
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) {
                    return
                }++this.keydowns;
                var selected = selection.find(".select2-search-choice-focus");
                var prev = selected.prev(".select2-search-choice:not(.select2-locked)");
                var next = selected.next(".select2-search-choice:not(.select2-locked)");
                var pos = getCursorInfo(this.search);
                if (selected.length && (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {
                    var selectedChoice = selected;
                    if (e.which == KEY.LEFT && prev.length) {
                        selectedChoice = prev
                    } else {
                        if (e.which == KEY.RIGHT) {
                            selectedChoice = next.length ? next : null
                        } else {
                            if (e.which === KEY.BACKSPACE) {
                                if (this.unselect(selected.first())) {
                                    this.search.width(10);
                                    selectedChoice = prev.length ? prev : next
                                }
                            } else {
                                if (e.which == KEY.DELETE) {
                                    if (this.unselect(selected.first())) {
                                        this.search.width(10);
                                        selectedChoice = next.length ? next : null
                                    }
                                } else {
                                    if (e.which == KEY.ENTER) {
                                        selectedChoice = null
                                    }
                                }
                            }
                        }
                    }
                    this.selectChoice(selectedChoice);
                    killEvent(e);
                    if (!selectedChoice || !selectedChoice.length) {
                        this.open()
                    }
                    return
                } else {
                    if (((e.which === KEY.BACKSPACE && this.keydowns == 1) || e.which == KEY.LEFT) && (pos.offset == 0 && !pos.length)) {
                        this.selectChoice(selection.find(".select2-search-choice:not(.select2-locked)").last());
                        killEvent(e);
                        return
                    } else {
                        this.selectChoice(null)
                    }
                }
                if (this.opened()) {
                    switch (e.which) {
                        case KEY.UP:
                        case KEY.DOWN:
                            this.moveHighlight((e.which === KEY.UP) ? -1 : 1);
                            killEvent(e);
                            return;
                        case KEY.ENTER:
                            this.selectHighlighted();
                            killEvent(e);
                            return;
                        case KEY.TAB:
                            this.selectHighlighted({
                                noFocus: true
                            });
                            this.close();
                            return;
                        case KEY.ESC:
                            this.cancel(e);
                            killEvent(e);
                            return
                    }
                }
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {
                    return
                }
                if (e.which === KEY.ENTER) {
                    if (this.opts.openOnEnter === false) {
                        return
                    } else {
                        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                            return
                        }
                    }
                }
                this.open();
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    killEvent(e)
                }
                if (e.which === KEY.ENTER) {
                    killEvent(e)
                }
            }));
            this.search.on("keyup", this.bind(function(e) {
                this.keydowns = 0;
                this.resizeSearch()
            }));
            this.search.on("blur", this.bind(function(e) {
                this.container.removeClass("select2-container-active");
                this.search.removeClass("select2-focused");
                this.selectChoice(null);
                if (!this.opened()) {
                    this.clearSearch()
                }
                e.stopImmediatePropagation();
                this.opts.element.trigger($.Event("select2-blur"))
            }));
            this.container.on("click", selector, this.bind(function(e) {
                if (!this.isInterfaceEnabled()) {
                    return
                }
                if ($(e.target).closest(".select2-search-choice").length > 0) {
                    return
                }
                this.selectChoice(null);
                this.clearPlaceholder();
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"))
                }
                this.open();
                this.focusSearch();
                e.preventDefault()
            }));
            this.container.on("focus", selector, this.bind(function() {
                if (!this.isInterfaceEnabled()) {
                    return
                }
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"))
                }
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
                this.clearPlaceholder()
            }));
            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.clearSearch()
        },
        enableInterface: function() {
            if (this.parent.enableInterface.apply(this, arguments)) {
                this.search.prop("disabled", !this.isInterfaceEnabled())
            }
        },
        initSelection: function() {
            var data;
            if (this.opts.element.val() === "" && this.opts.element.text() === "") {
                this.updateSelection([]);
                this.close();
                this.clearSearch()
            }
            if (this.select || this.opts.element.val() !== "") {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(data) {
                    if (data !== undefined && data !== null) {
                        self.updateSelection(data);
                        self.close();
                        self.clearSearch()
                    }
                })
            }
        },
        clearSearch: function() {
            var placeholder = this.getPlaceholder(),
                maxWidth = this.getMaxSearchWidth();
            if (placeholder !== undefined && this.getVal().length === 0 && this.search.hasClass("select2-focused") === false) {
                this.search.val(placeholder).addClass("select2-default");
                this.search.width(maxWidth > 0 ? maxWidth : this.container.css("width"))
            } else {
                this.search.val("").width(10)
            }
        },
        clearPlaceholder: function() {
            if (this.search.hasClass("select2-default")) {
                this.search.val("").removeClass("select2-default")
            }
        },
        opening: function() {
            this.clearPlaceholder();
            this.resizeSearch();
            this.parent.opening.apply(this, arguments);
            this.focusSearch();
            if (this.search.val() === "") {
                if (this.nextSearchTerm != undefined) {
                    this.search.val(this.nextSearchTerm);
                    this.search.select()
                }
            }
            this.updateResults(true);
            if (this.opts.shouldFocusInput(this)) {
                this.search.focus()
            }
            this.opts.element.trigger($.Event("select2-open"))
        },
        close: function() {
            if (!this.opened()) {
                return
            }
            this.parent.close.apply(this, arguments)
        },
        focus: function() {
            this.close();
            this.search.focus()
        },
        isFocused: function() {
            return this.search.hasClass("select2-focused")
        },
        updateSelection: function(data) {
            var ids = [],
                filtered = [],
                self = this;
            $(data).each(function() {
                if (indexOf(self.id(this), ids) < 0) {
                    ids.push(self.id(this));
                    filtered.push(this)
                }
            });
            data = filtered;
            this.selection.find(".select2-search-choice").remove();
            $(data).each(function() {
                self.addSelectedChoice(this)
            });
            self.postprocessResults()
        },
        tokenize: function() {
            var input = this.search.val();
            input = this.opts.tokenizer.call(this, input, this.data(), this.bind(this.onSelect), this.opts);
            if (input != null && input != undefined) {
                this.search.val(input);
                if (input.length > 0) {
                    this.open()
                }
            }
        },
        onSelect: function(data, options) {
            if (!this.triggerSelect(data)) {
                return
            }
            this.addSelectedChoice(data);
            this.opts.element.trigger({
                type: "selected",
                val: this.id(data),
                choice: data
            });
            this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.val());
            this.clearSearch();
            this.updateResults();
            if (this.select || !this.opts.closeOnSelect) {
                this.postprocessResults(data, false, this.opts.closeOnSelect === true)
            }
            if (this.opts.closeOnSelect) {
                this.close();
                this.search.width(10)
            } else {
                if (this.countSelectableResults() > 0) {
                    this.search.width(10);
                    this.resizeSearch();
                    if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) {
                        this.updateResults(true)
                    } else {
                        if (this.nextSearchTerm != undefined) {
                            this.search.val(this.nextSearchTerm);
                            this.updateResults();
                            this.search.select()
                        }
                    }
                    this.positionDropdown()
                } else {
                    this.close();
                    this.search.width(10)
                }
            }
            this.triggerChange({
                added: data
            });
            if (!options || !options.noFocus) {
                this.focusSearch()
            }
        },
        cancel: function() {
            this.close();
            this.focusSearch()
        },
        addSelectedChoice: function(data) {
            var enableChoice = !data.locked,
                enabledItem = $("<li class='select2-search-choice'>    <div></div>    <a href='#' class='select2-search-choice-close' tabindex='-1'></a></li>"),
                disabledItem = $("<li class='select2-search-choice select2-locked'><div></div></li>");
            var choice = enableChoice ? enabledItem : disabledItem,
                id = this.id(data),
                val = this.getVal(),
                formatted, cssClass;
            formatted = this.opts.formatSelection(data, choice.find("div"), this.opts.escapeMarkup);
            if (formatted != undefined) {
                choice.find("div").replaceWith("<div>" + formatted + "</div>")
            }
            cssClass = this.opts.formatSelectionCssClass(data, choice.find("div"));
            if (cssClass != undefined) {
                choice.addClass(cssClass)
            }
            if (enableChoice) {
                choice.find(".select2-search-choice-close").on("mousedown", killEvent).on("click dblclick", this.bind(function(e) {
                    if (!this.isInterfaceEnabled()) {
                        return
                    }
                    this.unselect($(e.target));
                    this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                    killEvent(e);
                    this.close();
                    this.focusSearch()
                })).on("focus", this.bind(function() {
                    if (!this.isInterfaceEnabled()) {
                        return
                    }
                    this.container.addClass("select2-container-active");
                    this.dropdown.addClass("select2-drop-active")
                }))
            }
            choice.data("select2-data", data);
            choice.insertBefore(this.searchContainer);
            val.push(id);
            this.setVal(val)
        },
        unselect: function(selected) {
            var val = this.getVal(),
                data, index;
            selected = selected.closest(".select2-search-choice");
            if (selected.length === 0) {
                throw "Invalid argument: " + selected + ". Must be .select2-search-choice"
            }
            data = selected.data("select2-data");
            if (!data) {
                return
            }
            var evt = $.Event("select2-removing");
            evt.val = this.id(data);
            evt.choice = data;
            this.opts.element.trigger(evt);
            if (evt.isDefaultPrevented()) {
                return false
            }
            while ((index = indexOf(this.id(data), val)) >= 0) {
                val.splice(index, 1);
                this.setVal(val);
                if (this.select) {
                    this.postprocessResults()
                }
            }
            selected.remove();
            this.opts.element.trigger({
                type: "select2-removed",
                val: this.id(data),
                choice: data
            });
            this.triggerChange({
                removed: data
            });
            return true
        },
        postprocessResults: function(data, initial, noHighlightUpdate) {
            var val = this.getVal(),
                choices = this.results.find(".select2-result"),
                compound = this.results.find(".select2-result-with-children"),
                self = this;
            choices.each2(function(i, choice) {
                var id = self.id(choice.data("select2-data"));
                if (indexOf(id, val) >= 0) {
                    choice.addClass("select2-selected");
                    choice.find(".select2-result-selectable").addClass("select2-selected")
                }
            });
            compound.each2(function(i, choice) {
                if (!choice.is(".select2-result-selectable") && choice.find(".select2-result-selectable:not(.select2-selected)").length === 0) {
                    choice.addClass("select2-selected")
                }
            });
            if (this.highlight() == -1 && noHighlightUpdate !== false) {
                self.highlight(0)
            }
            if (!this.opts.createSearchChoice && !choices.filter(".select2-result:not(.select2-selected)").length > 0) {
                if (!data || data && !data.more && this.results.find(".select2-no-results").length === 0) {
                    if (checkFormatter(self.opts.formatNoMatches, "formatNoMatches")) {
                        this.results.append("<li class='select2-no-results'>" + evaluate(self.opts.formatNoMatches, self.opts.element, self.search.val()) + "</li>")
                    }
                }
            }
        },
        getMaxSearchWidth: function() {
            return this.selection.width() - getSideBorderPadding(this.search)
        },
        resizeSearch: function() {
            var minimumWidth, left, maxWidth, containerLeft, searchWidth, sideBorderPadding = getSideBorderPadding(this.search);
            minimumWidth = measureTextWidth(this.search) + 10;
            left = this.search.offset().left;
            maxWidth = this.selection.width();
            containerLeft = this.selection.offset().left;
            searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;
            if (searchWidth < minimumWidth) {
                searchWidth = maxWidth - sideBorderPadding
            }
            if (searchWidth < 40) {
                searchWidth = maxWidth - sideBorderPadding
            }
            if (searchWidth <= 0) {
                searchWidth = minimumWidth
            }
            this.search.width(Math.floor(searchWidth))
        },
        getVal: function() {
            var val;
            if (this.select) {
                val = this.select.val();
                return val === null ? [] : val
            } else {
                val = this.opts.element.val();
                return splitVal(val, this.opts.separator)
            }
        },
        setVal: function(val) {
            var unique;
            if (this.select) {
                this.select.val(val)
            } else {
                unique = [];
                $(val).each(function() {
                    if (indexOf(this, unique) < 0) {
                        unique.push(this)
                    }
                });
                this.opts.element.val(unique.length === 0 ? "" : unique.join(this.opts.separator))
            }
        },
        buildChangeDetails: function(old, current) {
            var current = current.slice(0),
                old = old.slice(0);
            for (var i = 0; i < current.length; i++) {
                for (var j = 0; j < old.length; j++) {
                    if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {
                        current.splice(i, 1);
                        if (i > 0) {
                            i--
                        }
                        old.splice(j, 1);
                        j--
                    }
                }
            }
            return {
                added: current,
                removed: old
            }
        },
        val: function(val, triggerChange) {
            var oldData, self = this;
            if (arguments.length === 0) {
                return this.getVal()
            }
            oldData = this.data();
            if (!oldData.length) {
                oldData = []
            }
            if (!val && val !== 0) {
                this.opts.element.val("");
                this.updateSelection([]);
                this.clearSearch();
                if (triggerChange) {
                    this.triggerChange({
                        added: this.data(),
                        removed: oldData
                    })
                }
                return
            }
            this.setVal(val);
            if (this.select) {
                this.opts.initSelection(this.select, this.bind(this.updateSelection));
                if (triggerChange) {
                    this.triggerChange(this.buildChangeDetails(oldData, this.data()))
                }
            } else {
                if (this.opts.initSelection === undefined) {
                    throw new Error("val() cannot be called if initSelection() is not defined")
                }
                this.opts.initSelection(this.opts.element, function(data) {
                    var ids = $.map(data, self.id);
                    self.setVal(ids);
                    self.updateSelection(data);
                    self.clearSearch();
                    if (triggerChange) {
                        self.triggerChange(self.buildChangeDetails(oldData, self.data()))
                    }
                })
            }
            this.clearSearch()
        },
        onSortStart: function() {
            if (this.select) {
                throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.")
            }
            this.search.width(0);
            this.searchContainer.hide()
        },
        onSortEnd: function() {
            var val = [],
                self = this;
            this.searchContainer.show();
            this.searchContainer.appendTo(this.searchContainer.parent());
            this.resizeSearch();
            this.selection.find(".select2-search-choice").each(function() {
                val.push(self.opts.id($(this).data("select2-data")))
            });
            this.setVal(val);
            this.triggerChange()
        },
        data: function(values, triggerChange) {
            var self = this,
                ids, old;
            if (arguments.length === 0) {
                return this.selection.children(".select2-search-choice").map(function() {
                    return $(this).data("select2-data")
                }).get()
            } else {
                old = this.data();
                if (!values) {
                    values = []
                }
                ids = $.map(values, function(e) {
                    return self.opts.id(e)
                });
                this.setVal(ids);
                this.updateSelection(values);
                this.clearSearch();
                if (triggerChange) {
                    this.triggerChange(this.buildChangeDetails(old, this.data()))
                }
            }
        }
    });
    $.fn.select2 = function() {
        var args = Array.prototype.slice.call(arguments, 0),
            opts, select2, method, value, multiple, allowedMethods = ["val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "dropdown", "onSortStart", "onSortEnd", "enable", "disable", "readonly", "positionDropdown", "data", "search"],
            valueMethods = ["opened", "isFocused", "container", "dropdown"],
            propertyMethods = ["val", "data"],
            methodsMap = {
                search: "externalSearch"
            };
        this.each(function() {
            if (args.length === 0 || typeof(args[0]) === "object") {
                opts = args.length === 0 ? {} : $.extend({}, args[0]);
                opts.element = $(this);
                if (opts.element.get(0).tagName.toLowerCase() === "select") {
                    multiple = opts.element.prop("multiple")
                } else {
                    multiple = opts.multiple || false;
                    if ("tags" in opts) {
                        opts.multiple = multiple = true
                    }
                }
                select2 = multiple ? new window.Select2["class"].multi() : new window.Select2["class"].single();
                select2.init(opts)
            } else {
                if (typeof(args[0]) === "string") {
                    if (indexOf(args[0], allowedMethods) < 0) {
                        throw "Unknown method: " + args[0]
                    }
                    value = undefined;
                    select2 = $(this).data("select2");
                    if (select2 === undefined) {
                        return
                    }
                    method = args[0];
                    if (method === "container") {
                        value = select2.container
                    } else {
                        if (method === "dropdown") {
                            value = select2.dropdown
                        } else {
                            if (methodsMap[method]) {
                                method = methodsMap[method]
                            }
                            value = select2[method].apply(select2, args.slice(1))
                        }
                    }
                    if (indexOf(args[0], valueMethods) >= 0 || (indexOf(args[0], propertyMethods) >= 0 && args.length == 1)) {
                        return false
                    }
                } else {
                    throw "Invalid arguments to select2 plugin: " + args
                }
            }
        });
        return (value === undefined) ? this : value
    };
    $.fn.select2.defaults = {
        width: "copy",
        loadMorePadding: 0,
        closeOnSelect: true,
        openOnEnter: true,
        containerCss: {},
        dropdownCss: {},
        containerCssClass: "",
        dropdownCssClass: "",
        formatResult: function(result, container, query, escapeMarkup) {
            var markup = [];
            markMatch(result.text, query.term, markup, escapeMarkup);
            return markup.join("")
        },
        formatSelection: function(data, container, escapeMarkup) {
            return data ? escapeMarkup(data.text) : undefined
        },
        sortResults: function(results, container, query) {
            return results
        },
        formatResultCssClass: function(data) {
            return data.css
        },
        formatSelectionCssClass: function(data, container) {
            return undefined
        },
        formatMatches: function(matches) {
            if (matches === 1) {
                return "One result is available, press enter to select it."
            }
            return matches + " results are available, use up and down arrow keys to navigate."
        },
        formatNoMatches: function() {
            return "No matches found"
        },
        formatInputTooShort: function(input, min) {
            var n = min - input.length;
            return "Please enter " + n + " or more character" + (n == 1 ? "" : "s")
        },
        formatInputTooLong: function(input, max) {
            var n = input.length - max;
            return "Please delete " + n + " character" + (n == 1 ? "" : "s")
        },
        formatSelectionTooBig: function(limit) {
            return "You can only select " + limit + " item" + (limit == 1 ? "" : "s")
        },
        formatLoadMore: function(pageNumber) {
            return "Loading more resultsâ€¦"
        },
        formatSearching: function() {
            return "Searchingâ€¦"
        },
        minimumResultsForSearch: 0,
        minimumInputLength: 0,
        maximumInputLength: null,
        maximumSelectionSize: 0,
        id: function(e) {
            return e == undefined ? null : e.id
        },
        matcher: function(term, text) {
            return stripDiacritics("" + text).toUpperCase().indexOf(stripDiacritics("" + term).toUpperCase()) >= 0
        },
        separator: ",",
        tokenSeparators: [],
        tokenizer: defaultTokenizer,
        escapeMarkup: defaultEscapeMarkup,
        blurOnChange: false,
        selectOnBlur: false,
        adaptContainerCssClass: function(c) {
            return c
        },
        adaptDropdownCssClass: function(c) {
            return null
        },
        nextSearchTerm: function(selectedObject, currentSearchTerm) {
            return undefined
        },
        searchInputPlaceholder: "",
        createSearchChoicePosition: "top",
        shouldFocusInput: function(instance) {
            var supportsTouchEvents = (("ontouchstart" in window) || (navigator.msMaxTouchPoints > 0));
            if (!supportsTouchEvents) {
                return true
            }
            if (instance.opts.minimumResultsForSearch < 0) {
                return false
            }
            return true
        }
    };
    $.fn.select2.ajaxDefaults = {
        transport: $.ajax,
        params: {
            type: "GET",
            cache: false,
            dataType: "json"
        }
    };
    window.Select2 = {
        query: {
            ajax: ajax,
            local: local,
            tags: tags
        },
        util: {
            debounce: debounce,
            markMatch: markMatch,
            escapeMarkup: defaultEscapeMarkup,
            stripDiacritics: stripDiacritics
        },
        "class": {
            "abstract": AbstractSelect2,
            single: SingleSelect2,
            multi: MultiSelect2
        }
    }
}(fs));
Select2["class"].multi.prototype.findHighlightableChoices = function() {
    return this.results.find(".select2-result-selectable:not(.select2-disabled)")
};
var Select2TriggerSelect = Select2["class"].multi.prototype.triggerSelect;
Select2["class"].multi.prototype.triggerSelect = function(e) {
    if (-1 === this.val().indexOf(this.id(e))) {
        return Select2TriggerSelect.apply(this, arguments)
    }
    var t = this.id(e),
        i = $.Event("select2-removing");
    if (i.val = t, i.choice = e, this.opts.element.trigger(i), i.isDefaultPrevented()) {
        return !1
    }
    var l = this.val(),
        s = this;
    if (!l || 0 == l.length) {
        return !0
    }
    for (a = 0; a < l.length; a++) {
        l[a] === t && (l.splice(a, 1), this.val(l), this.results.find(".select2-result").each(function() {
            var e = $(this);
            s.id(e.data("select2-data")) === t && e.removeClass("select2-selected")
        }))
    }
    this.opts.element.trigger({
        type: "select2-removed",
        val: this.id(e),
        choice: e
    }), this.triggerChange({
        removed: e
    })
};
(function($) {
    var SelectToRadio;
    var root;
    root = (typeof window !== "undefined" && window !== null) ? window : global;
    root.SelectToRadio = SelectToRadio = function() {
        function SelectToRadio() {
            this.show = function() {
                var $elem = this.$elem,
                    $widget, $all, $allLI, $allRadios, isRadio, mainElementId, alignmentClass, localControlType, localClasswrapper, userOptions = this.options,
                    initialOption = [],
                    initialOptionText = [];
                if (!$elem.data("SelectToRadio")) {
                    if (userOptions.initialSelectValue) {
                        initialOption = $('option[value="' + userOptions.initialSelectValue + '"]', $elem)
                    } else {
                        var intialvalues = [];
                        intialvalues = $("option:selected", $elem);
                        if (intialvalues.length > 1) {
                            $.each(intialvalues, function(index, valueitem) {
                                $elem.find('option[value="' + $(valueitem).val() + '"]').prop("selected", true);
                                initialOption.push($(valueitem).attr("value"));
                                initialOptionText.push($(valueitem).text())
                            })
                        } else {
                            if (intialvalues.length == 1) {
                                var valueitem = intialvalues;
                                initialOption.push($(valueitem).attr("value"));
                                initialOptionText.push($(valueitem).text())
                            }
                        }
                    }
                    if (userOptions.alignment === "horizontal") {
                        alignmentClass = "ff-ext-horizontal"
                    } else {
                        alignmentClass = "ff-ext-vertical"
                    }
                    if (userOptions.controlType === "ff-ext-checkbox") {
                        isRadio = false;
                        localControlType = "ff-ext-checkbox";
                        localClasswrapper = "checkbox"
                    } else {
                        isRadio = true;
                        localControlType = "ff-ext-radio";
                        localClasswrapper = "radiobtn"
                    }
                    $elem.data("SelectToRadio", {
                        userOptions: userOptions,
                        currentItemValue: initialOption,
                        currentItemText: initialOptionText,
                        originalItemValue: initialOption,
                        originalItemText: initialOptionText
                    });
                    mainElementId = $elem.attr("id");
                    $widget = $("<div />", {
                        "class": "ff-select-to-" + localClasswrapper + "-list custom-flex-control-container"
                    }).insertBefore($elem);
                    var $rbUl = $("<ul />", {
                        id: "ul" + mainElementId,
                        "class": "ff-select-to-" + localClasswrapper + "-ul " + alignmentClass
                    });
                    $elem.find("option").each(function(index) {
                        var val, text, rbId, html, $li, $label, $inputControl;
                        val = $(this).val();
                        if (val) {
                            text = $(this).text();
                            html = $(this).data("html");
                            rbId = mainElementId + "__" + index;
                            if (html) {
                                text = html
                            }
                            $li = $("<li/>", {
                                "class": "ff-radio-li"
                            });
                            if (!isRadio) {
                                $li = $("<li/>", {
                                    "class": "ff-checkbox-li"
                                })
                            }
                            $label = $("<label/>", {
                                "for": rbId,
                                text: text
                            });
                            if (isRadio) {
                                $inputControl = $("<span />", {
                                    "class": "ff-ext-radio-css",
                                    name: mainElementId,
                                    id: rbId,
                                    "data-value": val
                                })
                            } else {
                                $inputControl = $("<span />", {
                                    "class": "ff-ext-checkbox-css",
                                    name: mainElementId,
                                    id: rbId,
                                    "data-value": val
                                })
                            }
                            $li.append($inputControl);
                            $li.append($label);
                            $rbUl.append($li)
                        }
                    });
                    $widget.append($rbUl);
                    $elem.data("SelectToRadio").deselectable = (!$elem.find("option:first").val()) ? true : false;
                    if (userOptions.readonly) {
                        $widget.addClass("ff-ext-readonly")
                    }
                    if (isRadio) {
                        $widget.on("radiochange", function(event, value, text) {
                            value = value ? value : $elem.data("SelectToRadio").currentItemValue;
                            text = text ? text : $elem.data("SelectToRadio").currentItemText;
                            $elem.find('option[value="' + value + '"]').prop("selected", true);
                            $elem.change()
                        }).trigger("radiochange");
                        $widget.on("radiostyle", function(event) {
                            $widget.find("li>span").removeClass("ff-ext-selected");
                            $widget.find("li>span").attr("data-" + localControlType + "-checked", false);
                            var selectedValue = $elem.data("SelectToRadio").currentItemValue;
                            $(this).find('li  span[data-value="' + selectedValue + '"]').attr("data-" + localControlType + "-checked", true);
                            $(this).find('li  span[data-value="' + selectedValue + '"]').addClass("ff-ext-selected")
                        }).trigger("radiostyle")
                    } else {
                        $widget.on("checkboxchange", function(event, value, text) {
                            value = value ? value : $elem.data("SelectToRadio").currentItemValue;
                            $elem.find("option").prop("selected", false);
                            if (value !== undefined && value.length > 1) {
                                $elem.find("option").prop("selected", false);
                                $.each(value, function(index, valueitem) {
                                    $elem.find('option[value="' + valueitem + '"]').prop("selected", true)
                                })
                            } else {
                                if (value !== undefined) {
                                    $elem.find('option[value="' + value + '"]').prop("selected", true)
                                }
                            }
                            $elem.change()
                        }).trigger("checkboxchange");
                        $widget.on("checkboxstyle", function(event) {
                            $widget.find("li").removeClass("ff-ext-selected");
                            var value = $elem.data("SelectToRadio").currentItemValue;
                            if (value !== undefined && value.length > 1) {
                                $.each(value, function(index, valueitem) {
                                    $widget.find('li  span[data-value="' + valueitem + '"]').attr("data-" + localControlType + "-checked", true);
                                    $widget.find('li span[data-value="' + valueitem + '"]').addClass("ff-ext-selected")
                                })
                            } else {
                                if (value !== undefined) {
                                    $widget.find('li  span[data-value="' + value + '"]').attr("data-" + localControlType + "-checked", true);
                                    $widget.find('li span[data-value="' + value + '"]').addClass("ff-ext-selected")
                                }
                            }
                        }).trigger("checkboxstyle")
                    }
                    $allLI = $widget.find("li");
                    if (userOptions.readonly) {
                        $allLI.on("click", function(event) {
                            event.preventDefault()
                        })
                    }
                    if (!userOptions.readonly) {
                        $allLI.on("click", function(event) {
                            if (isRadio) {
                                callBackOnClickEvent(this, event)
                            } else {
                                checkBoxCallBackOnClickEvent(this, event)
                            }
                            return false
                        })
                    }
                    $allRadios = $widget.find("li span");

                    function callBackOnClickEvent(thisElement, eventElement) {
                        var $li = $(thisElement);
                        eventElement.preventDefault();
                        var value = $li.find("span").attr("data-value");
                        var text = $li.find("label").text();
                        if ($li.find("span").hasClass("ff-ext-selected")) {
                            $li.find("span").removeClass("ff-ext-selected");
                            $li.find("span").attr("data-" + localControlType + "-checked", true)
                        } else {
                            $widget.find("span").removeClass("ff-ext-selected");
                            $widget.find("span").attr("data-" + localControlType + "-checked", false);
                            $li.find("span").addClass("ff-ext-selected");
                            $li.find("span").attr("data-" + localControlType + "-checked", true)
                        }
                        $elem.data("SelectToRadio").currentItemValue = value;
                        $elem.data("SelectToRadio").currentItemText = text;
                        $widget.trigger("radiochange").trigger("radiostyle");
                        userOptions.onSelect.call(thisElement, $elem.data("SelectToRadio").currentItemValue, $elem.data("SelectToRadio").currentItemText)
                    }

                    function checkBoxCallBackOnClickEvent(thisElement, eventElement) {
                        var valueArray = [];
                        var $li = $(thisElement);
                        eventElement.preventDefault();
                        if ($li.find("span").hasClass("ff-ext-selected")) {
                            $li.find("span").removeClass("ff-ext-selected");
                            $li.find("span").attr("data-" + localControlType + "-checked", false)
                        } else {
                            $li.find("span").addClass("ff-ext-selected");
                            $li.find("span").attr("data-" + localControlType + "-checked", true)
                        }
                        $(thisElement).parent().find("li span").each(function(i, spanelement) {
                            if ($(spanelement).attr("data-" + localControlType + "-checked") == "true") {
                                valueArray.push($(spanelement).attr("data-value"))
                            }
                        });
                        $elem.data("SelectToRadio").currentItemValue = valueArray;
                        $widget.trigger("checkboxchange").trigger("checkboxstyle");
                        userOptions.onSelect.call(thisElement, $elem.data("SelectToRadio").currentItemValue, "")
                    }
                    if (!$elem.hasClass("custom-select-offscreen")) {
                        $elem.addClass("custom-select-offscreen")
                    }
                }
            };
            this.destroy = function() {
                var value = this.$elem.data("SelectToRadio").currentItemValue;
                var text = this.$elem.data("SelectToRadio").currentItemText;
                var options = this.$elem.data("SelectToRadio").userOptions;
                this.$elem.removeData("SelectToRadio");
                this.$widget.off().remove();
                this.$elem.removeClass("custom-select-offscreen");
                options.onDestroy.call(this, value, text)
            }
        }
        SelectToRadio.prototype.init = function(options, elem) {
            var self;
            self = this;
            self.elem = elem;
            self.$elem = $(elem);
            return self.options = $.extend({}, $.fn.SelectToRadio.defaults, options)
        };
        return SelectToRadio
    }();
    $.fn.SelectToRadio = function(method, options) {
        return this.each(function() {
            var plugin = new SelectToRadio();
            if (!$(this).is("select")) {
                $.error("Sorry, this plugin only works with select fields.")
            }
            if (plugin.hasOwnProperty(method)) {
                plugin.init(options, this);
                if (method === "show") {
                    return plugin.show(options)
                } else {
                    if (!$(this).hasClass("custom-select-offscreen")) {
                        $(this).addClass("custom-select-offscreen")
                    }
                    if (this.options.controlType === "ff-ext-checkbox") {
                        plugin.$widget = $(this).prev(".ff-select-to-checkbox-list")
                    } else {
                        plugin.$widget = $(this).prev(".ff-select-to-radiobtn-list")
                    }
                    if (plugin.$widget && plugin.$elem.data("SelectToRadio")) {
                        return plugin[method](options)
                    }
                }
            } else {
                if (typeof method === "object" || !method) {
                    options = method;
                    plugin.init(options, this);
                    return plugin.show()
                } else {
                    $.error("Method " + method + " does not exist on jQuery.SelectToRadio")
                }
            }
        })
    };
    return $.fn.SelectToRadio.defaults = {
        initialSelectValue: null,
        controlType: "ff-ext-radio",
        alignment: "vertical",
        readonly: false,
        onSelect: function() {},
        onDestroy: function() {}
    }
})(fs);
(function($) {
    var FFRating, root;
    root = typeof window !== "undefined" && window !== null ? window : global;
    root.FFRating = FFRating = (function() {
        function FFRating() {
            this.show = function() {
                var $elem = this.$elem,
                    $widget, $all, userOptions = this.options,
                    nextAllorPreviousAll, controlSpecificClass, initialOption;
                if (!$elem.data("ffrating")) {
                    if (userOptions.initialRating) {
                        initialOption = userOptions.initialRating
                    } else {
                        initialOption = $elem.val()
                    }
                    if (userOptions.isStar) {
                        controlSpecificClass = "star-rating-control"
                    } else {
                        controlSpecificClass = "nps-rating-control"
                    }
                    $elem.data("ffrating", {
                        userOptions: userOptions,
                        currentRatingValue: initialOption,
                        originalRatingValue: initialOption
                    });
                    $widget = $("<div />", {
                        "class": "ff-rating-widget " + controlSpecificClass + " custom-flex-control-container"
                    }).insertBefore($elem);
                    var i = parseInt(userOptions.min);
                    var data = [];
                    var maxInteger = parseInt(userOptions.max);
                    for (i; i <= maxInteger; i++) {
                        data.push(i)
                    }
                    $.each(data, function(index, itemvalue) {
                        var val, $a, $span, $iconspan;
                        val = itemvalue;
                        var currentValue = parseInt(itemvalue);
                        if (currentValue >= 0) {
                            $a = $("<a />", {
                                href: "#",
                                title: val,
                                "data-rating-value": val,
                                "data-rating-text": val
                            });
                            if (index == 0) {
                                $span = $("<span />", {
                                    html: userOptions.minLabel,
                                    "class": "rating-label-first"
                                })
                            } else {
                                if ((index == userOptions.medium) && !userOptions.isStar) {
                                    $span = $("<span />", {
                                        html: userOptions.mediumLabel,
                                        "class": "rating-label-middle"
                                    })
                                } else {
                                    if (index == data.length - 1) {
                                        $span = $("<span />", {
                                            html: userOptions.maxLabel,
                                            "class": "rating-label-last"
                                        })
                                    } else {
                                        $span = $("<span />", {
                                            html: ""
                                        })
                                    }
                                }
                            }
                            if (!userOptions.isStar) {
                                $iconspan = $("<span />", {
                                    html: val,
                                    "class": "nps-text"
                                });
                                $a.append($iconspan)
                            } else {
                                $iconspan = $("<span />", {
                                    html: "",
                                    "class": "star-icon"
                                });
                                $a.append($iconspan)
                            }
                            $widget.append($a.append($span))
                        }
                    });
                    if (userOptions.showSelectedRating) {
                        $widget.append($("<span />", {
                            text: "",
                            "class": "ff-rating-current-rating"
                        }))
                    }
                    if (userOptions.reverse) {
                        nextAllorPreviousAll = "nextAll"
                    } else {
                        nextAllorPreviousAll = "prevAll"
                    }
                    if (userOptions.readonly) {
                        $widget.addClass("ff-rating-readonly")
                    }
                    $widget.on("ratingchange", function(event, value) {
                        value = value ? value : $elem.data("ffrating").currentRatingValue;
                        $elem.val(value);
                        if (userOptions.showSelectedRating) {
                            $(this).find(".ff-rating-current-rating").text(value)
                        }
                        $elem.change()
                    }).trigger("ratingchange");
                    $widget.on("ratingstyle", function(event) {
                        $widget.find("a").removeClass("ff-rating-selected ff-rating-current");
                        $(this).find('a[data-rating-value="' + $elem.data("ffrating").currentRatingValue + '"]').addClass("ff-rating-selected ff-rating-current")[nextAllorPreviousAll]().addClass("ff-rating-selected");
                        $elem.val($elem.data("ffrating").currentRatingValue)
                    }).trigger("ratingstyle");
                    $all = $widget.find("a");
                    $all.on("touchstart", function(event) {
                        event.preventDefault();
                        event.stopPropagation();
                        $(this).click()
                    });
                    if (userOptions.readonly) {
                        $all.on("click", function(event) {
                            event.preventDefault()
                        })
                    }
                    if (!userOptions.readonly) {
                        $all.on("click", function(event) {
                            var $a = $(this),
                                value, text;
                            event.preventDefault();
                            $all.removeClass("ff-rating-active ff-rating-selected");
                            $a.addClass("ff-rating-selected")[nextAllorPreviousAll]().addClass("ff-rating-selected");
                            value = $a.attr("data-rating-value");
                            text = $a.attr("data-rating-text");
                            if ($a.hasClass("ff-rating-current") && $elem.data("ffrating").deselectable) {
                                $a.removeClass("ff-rating-selected ff-rating-current")[nextAllorPreviousAll]().removeClass("ff-rating-selected ff-rating-current");
                                value = "", text = ""
                            } else {
                                $all.removeClass("ff-rating-current");
                                $a.addClass("ff-rating-current")
                            }
                            $elem.data("ffrating").currentRatingValue = value;
                            $widget.trigger("ratingchange");
                            userOptions.onSelect.call(this, $elem.data("ffrating").currentRatingValue);
                            return false
                        });
                        $all.on({
                            mouseenter: function() {
                                var $a = $(this);
                                $all.removeClass("ff-rating-active").removeClass("ff-rating-selected");
                                $a.addClass("ff-rating-active")[nextAllorPreviousAll]().addClass("ff-rating-active")
                            }
                        });
                        $widget.on({
                            mouseleave: function() {
                                $all.removeClass("ff-rating-active");
                                $widget.trigger("ratingstyle")
                            }
                        })
                    }
                    if (!$elem.hasClass("custom-flexcontrol-offscreen")) {
                        $elem.addClass("custom-flexcontrol-offscreen")
                    }
                }
            };
            this.destroy = function() {
                var value = this.$elem.data("ffrating").currentRatingValue;
                var options = this.$elem.data("ffrating").userOptions;
                this.$elem.removeData("ffrating");
                this.$elem.removeClass("custom-flexcontrol-offscreen");
                this.$widget.off().remove();
                this.$elem.show();
                $(this.$elem).removeAttributes(["data-flex-min", "data-flex-max", "data-flex-middle", "data-flex-minlabel", "data-flex-maxlabel", "data-flex-middlelabel"]);
                options.onDestroy.call(this, value)
            }
        }

        function safeAttr(inputElem, dataAttr, defaultValue, setDefaultIfEmpty) {
            var defaultvalue = defaultValue;
            try {
                var defaultvalue = $(inputElem).attr(dataAttr);
                if (defaultvalue === undefined) {
                    defaultvalue = ""
                }
                if (setDefaultIfEmpty && defaultvalue == "") {
                    defaultvalue = defaultValue
                }
            } catch (err) {
                defaultvalue = defaultValue;
                console.log("FF log (ffrating.js):" + err.message)
            }
            return defaultvalue
        }
        $.fn.removeAttributes = function(only, except) {
            if (only) {
                only = $.map(only, function(item) {
                    return item.toString().toLowerCase()
                })
            }
            if (except) {
                except = $.map(except, function(item) {
                    return item.toString().toLowerCase()
                });
                if (only) {
                    only = $.grep(only, function(item, index) {
                        return $.inArray(item, except) == -1
                    })
                }
            }
            return this.each(function() {
                var attributes;
                if (!only) {
                    attributes = $.map(this.attributes, function(item) {
                        return item.name.toString().toLowerCase()
                    });
                    if (except) {
                        attributes = $.grep(attributes, function(item, index) {
                            return $.inArray(item, except) == -1
                        })
                    }
                } else {
                    attributes = only
                }
                var handle = $(this);
                $.each(attributes, function(index, item) {
                    handle.removeAttr(item)
                })
            })
        };
        FFRating.prototype.init = function(options, elem) {
            var self;
            self = this;
            self.elem = elem;
            self.$elem = $(elem);
            if (options !== undefined) {
                options.min = safeAttr($(elem), "data-flex-min", $.fn.ffrating.defaults.min, true);
                options.minLabel = safeAttr($(elem), "data-flex-minlabel", $.fn.ffrating.defaults.minLabel, false);
                options.max = safeAttr($(elem), "data-flex-max", $.fn.ffrating.defaults.max, true);
                options.maxLabel = safeAttr($(elem), "data-flex-maxlabel", $.fn.ffrating.defaults.maxLabel, false);
                options.medium = safeAttr($(elem), "data-flex-middle", $.fn.ffrating.defaults.medium, false);
                options.mediumLabel = safeAttr($(elem), "data-flex-middlelabel", $.fn.ffrating.defaults.mediumLabel, false)
            }
            return self.options = $.extend({}, $.fn.ffrating.defaults, options)
        };
        return FFRating
    })();
    $.fn.ffrating = function(method, options) {
        return this.each(function() {
            var plugin = new FFRating();
            if (!$(this).is("input")) {
                $.error("Sorry, this plugin only works with input fields.")
            }
            if (plugin.hasOwnProperty(method)) {
                plugin.init(options, this);
                if (method === "show") {
                    return plugin.show(options)
                } else {
                    if (!$(this).hasClass("custom-flexcontrol-offscreen")) {
                        $(this).addClass("custom-flexcontrol-offscreen")
                    }
                    plugin.$widget = $(this).prev(".ff-rating-widget");
                    if (plugin.$widget && plugin.$elem.data("ffrating")) {
                        return plugin[method](options)
                    }
                }
            } else {
                if (typeof method === "object" || !method) {
                    options = method;
                    plugin.init(options, this);
                    return plugin.show()
                } else {
                    $.error("Method " + method + " does not exist on jQuery.ffrating")
                }
            }
        })
    };
    return $.fn.ffrating.defaults = {
        initialRating: null,
        min: 0,
        max: 10,
        steps: 1,
        medium: 5,
        minLabel: "1",
        maxLabel: "10",
        mediumLabel: "5",
        isStar: true,
        showValues: false,
        showSelectedRating: false,
        reverse: false,
        readonly: false,
        onSelect: function() {},
        onClear: function() {},
        onDestroy: function() {}
    }
})(fs);
(function($) {
    function SignaturePad(selector, options) {
        var self = this,
            settings = $.extend({}, $.fn.signaturePad.defaults, options),
            context = $(selector),
            canvas = $(settings.canvas, context),
            element = canvas.get(0),
            canvasContext = null,
            previous = {
                x: null,
                y: null
            },
            output = [],
            mouseLeaveTimeout = false,
            mouseButtonDown = false,
            touchable = false,
            eventsBound = false,
            typeItDefaultFontSize = 30,
            typeItCurrentFontSize = typeItDefaultFontSize,
            typeItNumChars = 0;

        function clearMouseLeaveTimeout() {
            clearTimeout(mouseLeaveTimeout);
            mouseLeaveTimeout = false;
            mouseButtonDown = false
        }

        function drawLine(e, newYOffset) {
            var offset, newX, newY;
            e.preventDefault();
            offset = $(e.target).offset();
            clearTimeout(mouseLeaveTimeout);
            mouseLeaveTimeout = false;
            if (typeof e.targetTouches !== "undefined") {
                newX = Math.floor(e.targetTouches[0].pageX - offset.left);
                newY = Math.floor(e.targetTouches[0].pageY - offset.top)
            } else {
                newX = Math.floor(e.pageX - offset.left);
                newY = Math.floor(e.pageY - offset.top)
            }
            if (previous.x === newX && previous.y === newY) {
                return true
            }
            if (previous.x === null) {
                previous.x = newX
            }
            if (previous.y === null) {
                previous.y = newY
            }
            if (newYOffset) {
                newY += newYOffset
            }
            canvasContext.beginPath();
            canvasContext.moveTo(previous.x, previous.y);
            canvasContext.lineTo(newX, newY);
            canvasContext.lineCap = settings.penCap;
            canvasContext.stroke();
            canvasContext.closePath();
            output.push({
                lx: newX,
                ly: newY,
                mx: previous.x,
                my: previous.y
            });
            previous.x = newX;
            previous.y = newY;
            if (settings.onDraw && typeof settings.onDraw === "function") {
                settings.onDraw.apply(self)
            }
        }

        function stopDrawingWrapper() {
            stopDrawing()
        }

        function stopDrawing(e) {
            if (!!e) {
                drawLine(e, 1)
            } else {
                if (touchable) {
                    canvas.each(function() {
                        this.removeEventListener("touchmove", drawLine)
                    })
                } else {
                    canvas.unbind("mousemove.signaturepad")
                }
                if (output.length > 0 && settings.onDrawEnd && typeof settings.onDrawEnd === "function") {
                    settings.onDrawEnd.apply(self)
                }
            }
            previous.x = null;
            previous.y = null;
            if (settings.output && output.length > 0) {
                $(settings.output, context).val(JSON.stringify(output))
            }
        }

        function drawSigLine() {
            if (!settings.lineWidth) {
                return false
            }
            canvasContext.beginPath();
            canvasContext.lineWidth = settings.lineWidth;
            canvasContext.strokeStyle = settings.lineColour;
            canvasContext.moveTo(settings.lineMargin, settings.lineTop);
            canvasContext.lineTo(element.width - settings.lineMargin, settings.lineTop);
            canvasContext.stroke();
            canvasContext.closePath()
        }

        function clearCanvas() {
            canvasContext.clearRect(0, 0, element.width, element.height);
            canvasContext.fillStyle = settings.bgColour;
            canvasContext.fillRect(0, 0, element.width, element.height);
            if (!settings.displayOnly) {
                drawSigLine()
            }
            canvasContext.lineWidth = settings.penWidth;
            canvasContext.strokeStyle = settings.penColour;
            $(settings.output, context).val("");
            output = [];
            stopDrawing()
        }

        function onMouseMove(e, o) {
            if (previous.x == null) {
                drawLine(e, 1)
            } else {
                drawLine(e, o)
            }
        }

        function startDrawing(e, touchObject) {
            if (touchable) {
                touchObject.addEventListener("touchmove", onMouseMove, false)
            } else {
                canvas.bind("mousemove.signaturepad", onMouseMove)
            }
            drawLine(e, 1)
        }

        function disableCanvas() {
            eventsBound = false;
            canvas.each(function() {
                if (this.removeEventListener) {
                    this.removeEventListener("touchend", stopDrawingWrapper);
                    this.removeEventListener("touchcancel", stopDrawingWrapper);
                    this.removeEventListener("touchmove", drawLine)
                }
                if (this.ontouchstart) {
                    this.ontouchstart = null
                }
            });
            $(document).unbind("mouseup.signaturepad");
            canvas.unbind("mousedown.signaturepad");
            canvas.unbind("mousemove.signaturepad");
            canvas.unbind("mouseleave.signaturepad");
            $(settings.clear, context).unbind("click.signaturepad")
        }

        function initDrawEvents(e) {
            if (eventsBound) {
                return false
            }
            eventsBound = true;
            $("input").blur();
            if (typeof e.targetTouches !== "undefined") {
                touchable = true
            }
            if (touchable) {
                canvas.each(function() {
                    this.addEventListener("touchend", stopDrawingWrapper, false);
                    this.addEventListener("touchcancel", stopDrawingWrapper, false)
                });
                canvas.unbind("mousedown.signaturepad")
            } else {
                $(document).bind("mouseup.signaturepad", function() {
                    if (mouseButtonDown) {
                        stopDrawing();
                        clearMouseLeaveTimeout()
                    }
                });
                canvas.bind("mouseleave.signaturepad", function(e) {
                    if (mouseButtonDown) {
                        stopDrawing(e)
                    }
                    if (mouseButtonDown && !mouseLeaveTimeout) {
                        mouseLeaveTimeout = setTimeout(function() {
                            stopDrawing();
                            clearMouseLeaveTimeout()
                        }, 500)
                    }
                });
                canvas.each(function() {
                    this.ontouchstart = null
                })
            }
        }

        function drawIt() {
            $(settings.typed, context).hide();
            clearCanvas();
            canvas.each(function() {
                this.ontouchstart = function(e) {
                    e.preventDefault();
                    mouseButtonDown = true;
                    initDrawEvents(e);
                    startDrawing(e, this)
                }
            });
            canvas.bind("mousedown.signaturepad", function(e) {
                e.preventDefault();
                if (e.which > 1) {
                    return false
                }
                mouseButtonDown = true;
                initDrawEvents(e);
                startDrawing(e)
            });
            $(settings.clear, context).bind("click.signaturepad", function(e) {
                e.preventDefault();
                clearCanvas()
            });
            $(settings.typeIt, context).bind("click.signaturepad", function(e) {
                e.preventDefault();
                typeIt()
            });
            $(settings.drawIt, context).unbind("click.signaturepad");
            $(settings.drawIt, context).bind("click.signaturepad", function(e) {
                e.preventDefault()
            });
            $(settings.typeIt, context).removeClass(settings.currentClass);
            $(settings.drawIt, context).addClass(settings.currentClass);
            $(settings.sig, context).addClass(settings.currentClass);
            $(settings.typeItDesc, context).hide();
            $(settings.drawItDesc, context).show();
            $(settings.clear, context).show()
        }

        function typeIt() {
            clearCanvas();
            disableCanvas();
            $(settings.typed, context).show();
            $(settings.drawIt, context).bind("click.signaturepad", function(e) {
                e.preventDefault();
                drawIt()
            });
            $(settings.typeIt, context).unbind("click.signaturepad");
            $(settings.typeIt, context).bind("click.signaturepad", function(e) {
                e.preventDefault()
            });
            $(settings.output, context).val("");
            $(settings.drawIt, context).removeClass(settings.currentClass);
            $(settings.typeIt, context).addClass(settings.currentClass);
            $(settings.sig, context).removeClass(settings.currentClass);
            $(settings.drawItDesc, context).hide();
            $(settings.clear, context).hide();
            $(settings.typeItDesc, context).show();
            typeItCurrentFontSize = typeItDefaultFontSize = $(settings.typed, context).css("font-size").replace(/px/, "")
        }

        function type(val) {
            var typed = $(settings.typed, context),
                cleanedVal = $.trim(val.replace(/>/g, "&gt;").replace(/</g, "&lt;")),
                oldLength = typeItNumChars,
                edgeOffset = typeItCurrentFontSize * 0.5;
            typeItNumChars = cleanedVal.length;
            typed.html(cleanedVal);
            if (!cleanedVal) {
                typed.css("font-size", typeItDefaultFontSize + "px");
                return
            }
            if (typeItNumChars > oldLength && typed.outerWidth() > element.width) {
                while (typed.outerWidth() > element.width) {
                    typeItCurrentFontSize--;
                    typed.css("font-size", typeItCurrentFontSize + "px")
                }
            }
            if (typeItNumChars < oldLength && typed.outerWidth() + edgeOffset < element.width && typeItCurrentFontSize < typeItDefaultFontSize) {
                while (typed.outerWidth() + edgeOffset < element.width && typeItCurrentFontSize < typeItDefaultFontSize) {
                    typeItCurrentFontSize++;
                    typed.css("font-size", typeItCurrentFontSize + "px")
                }
            }
        }

        function onBeforeValidate(context, settings) {
            $("p." + settings.errorClass, context).remove();
            context.removeClass(settings.errorClass);
            $("input, label", context).removeClass(settings.errorClass)
        }

        function onFormError(errors, context, settings) {
            if (errors.nameInvalid) {
                context.append(['<p id="reqdv' + $(settings.name, context).attr("id") + '" class="', settings.errorClass, '">', settings.errorMessage, "</p>"].join(""));
                $(settings.name, context).addClass("ff-input-type-invalid");
                $("label[for=" + $(settings.name, context).attr("id") + "]", context).addClass(settings.errorClass)
            } else {
                $(settings.name, context).removeClass("ff-input-type-invalid")
            }
            if (errors.drawInvalid) {
                context.append(['<p id="reqdvcanvas' + $(settings.name, context).attr("id") + '" class="', settings.errorClass, '">', settings.errorMessageDraw, "</p>"].join(""));
                $(settings.canvas, context).addClass("ff-input-type-invalid");
                $(settings.canvas, context).attr("id", "canvas" + $(settings.name, context).attr("id"))
            } else {
                $(settings.canvas, context).removeClass("ff-input-type-invalid")
            }
        }

        function validateForm() {
            var valid = true,
                errors = {
                    drawInvalid: false,
                    nameInvalid: false
                },
                onBeforeArguments = [context, settings],
                onErrorArguments = [errors, context, settings];
            if (settings.onBeforeValidate && typeof settings.onBeforeValidate === "function") {
                settings.onBeforeValidate.apply(self, onBeforeArguments)
            } else {
                onBeforeValidate.apply(self, onBeforeArguments)
            }
            if (settings.drawOnly && output.length < 1) {
                errors.drawInvalid = true;
                valid = false
            }
            if ($(settings.name, context).val() === "") {
                errors.nameInvalid = true;
                valid = false
            }
            if (settings.onFormError && typeof settings.onFormError === "function") {
                settings.onFormError.apply(self, onErrorArguments)
            } else {
                onFormError.apply(self, onErrorArguments)
            }
            return valid
        }

        function drawSignature(paths, context, saveOutput) {
            for (var i in paths) {
                if (typeof paths[i] === "object") {
                    context.beginPath();
                    context.moveTo(paths[i].mx, paths[i].my);
                    context.lineTo(paths[i].lx, paths[i].ly);
                    context.lineCap = settings.penCap;
                    context.stroke();
                    context.closePath();
                    if (saveOutput) {
                        output.push({
                            lx: paths[i].lx,
                            ly: paths[i].ly,
                            mx: paths[i].mx,
                            my: paths[i].my
                        })
                    }
                }
            }
        }

        function init() {
            if (parseFloat(((/CPU.+OS ([0-9_]{3}).*AppleWebkit.*Mobile/i.exec(navigator.userAgent)) || [0, "4_2"])[1].replace("_", ".")) < 4.1) {
                $.fn.Oldoffset = $.fn.offset;
                $.fn.offset = function() {
                    var result = $(this).Oldoffset();
                    result.top -= window.scrollY;
                    result.left -= window.scrollX;
                    return result
                }
            }
            $(settings.typed, context).bind("selectstart.signaturepad", function(e) {
                return $(e.target).is(":input")
            });
            canvas.bind("selectstart.signaturepad", function(e) {
                return $(e.target).is(":input")
            });
            if (!element.getContext && FlashCanvas) {
                FlashCanvas.initElement(element)
            }
            if (element.getContext) {
                canvasContext = element.getContext("2d");
                $(settings.sig, context).show();
                if (!settings.displayOnly) {
                    if (!settings.drawOnly) {
                        $(settings.name, context).bind("keyup.signaturepad", function() {
                            type($(this).val())
                        });
                        $(settings.name, context).bind("blur.signaturepad", function() {
                            type($(this).val())
                        });
                        $(settings.drawIt, context).bind("click.signaturepad", function(e) {
                            e.preventDefault();
                            drawIt()
                        })
                    }
                    if (settings.drawOnly || settings.defaultAction === "drawIt") {
                        drawIt()
                    } else {
                        typeIt()
                    }
                    if (settings.validateFields) {
                        if ($(selector).is("form")) {
                            $(selector).bind("submit.signaturepad", function() {
                                return validateForm()
                            })
                        } else {
                            $(selector).parents("form").bind("submit.signaturepad", function() {
                                return validateForm()
                            })
                        }
                    }
                    $(settings.sigNav, context).show()
                }
            }
        }
        $.extend(self, {
            signaturePad: "{{version}}",
            init: function() {
                init()
            },
            updateOptions: function(options) {
                $.extend(settings, options)
            },
            regenerate: function(paths) {
                self.clearCanvas();
                $(settings.typed, context).hide();
                if (typeof paths === "string") {
                    paths = JSON.parse(paths)
                }
                drawSignature(paths, canvasContext, true);
                if (settings.output && $(settings.output, context).length > 0) {
                    $(settings.output, context).val(JSON.stringify(output))
                }
            },
            clearCanvas: function() {
                clearCanvas()
            },
            getSignature: function() {
                return output
            },
            getSignatureString: function() {
                return JSON.stringify(output)
            },
            getSignatureImage: function() {
                var tmpCanvas = document.createElement("canvas"),
                    tmpContext = null,
                    data = null;
                tmpCanvas.style.position = "absolute";
                tmpCanvas.style.top = "-999em";
                tmpCanvas.width = element.width;
                tmpCanvas.height = element.height;
                document.body.appendChild(tmpCanvas);
                if (!tmpCanvas.getContext && FlashCanvas) {
                    FlashCanvas.initElement(tmpCanvas)
                }
                tmpContext = tmpCanvas.getContext("2d");
                tmpContext.fillStyle = settings.bgColour;
                tmpContext.fillRect(0, 0, element.width, element.height);
                tmpContext.lineWidth = settings.penWidth;
                tmpContext.strokeStyle = settings.penColour;
                drawSignature(output, tmpContext);
                data = tmpCanvas.toDataURL.apply(tmpCanvas, arguments);
                document.body.removeChild(tmpCanvas);
                tmpCanvas = null;
                return data
            },
            validateForm: function() {
                return validateForm()
            }
        })
    }
    $.fn.signaturePad = function(options) {
        var api = null;
        this.each(function() {
            if (!$.data(this, "plugin-signaturePad")) {
                api = new SignaturePad(this, options);
                api.init();
                $.data(this, "plugin-signaturePad", api)
            } else {
                api = $.data(this, "plugin-signaturePad");
                api.updateOptions(options)
            }
        });
        return api
    };
    $.fn.signaturePad.defaults = {
        defaultAction: "typeIt",
        displayOnly: false,
        drawOnly: false,
        canvas: "canvas",
        sig: ".sig",
        sigNav: ".sigNav",
        bgColour: "#ffffff",
        penColour: "#145394",
        penWidth: 2,
        penCap: "round",
        lineColour: "#ccc",
        lineWidth: 2,
        lineMargin: 5,
        lineTop: 35,
        name: ".name",
        typed: ".typed",
        clear: ".clearButton",
        typeIt: ".typeIt a",
        drawIt: ".drawIt a",
        typeItDesc: ".typeItDesc",
        drawItDesc: ".drawItDesc",
        output: ".output",
        currentClass: "current",
        validateFields: true,
        errorClass: "error",
        errorMessage: "Please enter your name",
        errorMessageDraw: "Please sign the document",
        onBeforeValidate: null,
        onFormError: null,
        onDraw: null,
        onDrawEnd: null
    }
}(fs));
if (!this.JSON) {
    this.JSON = {}
}(function() {
    function f(n) {
        return n < 10 ? "0" + n : n
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function(key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap, indent, meta = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        },
        rep;

    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }

    function str(key, holder) {
        var i, k, v, length, mind = gap,
            partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
            case "string":
                return quote(value);
            case "number":
                return isFinite(value) ? String(value) : "null";
            case "boolean":
            case "null":
                return String(value);
            case "object":
                if (!value) {
                    return "null"
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || "null"
                    }
                    v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                    gap = mind;
                    return v
                }
                if (rep && typeof rep === "object") {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        k = rep[i];
                        if (typeof k === "string") {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                }
                v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                gap = mind;
                return v
        }
    }
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function(value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function(text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function(a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else {
        if (typeof module !== "undefined" && module.exports) {
            module.exports = factory(require("jquery"))
        } else {
            factory(fs)
        }
    }
})(function($) {
    var $scrollTo = $.scrollTo = function(target, duration, settings) {
        return $(window).scrollTo(target, duration, settings)
    };
    $scrollTo.defaults = {
        axis: "xy",
        duration: 0,
        limit: true
    };

    function isWin(elem) {
        return !elem.nodeName || $.inArray(elem.nodeName.toLowerCase(), ["iframe", "#document", "html", "body"]) !== -1
    }
    $.fn.scrollTo = function(target, duration, settings) {
        if (typeof duration === "object") {
            settings = duration;
            duration = 0
        }
        if (typeof settings === "function") {
            settings = {
                onAfter: settings
            }
        }
        if (target === "max") {
            target = 9000000000
        }
        settings = $.extend({}, $scrollTo.defaults, settings);
        duration = duration || settings.duration;
        var queue = settings.queue && settings.axis.length > 1;
        if (queue) {
            duration /= 2
        }
        settings.offset = both(settings.offset);
        settings.over = both(settings.over);
        return this.each(function() {
            if (target === null) {
                return
            }
            var win = isWin(this),
                elem = win ? this.contentWindow || window : this,
                $elem = $(elem),
                targ = target,
                attr = {},
                toff;
            switch (typeof targ) {
                case "number":
                case "string":
                    if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
                        targ = both(targ);
                        break
                    }
                    targ = win ? $(targ) : $(targ, elem);
                case "object":
                    if (targ.length === 0) {
                        return
                    }
                    if (targ.is || targ.style) {
                        toff = (targ = $(targ)).offset()
                    }
            }
            var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;
            $.each(settings.axis.split(""), function(i, axis) {
                var Pos = axis === "x" ? "Left" : "Top",
                    pos = Pos.toLowerCase(),
                    key = "scroll" + Pos,
                    prev = $elem[key](),
                    max = $scrollTo.max(elem, axis);
                if (toff) {
                    attr[key] = toff[pos] + (win ? 0 : prev - $elem.offset()[pos]);
                    if (settings.margin) {
                        attr[key] -= parseInt(targ.css("margin" + Pos), 10) || 0;
                        attr[key] -= parseInt(targ.css("border" + Pos + "Width"), 10) || 0
                    }
                    attr[key] += offset[pos] || 0;
                    if (settings.over[pos]) {
                        attr[key] += targ[axis === "x" ? "width" : "height"]() * settings.over[pos]
                    }
                } else {
                    var val = targ[pos];
                    attr[key] = val.slice && val.slice(-1) === "%" ? parseFloat(val) / 100 * max : val
                }
                if (settings.limit && /^\d+$/.test(attr[key])) {
                    attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max)
                }
                if (!i && settings.axis.length > 1) {
                    if (prev === attr[key]) {
                        attr = {}
                    } else {
                        if (queue) {
                            animate(settings.onAfterFirst);
                            attr = {}
                        }
                    }
                }
            });
            animate(settings.onAfter);

            function animate(callback) {
                var opts = $.extend({}, settings, {
                    queue: true,
                    duration: duration,
                    complete: callback && function() {
                        callback.call(elem, targ, settings)
                    }
                });
                $elem.animate(attr, opts)
            }
        })
    };
    $scrollTo.max = function(elem, axis) {
        var Dim = axis === "x" ? "Width" : "Height",
            scroll = "scroll" + Dim;
        if (!isWin(elem)) {
            return elem[scroll] - $(elem)[Dim.toLowerCase()]()
        }
        var size = "client" + Dim,
            doc = elem.ownerDocument || elem.document,
            html = doc.documentElement,
            body = doc.body;
        return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size])
    };

    function both(val) {
        return $.isFunction(val) || $.isPlainObject(val) ? val : {
            top: val,
            left: val
        }
    }
    $.Tween.propHooks.scrollLeft = $.Tween.propHooks.scrollTop = {
        get: function(t) {
            return $(t.elem)[t.prop]()
        },
        set: function(t) {
            var curr = this.get(t);
            if (t.options.interrupt && t._last && t._last !== curr) {
                return $(t.elem).stop()
            }
            var next = Math.round(t.now);
            if (curr !== next) {
                $(t.elem)[t.prop](next);
                t._last = this.get(t)
            }
        }
    };
    return $scrollTo
});
window.LZString = function() {
    function o(o, r) {
        if (!t[o]) {
            t[o] = {};
            for (var n = 0; n < o.length; n++) {
                t[o][o.charAt(n)] = n
            }
        }
        return t[o][r]
    }
    var r = String.fromCharCode,
        n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",
        t = {},
        i = {
            compressToBase64: function(o) {
                if (null == o) {
                    return ""
                }
                var r = i._compress(o, 6, function(o) {
                    return n.charAt(o)
                });
                switch (r.length % 4) {
                    default:
                        case 0:
                        return r;
                    case 1:
                            return r + "===";
                    case 2:
                            return r + "==";
                    case 3:
                            return r + "="
                }
            },
            decompressFromBase64: function(r) {
                return null == r ? "" : "" == r ? null : i._decompress(r.length, 32, function(e) {
                    return o(n, r.charAt(e))
                })
            },
            compressToUTF16: function(o) {
                return null == o ? "" : i._compress(o, 15, function(o) {
                    return r(o + 32)
                }) + " "
            },
            decompressFromUTF16: function(o) {
                return null == o ? "" : "" == o ? null : i._decompress(o.length, 16384, function(r) {
                    return o.charCodeAt(r) - 32
                })
            },
            compressToUint8Array: function(o) {
                for (var r = i.compress(o), n = new Uint8Array(2 * r.length), e = 0, t = r.length; t > e; e++) {
                    var s = r.charCodeAt(e);
                    n[2 * e] = s >>> 8, n[2 * e + 1] = s % 256
                }
                return n
            },
            decompressFromUint8Array: function(o) {
                if (null === o || void 0 === o) {
                    return i.decompress(o)
                }
                for (var n = new Array(o.length / 2), e = 0, t = n.length; t > e; e++) {
                    n[e] = 256 * o[2 * e] + o[2 * e + 1]
                }
                var s = [];
                return n.forEach(function(o) {
                    s.push(r(o))
                }), i.decompress(s.join(""))
            },
            compressToEncodedURIComponent: function(o) {
                return null == o ? "" : i._compress(o, 6, function(o) {
                    return e.charAt(o)
                })
            },
            decompressFromEncodedURIComponent: function(r) {
                return null == r ? "" : "" == r ? null : (r = r.replace(/ /g, "+"), i._decompress(r.length, 32, function(n) {
                    return o(e, r.charAt(n))
                }))
            },
            compress: function(o) {
                return i._compress(o, 16, function(o) {
                    return r(o)
                })
            },
            _compress: function(o, r, n) {
                if (null == o) {
                    return ""
                }
                var e, t, i, s = {},
                    p = {},
                    u = "",
                    c = "",
                    a = "",
                    l = 2,
                    f = 3,
                    h = 2,
                    d = [],
                    m = 0,
                    v = 0;
                for (i = 0; i < o.length; i += 1) {
                    if (u = o.charAt(i), Object.prototype.hasOwnProperty.call(s, u) || (s[u] = f++, p[u] = !0), c = a + u, Object.prototype.hasOwnProperty.call(s, c)) {
                        a = c
                    } else {
                        if (Object.prototype.hasOwnProperty.call(p, a)) {
                            if (a.charCodeAt(0) < 256) {
                                for (e = 0; h > e; e++) {
                                    m <<= 1, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++
                                }
                                for (t = a.charCodeAt(0), e = 0; 8 > e; e++) {
                                    m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                                }
                            } else {
                                for (t = 1, e = 0; h > e; e++) {
                                    m = m << 1 | t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t = 0
                                }
                                for (t = a.charCodeAt(0), e = 0; 16 > e; e++) {
                                    m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                                }
                            }
                            l--, 0 == l && (l = Math.pow(2, h), h++), delete p[a]
                        } else {
                            for (t = s[a], e = 0; h > e; e++) {
                                m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                            }
                        }
                        l--, 0 == l && (l = Math.pow(2, h), h++), s[c] = f++, a = String(u)
                    }
                }
                if ("" !== a) {
                    if (Object.prototype.hasOwnProperty.call(p, a)) {
                        if (a.charCodeAt(0) < 256) {
                            for (e = 0; h > e; e++) {
                                m <<= 1, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++
                            }
                            for (t = a.charCodeAt(0), e = 0; 8 > e; e++) {
                                m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                            }
                        } else {
                            for (t = 1, e = 0; h > e; e++) {
                                m = m << 1 | t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t = 0
                            }
                            for (t = a.charCodeAt(0), e = 0; 16 > e; e++) {
                                m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                            }
                        }
                        l--, 0 == l && (l = Math.pow(2, h), h++), delete p[a]
                    } else {
                        for (t = s[a], e = 0; h > e; e++) {
                            m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                        }
                    }
                    l--, 0 == l && (l = Math.pow(2, h), h++)
                }
                for (t = 2, e = 0; h > e; e++) {
                    m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1
                }
                for (;;) {
                    if (m <<= 1, v == r - 1) {
                        d.push(n(m));
                        break
                    }
                    v++
                }
                return d.join("")
            },
            decompress: function(o) {
                return null == o ? "" : "" == o ? null : i._decompress(o.length, 32768, function(r) {
                    return o.charCodeAt(r)
                })
            },
            _decompress: function(o, n, e) {
                var t, i, s, p, u, c, a, l, f = [],
                    h = 4,
                    d = 4,
                    m = 3,
                    v = "",
                    w = [],
                    A = {
                        val: e(0),
                        position: n,
                        index: 1
                    };
                for (i = 0; 3 > i; i += 1) {
                    f[i] = i
                }
                for (p = 0, c = Math.pow(2, 2), a = 1; a != c;) {
                    u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1
                }
                switch (t = p) {
                    case 0:
                        for (p = 0, c = Math.pow(2, 8), a = 1; a != c;) {
                            u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1
                        }
                        l = r(p);
                        break;
                    case 1:
                        for (p = 0, c = Math.pow(2, 16), a = 1; a != c;) {
                            u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1
                        }
                        l = r(p);
                        break;
                    case 2:
                        return ""
                }
                for (f[3] = l, s = l, w.push(l);;) {
                    if (A.index > o) {
                        return ""
                    }
                    for (p = 0, c = Math.pow(2, m), a = 1; a != c;) {
                        u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1
                    }
                    switch (l = p) {
                        case 0:
                            for (p = 0, c = Math.pow(2, 8), a = 1; a != c;) {
                                u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1
                            }
                            f[d++] = r(p), l = d - 1, h--;
                            break;
                        case 1:
                            for (p = 0, c = Math.pow(2, 16), a = 1; a != c;) {
                                u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1
                            }
                            f[d++] = r(p), l = d - 1, h--;
                            break;
                        case 2:
                            return w.join("")
                    }
                    if (0 == h && (h = Math.pow(2, m), m++), f[l]) {
                        v = f[l]
                    } else {
                        if (l !== d) {
                            return null
                        }
                        v = s + s.charAt(0)
                    }
                    w.push(v), f[d++] = s + v.charAt(0), h--, s = v, 0 == h && (h = Math.pow(2, m), m++)
                }
            }
        };
    return i
}();
"function" == typeof define && define.amd ? define(function() {
    return LZString
}) : "undefined" != typeof module && null != module && (module.exports = LZString);
(function($) {
    (function($) {
        var result = ExecBeforeRender();
        if (result == true) {
            Main()
        }
    })(fs);
    var formValid = false;
    var hasGeneralError = false;
    var jqXHRData;
    var maxFileSize = 5000000;
    window.ffDialogPositionOption = {};
    window.ffErr_SignatureFullNameTyped = "Please enter your first and last name in the provided field.";
    window.ffErr_SignatureInitialsTyped = "Please enter your initials in the provided field.";
    window.ffErr_SignatureFullNameDrawn = "Please sign your first and last name in the provided field.";
    window.ffErr_SignatureInitialsDrawn = "Please sign your initials in the provided field.";
    window.ffErr_SignatureDateTyped = "Please select today's date in the provided field.";
    window.ffErr_SignatureDateDrawn = "Please sign today's date in the provided field.";
    window.ffErr_SignatureAcceptTerms = "You must accept the provided terms before continuing.";
    window.ffErr_SignatureValidEmail = "Please provide a valid email address.";
    window.ffErr_FormatValidDecimal = "Please enter a valid decimal value";
    window.ffErr_FormatValidNumber = "Please enter a valid numeric value";
    window.ffErr_FormatDecimalSize = "Value is too large";
    window.ffErr_FormatValidEmail = "Please enter a valid email address";
    window.ffErr_FormatValidPhone = "Please enter a valid phone number";
    window.ffErr_FormatValidUrl = "Please enter a valid URL";
    window.ffErr_FileUploadSize = "Maximum file size is 5 MB";
    window.ffErr_FileUploadType = "Only the following file types are allowed: ";
    window.ffErr_CaptchaIncorrect = "The text you have entered is incorrect. Please try again.";
    window.ff_AddAnotherSectionLink = "+ add item";
    window.ff_RemoveSectionLink = "- remove";
    window.ffPrompt_EnterSaveEmail = "Please provide your email address below. You will receive an email with a link to allow you to retrieve your saved form at a later date.";
    window.ffPrompt_SaveEmailConfirm = "Thank you! You will receive an email shortly with a link to your saved form.";
    window.ffPrompt_InvalidSavedForm = "The saved form you are attempting to retrieve is invalid or has already been submitted.";
    window.ffPrompt_SavedFormDiscarded = "Your saved form has been discarded.";
    window.ffPrompt_SFLChangesSaved = "Your changes have been saved! To retrieve your saved form at any time, simply click on the link provided to you by email.";
    window.ffPrompt_PaymentInProcessWarning = "Your payment is still being processed. Leaving the page now will cause your payment to not get processed. Are you sure you want to do this?";
    window.ffPaymentError_InvalidCountry = "Please provide a valid country name";
    window.FFSetValidationMessage = function FFSetValidationMessage(item, msg) {
        window[item] = msg
    };
    var setNA25Img = true;

    function ExecBeforeRender() {
        var result = true;
        try {
            if (typeof FF_OnBeforeRender === "function") {
                result = FF_OnBeforeRender()
            }
        } catch (error) {
            console.log(error)
        }
        return result
    }

    function ExecAfterRender() {
        try {
            if (typeof FF_OnAfterRender === "function") {
                FF_OnAfterRender()
            }
        } catch (error) {
            console.log(error)
        }
    }

    function ExecBeforeSave() {
        var result = true;
        try {
            if (typeof FF_OnBeforeSave === "function") {
                result = FF_OnBeforeSave()
            }
        } catch (error) {
            console.log(error)
        }
        return result
    }

    function ExecOnInitSave() {
        try {
            if (typeof FF_OnInitSave === "function") {
                FF_OnInitSave()
            }
        } catch (error) {
            console.log(error)
        }
    }

    function ExecAfterSave() {
        try {
            if (typeof FF_OnAfterSave === "function") {
                FF_OnAfterSave()
            }
        } catch (error) {
            console.log(error)
        }
    }
    window.InitializeIframe = function InitializeIframe(h_pad) {
        try {
            if (document.getElementsByTagName("body").length == 2 && document.getElementsByTagName("body")[1].children.length <= 1) {
                try {
                    document.getElementsByTagName("body")[1].remove()
                } catch (err) {
                    console.log("iFrame body 2:" + err)
                }
            }
            if (typeof parent.FFSetIframeSize != "undefined") {
                h_pad = typeof h_pad !== "undefined" ? h_pad : 0;
                var body = document.body,
                    html = document.documentElement;
                var h = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
                var w = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
                console.log("Height:" + h);
                parent.FFSetIframeSize(h + h_pad, w)
            }
        } catch (err) {
            console.log("Error unexpected! Method[InitializeIframe] Ex[Below]");
            console.log(err)
        }
    };

    function _UniqueArrayFromCSV(csvStr) {
        var result = [];
        if (csvStr != "undefined") {
            var list = [];
            list = csvStr.split(",");
            $.each(list, function(i, e) {
                if ($.inArray(e, result) == -1) {
                    result.push(e)
                }
            })
        }
        return result
    }

    function BindPaymentRulesEvents() {
        var paymentRulesMap = $("#paymentRulesMap").val();
        if (paymentRulesMap !== undefined) {
            try {
                var jsonObjectArr = JSON.parse(paymentRulesMap);
                $.each(jsonObjectArr, function(index, paymentFieldItem) {
                    $.each(paymentFieldItem.Rules, function(ruleIndex, ruleItem) {
                        switch (ruleItem.MethodName) {
                            case "UpdatePaymentAmount":
                                var fieldId = ruleItem.FieldIds[0].replace(/\./g, "\\.");
                                UpdatePaymentAmountCall($("#" + fieldId).val(), ruleItem.MethodParameters[1], ruleItem.AmountType);
                                break;
                            case "EvaluatePaymentAmount":
                                EvaluatePaymentAmount(ruleItem.MethodParameters[0], ruleItem.MethodParameters[1], ruleItem.MethodParameters[2]);
                                break
                        }
                        $.each(ruleItem.FieldIds, function(findex, field) {
                            var fieldId = field.replace(/\./g, "\\.");
                            if ($("#" + fieldId) !== undefined) {
                                $("#" + fieldId).bind("change", function(indx, elem) {
                                    console.log("On Payment rule element change");
                                    switch (ruleItem.MethodName) {
                                        case "UpdatePaymentAmount":
                                            UpdatePaymentAmountCall(this.value, ruleItem.MethodParameters[1], ruleItem.AmountType);
                                            break;
                                        case "EvaluatePaymentAmount":
                                            EvaluatePaymentAmount(ruleItem.MethodParameters[0], ruleItem.MethodParameters[1], ruleItem.MethodParameters[2]);
                                            break
                                    }
                                })
                            }
                        })
                    })
                })
            } catch (err) {
                console.log("Payment Rule binding error:" + err)
            }
        }
    }

    function BindRuleEvents() {
        var ruleMap = $("#ruleFieldsMap").val();
        var submitRulesArr = [];
        if (ruleMap !== undefined && ruleMap != "") {
            if ($("#ruleFieldsMap").val() != "") {
                try {
                    var jsonObject = JSON.parse($("#ruleFieldsMap").val());
                    for (var property in jsonObject) {
                        var fieldId = property;
                        var ruleNumbersArr = [];
                        var ruleBindingInfoArr = _UniqueArrayFromCSV(jsonObject[property]);
                        $.each(ruleBindingInfoArr, function(indx, item) {
                            var ruleNumberInfo = item;
                            if (item !== undefined && item.indexOf("||") > 0) {
                                var ruleInfoObj = item.split("||");
                                if (_SafeBoolean(ruleInfoObj[1], false)) {
                                    submitRulesArr.push(parseInt(ruleInfoObj[0], 10));
                                    console.log("[EvaluateOnSubmitRule]:" + ruleInfoObj[0])
                                } else {
                                    ruleNumbersArr.push(parseInt(ruleInfoObj[0], 10));
                                    console.log("[EvaluateInline]:" + ruleInfoObj[0])
                                }
                            }
                        });
                        console.log(property + ": " + jsonObject[property]);
                        fieldId = GetInitialFieldIdIfRepeated(fieldId, fieldId.replace(/\./g, "\\."));
                        if (ruleNumbersArr.length > 0) {
                            var ruleArrStr = $("#" + fieldId).attr("data-rules");
                            if (ruleArrStr !== undefined && ruleArrStr !== "") {
                                ruleArrStr += "," + ruleNumbersArr.toString();
                                $("#" + fieldId).attr("data-rules", _UniqueArrayFromCSV(ruleArrStr).toString())
                            } else {
                                $("#" + fieldId).attr("data-rules", ruleNumbersArr.toString())
                            }
                        }
                    }
                    $("[data-rules]").bind("change", function() {
                        var rules = $(this).attr("data-rules");
                        console.log("INFO:onchange triggered." + rules);
                        var ruleArr = rules.split(",").map(function(item) {
                            return parseInt(item, 10)
                        });
                        console.log("[EvaluateInlineARR]:" + ruleArr);
                        evaluateRules(ruleArr, this)
                    });
                    if (submitRulesArr != null && submitRulesArr.length > 0) {
                        $("#submitRules").val(submitRulesArr.toString())
                    }
                } catch (err) {
                    console.log("ERROR:[BindRuleEvents]-" + err)
                }
            }
        }
    }

    function GetInitialFieldIdIfRepeated(fieldId, escapedFieldId) {
        if (fieldId != "undefined" && fieldId != "" && $("#dvFastForms").find("#" + escapedFieldId).length == 0 && fieldId.split(".").length == 4) {
            var fieldIdasArr = fieldId.split(".");
            if (fieldIdasArr.length === 4) {
                var tempId = fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_1_." + fieldIdasArr[3];
                tempId = tempId.replace(/\./g, "\\.");
                if ($("#dvFastForms").find("#" + tempId).length == 1 && $("#dvFastForms").find("#" + tempId).parents(".ff-item-row").parent().hasClass("ff-sec-repeat-wrapper")) {
                    fieldId = fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_1_." + fieldIdasArr[3]
                }
            }
        }
        return fieldId.replace(/\./g, "\\.")
    }

    function isFieldIdRepeatable(fieldId) {
        if (fieldId != "undefined" && fieldId != "" && $("#dvFastForms").find("#" + fieldId.replace(/\./g, "\\.")).length == 0) {
            if (fieldId.split(".").length == 4) {
                var fieldIdasArr = fieldId.split(".");
                var tempId = fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_1_." + fieldIdasArr[3];
                tempId = tempId.replace(/\./g, "\\.");
                if ($("#dvFastForms").find("#" + tempId).length == 1 && $("#dvFastForms").find("#" + tempId).parents(".ff-item-row").parent().hasClass("ff-sec-repeat-wrapper")) {
                    return true
                }
            } else {
                if (fieldId.indexOf(".") < 0) {
                    return $("#dvFastForms").find("#" + fieldId + "__1").length == 1
                }
            }
        }
        return false
    }

    function CompareIfRepeatedFieldFromSameSection(fieldId1, fieldId2) {
        if (!isNullOrEmpty(fieldId1) && !isNullOrEmpty(fieldId2) && fieldId1.substring(0, fieldId1.lastIndexOf(".")) && fieldId2.substring(0, fieldId2.lastIndexOf("."))) {
            return true
        }
        return false
    }

    function repeatSafeFieldIdArr(fieldId, triggerSource) {
        var fieldIdArr = [];
        var escapedId = "";
        if (!isNullOrEmpty(fieldId)) {
            escapedId = fieldId.replace(/\./g, "\\.")
        }
        if (triggerSource !== undefined) {
            var parentRepeatedSectionElem = $(triggerSource).parents(".ff-sec-repeat-wrapper");
            if (parentRepeatedSectionElem.length > 0) {
                var repeatIndex = 0;
                if (isFieldIdRepeatable(fieldId)) {
                    repeatIndex = $(parentRepeatedSectionElem).parent().find(".ff-sec-repeat-wrapper").index(parentRepeatedSectionElem) + 1;
                    fieldId = getRepeatedFieldId(fieldId, repeatIndex);
                    fieldIdArr.push(fieldId)
                } else {
                    fieldIdArr.push(fieldId)
                }
            } else {
                if ($("#dvFastForms #" + escapedId).length == 0 || fieldId.indexOf(".") < 0) {
                    var fieldArr = [];
                    if (fieldId.split(".").length == 4) {
                        var fieldIdasArr = fieldId.split(".");
                        escapedId = fieldIdasArr[0] + "\\." + fieldIdasArr[1] + "\\." + fieldIdasArr[2] + "_";
                        $("#dvFastForms .ff-item-row input[id^=" + escapedId + "],#dvFastForms .ff-item-row select[id^=" + escapedId + "],#dvFastForms .ff-item-row textarea[id^=" + escapedId + "]").filter(function() {
                            return new RegExp(fieldIdasArr[3] + "$").test(this.id)
                        }).each(function() {
                            fieldArr.push($(this).attr("id"))
                        })
                    } else {
                        $("#dvFastForms .ff-esignature-wrapper div[id^=elem" + fieldId + "],#dvFastForms .ff-item-row label[id^=" + fieldId + "],#dvFastForms .ff-item-row .ff-col-2 [id^=" + fieldId + "]").each(function() {
                            var elemId = $(this).attr("id").replace("elem", "").replace("lbl", "");
                            fieldArr.push(elemId)
                        })
                    }
                    if (fieldArr instanceof Array && fieldArr.length > 0) {
                        fieldIdArr = fieldArr
                    }
                } else {
                    if ($("#dvFastForms #" + escapedId).length == 1) {
                        fieldIdArr.push(fieldId)
                    }
                }
            }
        } else {
            if ($("#dvFastForms #" + escapedId).length > 0) {
                fieldIdArr.push(fieldId)
            } else {
                var tempId = getRepeatedFieldId(fieldId, 1);
                if ($("#dvFastForms #" + tempId.replace(/\./g, "\\.")).length == 1) {
                    fieldIdArr = repeatSafeFieldIdArr(fieldId, $("#dvFastForms #" + tempId.replace(/\./g, "\\.")))
                }
            }
        }
        return fieldIdArr
    }

    function getRepeatedFieldId(fieldId, repeatIndex) {
        if (fieldId != "undefined" && fieldId != "" && repeatIndex > 0) {
            if (fieldId.split(".").length == 4) {
                var fieldIdasArr = fieldId.split(".");
                var tempId = fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_" + repeatIndex + "_." + fieldIdasArr[3];
                tempId = tempId.replace(/\./g, "\\.");
                if ($("#dvFastForms").find("#" + tempId).length == 1) {
                    return fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_" + repeatIndex + "_." + fieldIdasArr[3]
                }
            } else {
                if (fieldId.indexOf(".") < 0) {
                    return fieldId + "__" + repeatIndex
                }
            }
        }
        return fieldId
    }

    function getRepeatedFieldElem(fieldId, repeatIndex) {
        if (fieldId != "undefined" && fieldId != "" && fieldId.split(".").length == 4 && repeatIndex > 0) {
            var fieldIdasArr = fieldId.split(".");
            var tempId = fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_" + repeatIndex + "_." + fieldIdasArr[3];
            tempId = tempId.replace(/\./g, "\\.");
            if ($("#dvFastForms").find("#" + tempId).length == 1) {
                fieldId = fieldIdasArr[0] + "." + fieldIdasArr[1] + "." + fieldIdasArr[2] + "_" + repeatIndex + "_." + fieldIdasArr[3]
            }
        }
        fieldId = fieldId.replace(/\./g, "\\.");
        return $("#dvFastForms").find("#" + fieldId)
    }
    window.FFEvaluateRules = function FFEvaluateRules() {
        if (typeof parent.evaluateRules != "undefined") {
            $("#dvFastForms .ff-item-row input[data-rules],#dvFastForms .ff-item-row select[data-rules],#dvFastForms .ff-item-row textarea[data-rules]").each(function(indx, elem) {
                var rules = $(elem).attr("data-rules");
                var ruleArr = rules.split(",").map(function(item) {
                    return parseInt(item, 10)
                });
                parent.evaluateRules(ruleArr, elem)
            })
        }
    };
    window.FFCompare = function FFCompare(fieldId1, fieldId2, isFieldId, operator, triggerSource) {
        if (triggerSource !== undefined) {
            var repeatIndex = 0;
            var parentRepeatedSectionElem = $(triggerSource).parents(".ff-sec-repeat-wrapper");
            if (parentRepeatedSectionElem !== undefined) {
                if (isFieldIdRepeatable(fieldId1)) {
                    repeatIndex = $(parentRepeatedSectionElem).parent().find(".ff-sec-repeat-wrapper").index(parentRepeatedSectionElem) + 1;
                    fieldId1 = getRepeatedFieldId(fieldId1, repeatIndex)
                }
                if (isFieldId && CompareIfRepeatedFieldFromSameSection(fieldId1, fieldId2) && isFieldIdRepeatable(fieldId2)) {
                    fieldId2 = getRepeatedFieldId(fieldId2, repeatIndex)
                }
                return localFFCompare(fieldId1, fieldId2, isFieldId, operator)
            } else {
                return localFFCompare(fieldId1, fieldId2, isFieldId, operator)
            }
        } else {
            return localFFCompare(fieldId1, fieldId2, isFieldId, operator)
        }
        return false
    };
    window.FFEqualTo = function FFEqualTo(fieldId1, fieldId2, isFieldId, triggerSource) {
        return FFCompare(fieldId1, fieldId2, isFieldId, "E", triggerSource)
    };
    window.FFLessThan = function FFLessThan(fieldId1, fieldId2, isFieldId, triggerSource) {
        return FFCompare(fieldId1, fieldId2, isFieldId, "LT", triggerSource)
    };
    window.FFLessThanOrEqualTo = function FFLessThanOrEqualTo(fieldId1, fieldId2, isFieldId, triggerSource) {
        return FFCompare(fieldId1, fieldId2, isFieldId, "LTE", triggerSource)
    };
    window.FFGreaterThan = function FFGreaterThan(fieldId1, fieldId2, isFieldId, triggerSource) {
        return FFCompare(fieldId1, fieldId2, isFieldId, "GT", triggerSource)
    };
    window.FFGreaterThanOrEqualTo = function FFGreaterThanOrEqualTo(fieldId1, fieldId2, isFieldId, triggerSource) {
        return FFCompare(fieldId1, fieldId2, isFieldId, "GTE", triggerSource)
    };
    window.FFStartsWith = function FFStartsWith(field1, field2, isFieldId, triggerSource) {
        if (triggerSource !== undefined) {
            var repeatIndex = 0;
            var parentRepeatedSectionElem = $(triggerSource).parents(".ff-sec-repeat-wrapper");
            if (parentRepeatedSectionElem !== undefined) {
                if (isFieldIdRepeatable(field1)) {
                    repeatIndex = $(parentRepeatedSectionElem).parent().find(".ff-sec-repeat-wrapper").index(parentRepeatedSectionElem) + 1;
                    field1 = getRepeatedFieldId(field1, repeatIndex)
                }
                if (isFieldId && CompareIfRepeatedFieldFromSameSection(field1, field2) && isFieldIdRepeatable(field2)) {
                    field2 = getRepeatedFieldId(field2, repeatIndex)
                }
                return localFFStartsWith(field1, field2, isFieldId)
            } else {
                return localFFStartsWith(field1, field2, isFieldId)
            }
        } else {
            return localFFStartsWith(field1, field2, isFieldId)
        }
        return false
    };
    window.FFEndsWith = function FFEndsWith(field1, field2, isFieldId, triggerSource) {
        if (triggerSource !== undefined) {
            var repeatIndex = 0;
            var parentRepeatedSectionElem = $(triggerSource).parents(".ff-sec-repeat-wrapper");
            if (parentRepeatedSectionElem !== undefined) {
                if (isFieldIdRepeatable(field1)) {
                    repeatIndex = $(parentRepeatedSectionElem).parent().find(".ff-sec-repeat-wrapper").index(parentRepeatedSectionElem) + 1;
                    field1 = getRepeatedFieldId(field1, repeatIndex)
                }
                if (isFieldId && CompareIfRepeatedFieldFromSameSection(field1, field2) && isFieldIdRepeatable(field2)) {
                    field2 = getRepeatedFieldId(field2, repeatIndex)
                }
                return localFFEndsWith(field1, field2, isFieldId)
            } else {
                return localFFEndsWith(field1, field2, isFieldId)
            }
        } else {
            return localFFEndsWith(field1, field2, isFieldId)
        }
        return false
    };
    window.FFContains = function FFContains(field1, field2, isFieldId, triggerSource) {
        if (triggerSource !== undefined) {
            var repeatIndex = 0;
            var parentRepeatedSectionElem = $(triggerSource).parents(".ff-sec-repeat-wrapper");
            if (parentRepeatedSectionElem !== undefined) {
                if (isFieldIdRepeatable(field1)) {
                    repeatIndex = $(parentRepeatedSectionElem).parent().find(".ff-sec-repeat-wrapper").index(parentRepeatedSectionElem) + 1;
                    field1 = getRepeatedFieldId(field1, repeatIndex)
                }
                if (isFieldId && CompareIfRepeatedFieldFromSameSection(field1, field2) && isFieldIdRepeatable(field2)) {
                    field2 = getRepeatedFieldId(field2, repeatIndex)
                }
                return localFFContains(field1, field2, isFieldId)
            } else {
                return localFFContains(field1, field2, isFieldId)
            }
        } else {
            return localFFContains(field1, field2, isFieldId)
        }
        return false
    };

    function localFFSetPicklistValues(fieldId, str, isFieldId) {
        ResetValidation([fieldId]);
        var elem1 = $("#dvFastForms #" + fieldId.replace(/\./g, "\\."));
        var selectedVals = [];
        $(elem1).find(":selected").each(function() {
            selectedVals.push($(this).val())
        });
        if (selectedVals.length > 0) {
            $(elem1).empty().append("<option value></option>")
        } else {
            $(elem1).empty().append('<option selected="selected" value></option>')
        }
        $.each(str.split("|||"), function(i, e) {
            $(elem1).append('<option value="' + e + '">' + e + "</option>")
        });
        for (i = 0; i < selectedVals.length; i++) {
            $(elem1).find('option[value="' + selectedVals[i] + '"]').attr("selected", "selected")
        }
        initFlexControl(elem1, false)
    }

    function localFFMakeReadOnly(fieldId) {
        ResetValidation([fieldId]);
        if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "PICKLIST" || $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "MULTIPICKLIST") {
            $("#dvFastForms #" + fieldId.replace(/\./g, "\\.") + " option:not(:selected)").hide();
            $("#dvFastForms #" + fieldId.replace(/\./g, "\\.") + " option:selected").attr("disabled", "disabled")
        } else {
            if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "REFERENCE") {
                $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).prop("readonly", true);
                $("#dvFastForms #alink" + fieldId.replace(/\./g, "\\.")).unbind("click")
            } else {
                if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "BOOLEAN") {
                    var onclick = $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("onclick");
                    if (onclick != undefined) {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("onclick", "return false;" + onclick)
                    } else {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("onclick", "return false;")
                    }
                } else {
                    if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "DATE" || $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "DATETIME") {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).datetimepicker("disable")
                    } else {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).prop("readonly", true)
                    }
                }
            }
        }
        initFlexControl($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")), true)
    }

    function localFFMakeEditable(fieldId) {
        ResetValidation([fieldId]);
        if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "PICKLIST" || $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "MULTIPICKLIST") {
            $("#dvFastForms #" + fieldId.replace(/\./g, "\\.") + " option:not(:selected)").show();
            $("#dvFastForms #" + fieldId.replace(/\./g, "\\.") + " option:selected").removeAttr("disabled")
        } else {
            if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "REFERENCE") {
                $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).prop("readonly", false);
                ResetLookupFieldEvent($("#dvFastForms #alink" + fieldId.replace(/\./g, "\\.")))
            } else {
                if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "BOOLEAN") {
                    var onclick = $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("onclick");
                    if (onclick != undefined) {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("onclick", onclick.replace("return false;", ""))
                    } else {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("onclick", "")
                    }
                } else {
                    if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "DATE" || $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "DATETIME") {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).datetimepicker("enable")
                    } else {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).prop("readonly", false)
                    }
                }
            }
        }
        initFlexControl($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")), false)
    }

    function localFFMakeRequired(fieldId) {
        ResetValidation([fieldId]);
        if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).data("isrequired") != true) {
            if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "REFERENCE") {
                $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).data("isrequired", true)
            } else {
                $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).data("isrequired", true)
            }
            var lblElem = $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).parent().parent().find(".ff-label-col");
            $(lblElem).append('<span class="ff-required-mark">*</span>');
            initFlexControl($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")), false)
        }
    }

    function localFFMakeNotRequired(fieldId) {
        ResetValidation([fieldId]);
        if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).data("isrequired") != false) {
            if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "REFERENCE") {
                $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).data("isrequired", false)
            } else {
                $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).data("isrequired", false)
            }
            var reqMark = $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).parent().parent().find(".ff-required-mark");
            $(reqMark).remove();
            initFlexControl($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")), false)
        }
    }

    function localFFHideField(fieldId) {
        if ($("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).hasClass("ff-payment-wrapper")) {
            $("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).hide();
            ResetValidation(["lbl" + fieldId])
        } else {
            if ($("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).length && $("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).hasClass("ff-general-text-label")) {
                $("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).parent().hide();
                ResetValidation(["lbl" + fieldId])
            } else {
                if ($("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).length && $("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).parent().hasClass("ff-esignature-wrapper")) {
                    $("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).parent().hide();
                    clearSignatures($("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).parent());
                    ResetValidation(["elem" + fieldId])
                } else {
                    if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).hasClass("ff-fileupload-drop-area")) {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).parent().parent().hide();
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).find("a").click();
                        ResetValidation([fieldId])
                    } else {
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).parent().parent().hide();
                        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val("");
                        ResetValidation([fieldId]);
                        if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).data("lookup-value-type") == "list") {
                            $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).val("");
                            $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).attr("value", "")
                        }
                    }
                }
            }
        }
        InitializeIframe()
    }

    function localFFShowField(fieldId) {
        if ($("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).hasClass("ff-payment-wrapper")) {
            $("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).show();
            ResetValidation(["#dvFastForms #lbl" + fieldId])
        } else {
            if ($("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).length && $("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).hasClass("ff-general-text-label")) {
                $("#dvFastForms #lbl" + fieldId.replace(/\./g, "\\.")).parent().show();
                ResetValidation(["#dvFastForms #lbl" + fieldId])
            } else {
                if ($("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).length && $("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).parent().hasClass("ff-esignature-wrapper")) {
                    $("#dvFastForms #elem" + fieldId.replace(/\./g, "\\.")).parent().show()
                } else {
                    $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).parent().parent().show();
                    ResetValidation([fieldId])
                }
            }
        }
        InitializeIframe()
    }

    function localFFStartsWith(fieldId, str, isFieldId) {
        return ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val().indexOf(str) == 0)
    }

    function localFFEndsWith(fieldId, str, isFieldId) {
        var d = $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val().length - str.length;
        return (d >= 0 && $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val().lastIndexOf(str) === d)
    }

    function localFFContains(fieldId, str, isFieldId) {
        try {
            return ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val().indexOf(str) >= 0)
        } catch (err) {
            return false
        }
    }

    function localFFPopulateLookup(fieldId, str, name, isFieldId) {
        var valElem1 = $("#dvFastForms #" + fieldId.replace(/\./g, "\\."));
        var val = str;
        if (isFieldId == true) {
            val = $("#dvFastForms #" + str.replace(/\./g, "\\.")).val() + "";
            name = $("#dvFastForms #input" + str.replace(/\./g, "\\.")).val() + ""
        }
        $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val(val);
        $("#dvFastForms #input" + fieldId.replace(/\./g, "\\.")).val(name);
        initFlexControl(valElem1, false)
    }

    function localFFPopulate(fieldId, str, isFieldId) {
        ResetValidation([fieldId]);
        var elem1 = $("#dvFastForms #" + fieldId.replace(/\./g, "\\."));
        var val = str;
        if (isFieldId == true) {
            if ($("#dvFastForms #" + str.replace(/\./g, "\\.")).attr("data-vatt") == "BOOLEAN") {
                val = $("#dvFastForms #" + str.replace(/\./g, "\\.")).prop("checked") + ""
            } else {
                val = $("#dvFastForms #" + str.replace(/\./g, "\\.")).val() + ""
            }
        } else {
            val = EvaluateCustomFormula(str)
        }
        if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "BOOLEAN") {
            if (val == "true") {
                $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).prop("checked", val)
            } else {
                $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).removeProp("checked")
            }
        } else {
            if ($("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).attr("data-vatt") == "MULTIPICKLIST") {
                $("#dvFastForms #" + fieldId.replace(/\./g, "\\.") + " option:selected").removeAttr("selected");
                $.each(val.split(","), function(i, e) {
                    $("#dvFastForms #" + fieldId.replace(/\./g, "\\.") + " option[value='" + e + "']").prop("selected", true)
                })
            } else {
                val = val.replace("&#xA;", "\n");
                $("#dvFastForms #" + fieldId.replace(/\./g, "\\.")).val(val)
            }
        }
        initFlexControl(elem1, false)
    }

    function localFFCompare(fieldId1, fieldId2, isFieldId, operator) {
        var val1 = "";
        var val2 = "";
        var field1 = $("#dvFastForms #" + fieldId1.replace(/\./g, "\\."));
        if (isFieldId) {
            var field2 = $("#dvFastForms #" + fieldId2.replace(/\./g, "\\."));
            if ($(field1).attr("data-vatt") == "DATE" || $(field2).attr("data-vatt") == "DATE" || $(field1).attr("data-vatt") == "DATETIME" || $(field2).attr("data-vatt") == "DATETIME") {
                val1 = new Date($(field1).val());
                val2 = new Date($(field2).val())
            } else {
                if ($(field1).attr("data-vatt") == "BOOLEAN" && $(field2).attr("data-vatt") == "BOOLEAN") {
                    val1 = $(field1).is(":checked");
                    val2 = $(field2).is(":checked")
                } else {
                    if ($(field1).attr("data-vatt") == "BOOLEAN" && $(field2).attr("data-vatt") != "BOOLEAN") {
                        val1 = $(field1).is(":checked");
                        val2 = ($(field2).val() === "true")
                    } else {
                        val1 = $(field1).val();
                        val2 = $(field2).val()
                    }
                }
            }
        } else {
            if ($(field1).attr("data-vatt") == "DATE" || $(field1).attr("data-vatt") == "DATETIME") {
                val1 = new Date($(field1).val());
                val2 = new Date(fieldId2)
            } else {
                if ($(field1).attr("data-vatt") == "BOOLEAN") {
                    val1 = $(field1).is(":checked");
                    val2 = (fieldId2 === "true")
                } else {
                    val1 = ($(field1).val() == null ? "" : $(field1).val());
                    val2 = (fieldId2 == null ? "" : fieldId2)
                }
            }
        }
        if ($.isNumeric(val1)) {
            val1 = parseInt(val1)
        }
        if ($.isNumeric(val2)) {
            val2 = parseInt(val2)
        }
        switch (operator) {
            case "GT":
                return (val1 > val2);
                break;
            case "GTE":
                return (val1 >= val2);
                break;
            case "LT":
                return (val1 < val2);
                break;
            case "LTE":
                return (val1 <= val2);
                break;
            case "E":
                if ($(field1).attr("data-vatt") == "DATE" || $(field1).attr("data-vatt") == "DATETIME") {
                    return (val1.getTime() == val2.getTime())
                } else {
                    console.log("Comparing " + val1 + " and " + val2);
                    console.log("Result: " + (val1 == val2));
                    return (val1 == val2)
                }
                break
        }
    }
    window.FFHideField = function FFHideField(fieldId, triggerSource) {
        var fieldIdArr = repeatSafeFieldIdArr(fieldId, triggerSource);
        $.each(fieldIdArr, function(indx, id) {
            localFFHideField(id)
        })
    };
    window.FFShowField = function FFShowField(fieldId, triggerSource) {
        var fieldIdArr = repeatSafeFieldIdArr(fieldId, triggerSource);
        $.each(fieldIdArr, function(indx, id) {
            localFFShowField(id)
        })
    };
    window.FFMakeReadOnly = function FFMakeReadOnly(fieldId, triggerSource) {
        var fieldIdArr = repeatSafeFieldIdArr(fieldId, triggerSource);
        $.each(fieldIdArr, function(indx, id) {
            localFFMakeReadOnly(id)
        })
    };
    window.FFMakeEditable = function FFMakeEditable(fieldId, triggerSource) {
        var fieldIdArr = repeatSafeFieldIdArr(fieldId, triggerSource);
        $.each(fieldIdArr, function(indx, id) {
            localFFMakeEditable(id)
        })
    };
    window.FFMakeRequired = function FFMakeRequired(fieldId, triggerSource) {
        var fieldIdArr = repeatSafeFieldIdArr(fieldId, triggerSource);
        $.each(fieldIdArr, function(indx, id) {
            localFFMakeRequired(id)
        })
    };
    window.FFMakeNotRequired = function FFMakeNotRequired(fieldId, triggerSource) {
        var fieldIdArr = repeatSafeFieldIdArr(fieldId, triggerSource);
        $.each(fieldIdArr, function(indx, id) {
            localFFMakeNotRequired(id)
        })
    };
    window.FFHideSection = function FFHideSection(sectionId) {
        $("#dvFastForms #" + sectionId.replace(/\./g, "\\.")).hide();
        InitializeIframe()
    };
    window.FFShowSection = function FFShowSection(pageId) {
        $("#dvFastForms #" + pageId.replace(/\./g, "\\.")).show();
        InitializeIframe()
    };
    window.FFShowPage = function FFShowPage(pageId) {
        if (isNullOrEmpty($("#dvFastForms #txtUserContentId").val())) {
            $("#dvFastForms #" + pageId).attr("page-ishidden", false);
            $("#dvFastForms #" + pageId).attr("data-page-ishidden", false);
            $('#dvFastForms .ff-page-bread-item[data-pageid="' + pageId + '"]').show();
            $("#dvFastForms .ff-page-bread-header").remove();
            InitializeBreadcrumbs();
            SetPageButtons();
            SetBreadcrumbWidth(true)
        }
    };
    window.FFHidePage = function FFHidePage(pageId) {
        if (isNullOrEmpty($("#dvFastForms #txtUserContentId").val())) {
            $("#dvFastForms #" + pageId).attr("page-ishidden", true);
            $("#dvFastForms #" + pageId).attr("data-page-ishidden", true);
            $('#dvFastForms .ff-page-bread-item[data-pageid="' + pageId + '"]').hide();
            $("#dvFastForms .ff-page-bread-header").remove();
            InitializeBreadcrumbs();
            SetPageButtons();
            SetBreadcrumbWidth(true)
        }
    };
    window.EvaluateCustomFormula = function EvaluateCustomFormula(str) {
        var val = str;
        try {
            if (str.indexOf("[[") >= 0 && str.indexOf("]]") >= 0) {
                var arrItems = str.split("[[");
                for (var i = 0; i < arrItems.length; i++) {
                    if (arrItems[i].length > 0 && arrItems[i].indexOf("]]") > -1) {
                        var itm = arrItems[i].substring(0, arrItems[i].indexOf("]]"));
                        var re = new RegExp("\\[\\[" + itm + "\\]\\]", "g");
                        str = str.replace(re, $("#dvFastForms #" + itm.replace(/\./g, "\\.")).val())
                    }
                }
                val = str
            }
            if (str.indexOf("{{") >= 0 && str.indexOf("}}") >= 0) {
                var arrItems = str.split("{{");
                for (var i = 0; i < arrItems.length; i++) {
                    if (arrItems[i].length > 0 && arrItems[i].indexOf("}}") > -1) {
                        var itm = arrItems[i].substring(0, arrItems[i].indexOf("}}"));
                        var reStr = itm.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                        var re = new RegExp("{{" + reStr + "}}", "g");
                        str = str.replace(re, eval(itm))
                    }
                }
                val = str
            }
        } catch (e) {}
        return val
    };
    window.FFToday = function FFToday() {
        var dt = new Date();
        var year = dt.getFullYear();
        var month = (1 + dt.getMonth()).toString();
        month = month.length > 1 ? month : "0" + month;
        var day = dt.getDate().toString();
        day = day.length > 1 ? day : "0" + day;
        return month + "/" + day + "/" + year
    };
    window.TDAY = function TDAY() {
        return FFToday()
    };
    window.FFPopulate = function FFPopulate(field1, field2, isFieldId, triggerSource) {
        var field1Arr = repeatSafeFieldIdArr(field1, triggerSource);
        if (isFieldId) {
            var field2Arr = repeatSafeFieldIdArr(field2, triggerSource);
            if (field1Arr.length === field2Arr.length) {
                $.each(field1Arr, function(indx, item) {
                    localFFPopulate(field1Arr[indx], field2Arr[indx], isFieldId)
                })
            }
        } else {
            $.each(field1Arr, function(indx, item) {
                localFFPopulate(item, field2, isFieldId)
            })
        }
    };
    window.FFPopulateLookup = function FFPopulateLookup(field1, field2, name, isFieldId, triggerSource) {
        var field1Arr = repeatSafeFieldIdArr(field1, triggerSource);
        if (isFieldId) {
            var field2Arr = repeatSafeFieldIdArr(field2, triggerSource);
            if (field1Arr.length === field2Arr.length) {
                $.each(field1Arr, function(indx, item) {
                    localFFPopulateLookup(field1Arr[indx], field2Arr[indx], name, isFieldId)
                })
            }
        } else {
            $.each(field1Arr, function(indx, item) {
                localFFPopulateLookup(item, field2, name, isFieldId)
            })
        }
    };
    window.FFSetPicklistValues = function FFSetPicklistValues(field1, field2, isFieldId, triggerSource) {
        var field1Arr = repeatSafeFieldIdArr(field1, triggerSource);
        if (isFieldId) {
            var field2Arr = repeatSafeFieldIdArr(field2, triggerSource);
            if (field1Arr.length === field2Arr.length) {
                $.each(field1Arr, function(indx, item) {
                    localFFSetPicklistValues(field1Arr[indx], field2Arr[indx], isFieldId)
                })
            }
        } else {
            $.each(field1Arr, function(indx, item) {
                localFFSetPicklistValues(item, field2, isFieldId)
            })
        }
    };
    window.FFShowGeneralError = function FFShowGeneralError(msg) {
        ResetValidation();
        formValid = true;
        ValidateFields(true);
        hasGeneralError = true;
        ShowValidationMessage($("#dvFastForms #btnsubmit"), "GENERAL", msg);
        InitializeIframe()
    };
    window.FFIf = function FFIf(expr, valIfTrue, valIfFalse) {
        var evaluated = typeof eval === "undefined" ? expr : eval(expr);
        if (evaluated) {
            return valIfTrue
        } else {
            return valIfFalse
        }
    };

    function getAttributeNameIfExists(elemSource, attrName, defaultvalue) {
        var stringReturn = defaultvalue;
        if (!isNullOrEmpty($(elemSource).attr(attrName))) {
            stringReturn = $(elemSource).attr(attrName)
        }
        return stringReturn
    }
    window.InitializeSignature = function InitializeSignature() {
        $("#dvFastForms .ff-esignature-wrapper").each(function() {
            InitializeSignatureElement(this)
        });
        var i = 0;
        $('#dvFastForms input[name="ffdate"]').each(function() {
            $(this).attr("name", "ffdate" + i);
            i++
        });
        i = 0;
        $('#dvFastForms input[name="ffsignature"]').each(function() {
            $(this).attr("name", "ffsignature" + i);
            i++
        })
    };
    window.InitializeSignatureElement = function InitializeSignatureElement(signatureWrapElement) {
        var signType = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signtype", "full");
        var signOptions = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signoptions", "typed");
        var signLabel = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signlabel", "Full Name");
        var signDate = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signdate", "Date");
        var signDateHide = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signdatehide", "false");
        var signAgreeHide = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signagreehide", "true");
        var signAgree = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-signagree", "I agree to terms and services");
        var signEmailLabel = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-emaillabel", "Email");
        var signEmailEnabled = getAttributeNameIfExists($(signatureWrapElement).find(".ffd-esignature-input"), "data-emailenabled", "false");
        if (signEmailEnabled == true || signEmailEnabled == "true") {
            $(signatureWrapElement).find(".ff-email-verification > input").attr("data-isrequired", true);
            $(signatureWrapElement).find(".ff-email-verification").slideDown();
            $(signatureWrapElement).find(".ff-email-verification .ffsign-label").append('<span class="ff-required-mark">*</span>')
        } else {
            $(signatureWrapElement).find(".ff-email-verification").slideUp();
            $(signatureWrapElement).find(".ff-email-verification").hide();
            $(signatureWrapElement).find(".ff-email-verification > input").attr("data-isrequired", false)
        }
        var options = {
            name: ".ffsignature",
            penColour: "#000",
            drawOnly: false,
            lineWidth: 2,
            typed: ".typedSignName",
            output: ".outputSignedName",
            drawIt: ".ffdrawIt a",
            sig: "docsignWrapper",
            clear: ".ffclearButton a",
            canvas: ".signPadName",
            onBeforeValidate: "validateDocSign",
            errorMessage: (signType == "full" ? ffErr_SignatureFullNameTyped : ffErr_SignatureInitialsTyped),
            errorMessageDraw: (signType == "full" ? ffErr_SignatureFullNameDrawn : ffErr_SignatureInitialsDrawn),
            errorClass: "ff-col-1 ff-error ff-signature-error ff-invalid-msg",
            validateFields: false
        };
        var optionsDate = {
            name: ".ffdate",
            penColour: "#000",
            drawOnly: false,
            lineWidth: 2,
            typed: ".typedSignDate",
            output: ".outputSignedDate",
            drawIt: ".ffdrawIt a",
            sig: "docsignWrapper",
            clear: ".ffclearButton a",
            canvas: ".signPadDate",
            onBeforeValidate: "validateDocSign",
            errorMessage: ffErr_SignatureDateTyped,
            errorMessageDraw: ffErr_SignatureDateDrawn,
            errorClass: "ff-col-1 ff-error ff-signature-error ff-invalid-msg",
            validateFields: false
        };
        if (signType == "initials") {
            $(signatureWrapElement).find(".ff-signwrapper.ff-typed .doc-sign-name .ffsignature").attr("maxlength", 6);
            $(signatureWrapElement).find(".ff-signwrapper.ff-typed .doc-sign-name .docsignWrapper .signPadName").attr("width", "120");
            $(signatureWrapElement).find(".ff-signwrapper.ff-drawn .doc-sign-name .docsignWrapper .signPadName").attr("width", "120")
        } else {
            $(signatureWrapElement).find(".ff-signwrapper.ff-typed .doc-sign-name .ffsignature").removeAttr("maxlength");
            $(signatureWrapElement).find(".ff-signwrapper.ff-typed .doc-sign-name .docsignWrapper .signPadName").attr("width", "232");
            $(signatureWrapElement).find(".ff-signwrapper.ff-drawn .doc-sign-name .docsignWrapper .signPadName").attr("width", "232")
        }
        var signInstance = $(signatureWrapElement).find(".ff-signwrapper.ff-typed .doc-sign-name").signaturePad(options);
        var signInstanceDate = $(signatureWrapElement).find(".ff-signwrapper.ff-typed .doc-sign-date").signaturePad(optionsDate);
        options.drawOnly = true;
        var signInstance = $(signatureWrapElement).find(".ff-signwrapper.ff-drawn .doc-sign-name").signaturePad(options);
        optionsDate.drawOnly = true;
        var signInstanceDate = $(signatureWrapElement).find(".ff-signwrapper.ff-drawn .doc-sign-date").signaturePad(optionsDate);
        $(signatureWrapElement).find(".ff-chkagree > label").html(signAgree);
        $(signatureWrapElement).find(".ff-signwrapper").each(function(ind, signElement) {
            $(signElement).find(".doc-sign-name .ffsign-label>label").html(signLabel);
            $(signElement).find(".doc-sign-date .ffsign-label>label").html(signDate);
            if (signDateHide == true || signDateHide == "true") {
                $(signElement).find('.doc-sign-date input[type="hidden"]').attr("data-required", false);
                $(signElement).find(".doc-sign-date").hide()
            } else {
                $(signElement).find('.doc-sign-date input[type="hidden"]').attr("data-required", true);
                $(signElement).find(".doc-sign-date").show()
            }
        });
        $(signatureWrapElement).find(".main-docsign-wrapper").removeClass("ffs-typed");
        $(signatureWrapElement).find(".main-docsign-wrapper").removeClass("ffs-both");
        $(signatureWrapElement).find(".main-docsign-wrapper").removeClass("ffs-drawn");
        $(signatureWrapElement).find(".main-docsign-wrapper").addClass("ffs-" + signOptions);
        $(signatureWrapElement).find(".main-docsign-wrapper").removeClass("ffs-full");
        $(signatureWrapElement).find(".main-docsign-wrapper").removeClass("ffs-initials");
        $(signatureWrapElement).find(".main-docsign-wrapper").addClass("ffs-" + signType);
        if (signOptions == "drawn") {
            switchSignTab($(signatureWrapElement).find(".main-docsign-wrapper").find("li.ffdrawIt>a"))
        } else {
            switchSignTab($(signatureWrapElement).find(".main-docsign-wrapper").find("li.fftypeIt>a"))
        }
        if (signAgreeHide == true || signAgreeHide == "true") {
            $(signatureWrapElement).find(".ff-chkagree > input").attr("data-required", false);
            $(signatureWrapElement).find(".ff-chkagree").hide()
        } else {
            $(signatureWrapElement).find(".ff-chkagree").show();
            $(signatureWrapElement).find(".ff-chkagree > input").attr("data-required", true)
        }
        $(signatureWrapElement).find(".main-docsign-wrapper").find("li>a").each(function(indx, aElem) {
            $(aElem).removeAttr("onclick");
            $(aElem).bind("click", function() {
                switchSignTab(this)
            })
        });
        var clearAElem = $(signatureWrapElement).find(".main-docsign-wrapper").find(".ffclearButton>a");
        $(clearAElem).removeAttr("onclick");
        $(clearAElem).bind("click", function() {
            clearSignatures($(this).parents(".main-docsign-wrapper"))
        });
        ReRenderCalendar($(signatureWrapElement).find(".main-docsign-wrapper .ffdate"))
    };

    function isNullOrEmpty(strvalue) {
        if (strvalue !== undefined && strvalue !== null && strvalue != "") {
            return false
        }
        return true
    }
    window.clearSignatures = function clearSignatures(elem) {
        var target = $("#dvFastForms .ff-esignature-wrapper");
        if (arguments.length > 0) {
            target = $(elem)
        }
        $(target).each(function() {
            $(this).find(".ff-signwrapper.ff-drawn .doc-sign-name").signaturePad().clearCanvas();
            $(this).find(".ff-signwrapper.ff-drawn .doc-sign-date").signaturePad().clearCanvas();
            $(this).find(".docsignWrapper .typedSignName").html("");
            $(this).find(".docsignWrapper .typedSignDate").html("");
            $(this).find(".docsignWrapper .ffsignature").val("");
            $(this).find(".docsignWrapper .ffdate").val("")
        })
    };
    window.clearDrawnElements = function clearDrawnElements(elemSource) {
        $(elemSource).parents(".main-docsign-wrapper").find(".ff-signwrapper.ff-drawn .doc-sign-name").signaturePad().clearCanvas();
        $(elemSource).parents(".main-docsign-wrapper").find(".ff-signwrapper.ff-drawn .doc-sign-date").signaturePad().clearCanvas()
    };
    window.switchSignTab = function switchSignTab(elemSource) {
        $(elemSource).parents(".main-docsign-wrapper").find(".ff-sign-ul li a").removeClass("current");
        $(elemSource).addClass("current");
        $(elemSource).parents(".main-docsign-wrapper").find(".ff-signwrapper").addClass("display-none");
        if ($(elemSource).attr("data-signed") == "drawn") {
            LogEvent("TOGGLED_SIGNATURE_TAB", "DRAWN");
            $(elemSource).parents(".main-docsign-wrapper").find(".ff-signwrapper.ff-drawn").removeClass("display-none");
            $(elemSource).parents(".main-docsign-wrapper").find(".ff-sign-div .ffclearButton").css("visibility", "visible")
        } else {
            LogEvent("TOGGLED_SIGNATURE_TAB", "TYPED");
            $(elemSource).parents(".main-docsign-wrapper").find(".ff-signwrapper.ff-typed").removeClass("display-none");
            $(elemSource).parents(".main-docsign-wrapper").find(".ff-sign-div .ffclearButton").css("visibility", "hidden")
        }
    };

    function ValidateForm() {
        if (isOlderBrowser()) {
            if ($("#dvFastForms .ff-captcha").length > 0) {
                $("#ffOverlay").addClass("ff-overlay-image");
                $("#dvFastForms form#form1").attr("action", FormBASEURL + "EngineFrame/CheckCaptcha");
                $("#dvFastForms form#form1").trigger("submit")
            } else {
                ResetValidation();
                ValidateFields(true);
                if ($("#dvFastForms .ff-payment-wrapper").length > 0 && $("#dvFastForms .ff-creditcard").filter(function() {
                        return this.value.length > 0
                    }).length > 0) {
                    $("#dvFastForms form#form1").attr("action", FormBASEURL + "EngineFrame/CheckPayment");
                    $("#dvFastForms form#form1").trigger("submit")
                } else {
                    if (formValid) {
                        $("#ffOverlay").removeClass("ff-overlay-image");
                        ResetSaveDraft();
                        PostFormData()
                    }
                }
            }
        } else {
            ResetValidation();
            ValidateFields(true);
            if (formValid) {
                SendCaptchaToServer()
            }
        }
    }
    window.ScrollToTop = function ScrollToTop() {
        var top = $("#dvFastForms .ff-form-main");
        $("body, html").animate({
            scrollTop: $(top).offset().top
        }, 700)
    };
    window.ScrollToFirstError = function ScrollToFirstError() {
        var firstErrElem = $("#dvFastForms .ff-input-type-invalid").eq(0);
        if ($("#dvFastForms #multipageEnabled").val().toLowerCase() == "true") {
            var allVisiblePages = allFormPagesWithLegacyCheck(null, true, false);
            var currPageNum = $(allVisiblePages).index($(allVisiblePages).filter(":visible:first"));
            var errorPageNum = $(allVisiblePages).index($(firstErrElem).closest(".ff-page-row"));
            if (currPageNum != errorPageNum) {
                FFSetPage(errorPageNum, true)
            }
        }
        $("body, html").animate({
            scrollTop: $(firstErrElem).offset().top
        }, 700);
        $(firstErrElem).focus();
        $("#dvFastForms #btnsubmit").prop("disabled", false)
    };

    function ValidateFields(isSubmit) {
        ValidateFields_CheckingAutoPaymentFields();
        if ($("#dvFastForms #pageValType").val() == "page" && !isSubmit) {
            var fieldsToCheck = $("#dvFastForms .ff-page-row:visible:first").find("input, textarea, select");
            var uploadsToCheck = $("#dvFastForms .ff-page-row:visible:first").find(".ff-fileupload-drop-area:visible")
        } else {
            var fieldsToCheck = $("#dvFastForms input,#dvFastForms textarea,#dvFastForms select");
            var uploadsToCheck = $("#dvFastForms .ff-fileupload-drop-area")
        }
        $(fieldsToCheck).each(function() {
            var fieldType = $(this).attr("data-vatt");
            if (typeof fieldType != "undefined") {
                fieldType.split("(")[0].toUpperCase()
            }
            if ($(this).data("isrequired") == true && $(this).parent().parent().css("display") == "none") {
                VALog("[ValidateFields][" + $(this).attr("id") + "][Ignoring Validation because the field is hidden.]");
                return true
            }
            switch ($(this).prop("type")) {
                case "text":
                case "textarea":
                    if ($(this).data("isrequired") == true && (fieldType == "REFERENCE")) {
                        var refFieldId = $(this).attr("id").replace("input", "").replace(/\./g, "\\.");
                        if ($("#" + refFieldId).val() == "") {
                            formValid = false;
                            ShowValidationMessage(this, "REQUIRED")
                        }
                    } else {
                        if ($(this).data("isrequired") == true && ($(this).val() == "")) {
                            formValid = false;
                            ShowValidationMessage(this, "REQUIRED")
                        } else {
                            if ($(this).val().length > $(this).data("maxlength") && fieldType != "DATE" && fieldType != "DATETIME") {
                                formValid = false;
                                ShowValidationMessage(this, "LENGTH");
                                IsValidFormat(this)
                            } else {
                                if (($(this).val() != "") && !IsValidFormat(this)) {
                                    formValid = false
                                }
                            }
                        }
                    }
                    break;
                case "select-one":
                    if ($(this).data("isrequired") == true) {
                        if ($(this).find(":selected").val() == "" || $(this).find(":selected").val() == null || !$(this).find(":selected").val()) {
                            formValid = false;
                            if ($(this).data("pp-name") == "FFExpiryMM" || $(this).data("pp-name") == "FFExpiryYYYY") {
                                ShowValidationMessage($(this), "PAYMENTEXPIRYREQUIRED")
                            } else {
                                ShowValidationMessage(this, "REQUIRED")
                            }
                        }
                    }
                    break;
                case "select-multiple":
                    if ($(this).data("isrequired") == true) {
                        var selectedValues = "";
                        $(this).find(":selected").each(function() {
                            if ($(this).val() != "") {
                                selectedValues += ";" + $(this).val()
                            }
                        });
                        if (selectedValues.length == 0) {
                            formValid = false;
                            ShowValidationMessage(this, "REQUIRED")
                        }
                    }
                    break;
                case "checkbox":
                    if ($(this).data("isrequired") == true && (!$(this).is(":checked"))) {
                        formValid = false;
                        ShowValidationMessage(this, "REQUIRED")
                    }
                case "radio":
                case "hidden":
                case "submit":
                case "button":
                case "reset":
                default:
                    break
            }
        });
        $(uploadsToCheck).each(function() {
            var numUploads = $(this).find("[id$='_Label']").length;
            if ($(this).data("isrequired") && $(this).parent().parent().css("display") == "none") {
                return true
            } else {
                if ($(this).data("isrequired") && numUploads == 0) {
                    formValid = false;
                    ShowValidationMessage(this, "REQUIRED")
                }
            }
        });
        var signaturesValid = ValidateSignatures();
        if (formValid && !signaturesValid) {
            formValid = false
        }
        if (!formValid) {
            ScrollToFirstError()
        }
        $("#txtSendSizeChange").click();
        InitializeIframe()
    }

    function ValidateFields_CheckingAutoPaymentFields() {
        $("div[id*='lblFFPAYMENT']").each(function() {
            try {
                var vSetRequire = false;
                if ($(this).find(".ff-creditcard").val() !== "" && $(this).find(".ff-creditcard").val() != null) {
                    vSetRequire = true
                } else {
                    if ($(this).find(".ff-cvv").val() !== "" && $(this).find(".ff-cvv").val() != null) {
                        vSetRequire = true
                    } else {
                        if ($(this).find(".ff-mm").val() !== "" && $(this).find(".ff-mm").val() != null) {
                            vSetRequire = true
                        } else {
                            if ($(this).find(".ff-yyyy").val() !== "" && $(this).find(".ff-yyyy").val() != null) {
                                vSetRequire = true
                            }
                        }
                    }
                }
                if (vSetRequire == false && $(this).find(".ff-creditcard").attr("data-isrequired") == "true" && $(this).find(".ff-creditcard").attr("data-automatic-required") != "true") {
                    vSetRequire = true
                }
                if (vSetRequire) {
                    if ($(this).find(".ff-creditcard").attr("data-isrequired") == "false") {
                        $(this).find(".ff-creditcard").attr("data-automatic-required", "true")
                    }
                    $(this).find(".ff-creditcard").data("isrequired", true);
                    $(this).find(".ff-cvv").data("isrequired", true);
                    $(this).find(".ff-mm").data("isrequired", true);
                    $(this).find(".ff-yyyy").data("isrequired", true)
                } else {
                    $(this).find(".ff-creditcard").data("isrequired", false);
                    $(this).find(".ff-cvv").data("isrequired", false);
                    $(this).find(".ff-mm").data("isrequired", false);
                    $(this).find(".ff-yyyy").data("isrequired", false)
                }
            } catch (err) {
                console.log("Error unexpected! Method[ValidateFields_CheckingAutoPaymentFields] Ex[" + err.message + "]")
            }
        })
    }
    window.ValidateSignatures = function ValidateSignatures() {
        var signaturesValid = true;
        if ($("#dvFastForms #pageValType").val() == "page") {
            var signaturesToCheck = $("#dvFastForms .ff-page-row:visible:first").find(".ff-esignature-wrapper")
        } else {
            var signaturesToCheck = $("#dvFastForms .ff-esignature-wrapper")
        }
        var vIndex = 0;
        $(signaturesToCheck).each(function() {
            try {
                if ($(this).parent().parent().attr("page-ishidden") == "true" || $(this).parent().parent().attr("data-page-ishidden") == "true") {
                    return true
                }
                if ($(this).parent().css("display") == "none") {
                    return true
                }
                if ($(this).css("display") == "none") {
                    return true
                }
                var isNameValid = true;
                var isDateValid = true;
                var isEmailValid = true;
                var areTermsAgreedTo = true;
                var nameElement = $(this).find(".ff-signwrapper:not(.display-none) .doc-sign-name");
                var emailElement = $(this).find(".ff-email-verification");
                var dateElement = $(this).find(".ff-signwrapper:not(.display-none) .doc-sign-date");
                var termsElement = $(this).find(".ff-chkagree");
                var termsCheckbox = $(this).find(".ff-chkagree input");
                vIndex++;
                isNameValid = $(nameElement).signaturePad().validateForm();
                if ($(termsElement).css("display") != "none") {
                    areTermsAgreedTo = $(termsCheckbox).is(":checked");
                    if (!areTermsAgreedTo) {
                        var id = "reqdv" + $(termsCheckbox).attr("id");
                        $(termsCheckbox).addClass("ff-input-type-invalid");
                        $(termsCheckbox).parent().append("<div class='ff-invalid-msg ff-col-1 ff-signature-error' id='" + id + "'>" + ffErr_SignatureAcceptTerms + "</div>")
                    }
                }
                if ($(emailElement).css("display") != "none") {
                    var emailField = $(emailElement).find(".ff-type-text");
                    isEmailValid = IsValidEmail($(emailField).val()) || $(emailField).val() != "";
                    if (!isEmailValid) {
                        var id = "reqdv" + $(emailField).attr("id");
                        $(emailField).addClass("ff-input-type-invalid");
                        $(emailField).parent().after("<div class='ff-invalid-msg ff-col-1 ff-signature-error' id='" + id + "'>" + ffErr_SignatureValidEmail + "</div>")
                    }
                }
                if ($(dateElement).css("display") != "none") {
                    isDateValid = $(dateElement).signaturePad().validateForm()
                }
                VALog("ValidateSignatures - Checking [" + vIndex + "] isNameValid[" + isNameValid + "]isDateValid[" + isDateValid + "]areTermsAgreedTo[" + areTermsAgreedTo + "]isEmailValid[" + isEmailValid + "] ");
                if (!isNameValid || !isDateValid || !areTermsAgreedTo || !isEmailValid) {
                    signaturesValid = false
                }
            } catch (e) {
                console.log("Error unexpected! Method[ValidateSignatures] Ex[" + e.message + "]");
                signaturesValid = false
            }
        });
        return signaturesValid
    };
    window.ResetValidation = function ResetValidation(lstFields) {
        if (arguments.length > 0) {
            for (var i = 0; i < lstFields.length; i++) {
                ClearFieldValidation($("#dvFastForms #" + lstFields[i].replace(/\./g, "\\.")))
            }
        } else {
            $("#dvFastForms .ff-input-type-invalid").each(function() {
                ClearFieldValidation($(this))
            })
        }
        if ($(".ff-invalid-msg.general-payment-err").length > 0) {
            $(".ff-invalid-msg.general-payment-err").remove()
        }
        $("div[id^=reqdvbtnsubmit]").remove();
        $("#dvFastForms #btnsubmit").removeClass("ff-input-type-invalid")
    };

    function ClearFieldValidation(valItem) {
        if ($(valItem).attr("id") && $(valItem).attr("id").indexOf("FFExpiry") == 0) {
            var id = "reqdvFFExpiry";
            if ($("div[id^=" + id + "]").length > 0) {
                $("#" + id).remove()
            }
            if ($("#reqdv" + $(valItem).attr("id")).length > 0) {
                $("#reqdv" + $(valItem).attr("id")).remove()
            }
            $(valItem).toggleClass("ff-input-type-invalid")
        } else {
            if ($(valItem).attr("id") && $(valItem).attr("id").indexOf("elemESIGNATURE") == 0) {
                $(valItem).find(".ff-invalid-msg").remove();
                $(valItem).find(".ff-input-type-invalid").toggleClass("ff-input-type-invalid")
            } else {
                if ($(valItem).attr("id")) {
                    var id = "reqdv" + $(valItem).attr("id").replace(/\./g, "\\.");
                    if ($("div[id^=" + id + "]").length > 0 || $("p[id^=" + id + "]").length > 0) {
                        $("#" + id).remove();
                        $(valItem).toggleClass("ff-input-type-invalid")
                    }
                }
            }
        }
    }
    window.ShowValidationMessage = function ShowValidationMessage(th, valType, appendMsg, showInPopup) {
        var nm = GetName($(th));
        var id = $(th).attr("id");
        var msg = "";
        var isPaymentExpiry = false;
        switch (valType) {
            case "DECIMALFORMAT":
                msg = ffErr_FormatValidDecimal;
                break;
            case "NUMERICFORMAT":
                msg = ffErr_FormatValidNumber;
                break;
            case "DECIMALSIZE":
                msg = ffErr_FormatDecimalSize;
                break;
            case "EMAILFORMAT":
                msg = ffErr_FormatValidEmail;
                break;
            case "PHONEFORMAT":
                msg = ffErr_FormatValidPhone;
                break;
            case "URLFORMAT":
                msg = ffErr_FormatValidUrl;
                break;
            case "FILESIZE":
                msg = ffErr_FileUploadSize;
                break;
            case "FILETYPE":
                msg = ffErr_FileUploadType + appendMsg;
                break;
            case "REQUIRED":
                msg = $(th).data("requiredmessage");
                if (msg == "" || !msg) {
                    msg = "required"
                }
                break;
            case "PAYMENTEXPIRYREQUIRED":
                msg = $(th).data("requiredmessage");
                if (msg == "" || !msg) {
                    msg = "required"
                }
                isPaymentExpiry = true;
                break;
            case "LENGTH":
                msg = $(th).data("maxlengthmessage");
                break;
            case "CAPTCHA":
                msg = ffErr_CaptchaIncorrect;
                break;
            case "GENERAL":
            case "PAYMENT":
                msg = appendMsg;
                break;
            default:
        }
        if (showInPopup) {
            ShowErrorPopup(msg)
        } else {
            if (isPaymentExpiry) {
                id = "reqdvFFExpiry";
                var yyElem = $(th).parent().find('[data-pp-name="FFExpiryYYYY"]');
                if ($("#" + id).length == 0) {
                    $(yyElem).after("<div class='ff-invalid-msg' id='" + id + "'>" + msg + "</div>")
                }
                $(th).toggleClass("ff-input-type-invalid")
            } else {
                var newid = "reqdv" + id;
                var i = 0;
                while ($("#" + newid).length > 0) {
                    newid = "reqdv" + id + i;
                    i++
                }
                if (valType == "PAYMENT") {
                    $(th).before("<div class='ff-invalid-msg general-payment-err' id='" + newid + "'>" + msg + "</div>")
                } else {
                    $(th).parent().append("<div class='ff-invalid-msg' id='" + newid + "'>" + msg + "</div>");
                    $(th).toggleClass("ff-input-type-invalid")
                }
            }
        }
    };

    function GetMaxValue(valLen) {
        var maxVal = "1";
        for (var i = 0; i < valLen; i++) {
            maxVal += "0"
        }
        return maxVal
    }

    function IsValidEmail(email) {
        var reEmail = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return reEmail.test(email)
    }

    function IsValidFormat(th) {
        var fieldType = $(th).attr("data-vatt");
        if (typeof fieldType != "undefined") {
            switch (fieldType.split("(")[0].toUpperCase()) {
                case "EMAIL":
                    if (!IsValidEmail($(th).val())) {
                        ShowValidationMessage(th, "EMAILFORMAT");
                        return false
                    } else {
                        return true
                    }
                case "INTEGER":
                    var reCur = /^(\d+)$/;
                    if (reCur.test($(th).val())) {
                        return true
                    } else {
                        ShowValidationMessage(th, "NUMERICFORMAT");
                        return false
                    }
                case "CURRENCY":
                case "DOUBLE":
                case "PERCENT":
                    var reCur = /^-?(\d+|\d{1,3}(,\d{3})*)(\.\d+)?$/;
                    if (reCur.test($(th).val())) {
                        var precision = fieldType.split("(")[1].split(",")[0];
                        var scale = fieldType.split("(")[1].split(",")[1].replace(")", "");
                        var maxVal = GetMaxValue(precision);
                        if (parseFloat($(th).val()) >= maxVal) {
                            ShowValidationMessage(th, "DECIMALSIZE");
                            return false
                        } else {
                            return true
                        }
                    } else {
                        ShowValidationMessage(th, "DECIMALFORMAT");
                        return false
                    }
                case "PHONE":
                    var re = /\+?[\d- )\(]{8,}/;
                    var isValid = re.test($(th).val());
                    if (!isValid) {
                        ShowValidationMessage(th, "PHONEFORMAT");
                        return false
                    } else {
                        return true
                    }
                case "URL":
                    var reUrl = /((http:\/\/)|(https:\/\/))?[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/ig;
                    if (reUrl.test($(th).val())) {
                        return true
                    } else {
                        ShowValidationMessage(th, "URLFORMAT");
                        return false
                    }
                default:
                    return true
            }
        } else {
            return true
        }
    }
    window.ResetFormData = function ResetFormData(clearAll) {
        $("#dvFastForms input,#dvFastForms textarea,#dvFastForms select").each(function() {
            var elementVisible = false;
            if ($(this).parent().parent().css("display") != "none") {
                elementVisible = true
            }
            switch ($(this).prop("type")) {
                case "file":
                    if ((clearAll && elementVisible) || GetName($(this)) == $(this).val()) {
                        $(this).val("")
                    }
                    break;
                case "text":
                case "textarea":
                    RenderCalendar(this);
                    if ((clearAll && elementVisible) || GetName($(this)) == $(this).val()) {
                        $(this).val("")
                    }
                    initFlexControl(this, false);
                    break;
                case "reset":
                    $(this).click(function(event) {
                        event.preventDefault();
                        ResetFormData(true)
                    });
                    break;
                case "radio":
                case "checkbox":
                    if ((clearAll && elementVisible)) {
                        $(this).prop("checked", false)
                    }
                    break;
                case "select-one":
                    if (clearAll && elementVisible) {
                        $(this).prop("selectedIndex", -1)
                    }
                    initFlexControl(this, false);
                    break;
                case "select-multiple":
                    if (clearAll && elementVisible) {
                        $(this).prop("selectedIndex", -1)
                    }
                    initFlexControl(this, false);
                    break
            }
        });
        $("#dvFastForms div[data-vatt=FILEUPLOAD]>div").remove();
        $("#dvFastForms .ff-type-file").each(function() {
            $(this).replaceWith($(this).clone(true))
        });
        if (clearAll) {
            clearSignatures();
            $("#dvFastForms #formHtml").val("");
            if (typeof evaluateRules == "function") {
                evaluateRules()
            }
        }
    };
    window.initFlexControl = function initFlexControl(elem, isReadOnly) {
        switch ($(elem).data("flexcontrol")) {
            case "picklist-combobox":
                try {
                    $(elem).select2("destroy");
                    if ($(elem).prop("disabled") == false) {
                        $(elem).prop("disabled", isReadOnly)
                    }
                    $(elem).select2()
                } catch (err) {}
                break;
            case "picklist-radiobutton":
                break;
            case "picklist-radiobutton-vertical":
                $(elem).SelectToRadio("destroy");
                if ($(elem).attr("disabled") == "disabled" || isReadOnly) {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-radio",
                        alignment: "vertical",
                        readonly: true
                    })
                } else {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-radio",
                        alignment: "vertical"
                    })
                }
                break;
            case "picklist-radiobutton-horizontal":
                $(elem).SelectToRadio("destroy");
                $(elem).removeClass("custom-select-offscreen");
                $(elem).prev().remove();
                if ($(elem).attr("disabled") == "disabled" || isReadOnly) {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-radio",
                        alignment: "horizontal",
                        readonly: true
                    })
                } else {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-radio",
                        alignment: "horizontal"
                    })
                }
                break;
            case "multipicklist-multi-tags":
                try {
                    $(elem).select2("destroy");
                    if ($(elem).prop("disabled") == false) {
                        $(elem).prop("disabled", isReadOnly)
                    }
                    $(elem).select2()
                } catch (err) {}
                break;
            case "multipicklist-multi-tags-check":
                try {
                    $(elem).select2("destroy");
                    if ($(elem).prop("disabled") == false) {
                        $(elem).prop("disabled", isReadOnly)
                    }
                    $(elem).select2({
                        closeOnSelect: false,
                        dropdownCssClass: "ff-multi-checkbox"
                    })
                } catch (err) {}
                break;
            case "multipicklist-checkbox-vertical":
                $(elem).SelectToRadio("destroy");
                $(elem).removeClass("custom-select-offscreen");
                $(elem).prev().remove();
                if ($(elem).attr("disabled") == "disabled" || isReadOnly) {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-checkbox",
                        alignment: "vertical",
                        readonly: true
                    })
                } else {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-checkbox",
                        alignment: "vertical"
                    })
                }
                break;
            case "multipicklist-checkbox-horizontal":
                $(elem).SelectToRadio("destroy");
                $(elem).removeClass("custom-select-offscreen");
                $(elem).prev().remove();
                if ($(elem).attr("disabled") == "disabled" || isReadOnly) {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-checkbox",
                        alignment: "horizontal",
                        readonly: true
                    })
                } else {
                    $(elem).SelectToRadio({
                        controlType: "ff-ext-checkbox",
                        alignment: "horizontal"
                    })
                }
                break;
            case "integer-starrating":
                var minRating = $(elem).attr("data-flex-min");
                var maxRating = $(elem).attr("data-flex-max");
                var minLabel = $(elem).attr("data-flex-minlabel");
                var maxLabel = $(elem).attr("data-flex-maxlabel");
                $(elem).ffrating("destroy");
                if ($(elem).val() != "" && $(elem).val() != undefined) {
                    $(elem).val(Math.round($(elem).val()))
                }
                var readOnly = $(elem).attr("readonly");
                $(elem).attr("data-flex-min", minRating);
                $(elem).attr("data-flex-max", maxRating);
                $(elem).attr("data-flex-minlabel", minLabel);
                $(elem).attr("data-flex-maxlabel", maxLabel);
                if ($(elem).attr("onchange") == null) {
                    $(elem).ffrating("show", {
                        readonly: readOnly,
                        showSelectedRating: true
                    })
                } else {
                    $(elem).ffrating("show", {
                        readonly: readOnly,
                        showSelectedRating: true,
                        onSelect: function(value, text) {
                            $(elem).trigger("change")
                        }
                    })
                }
                break;
            case "integer-npsrating":
                var minRating = $(elem).attr("data-flex-min");
                var midRating = $(elem).attr("data-flex-middle");
                var maxRating = $(elem).attr("data-flex-max");
                var minLabel = $(elem).attr("data-flex-minlabel");
                var midLabel = $(elem).attr("data-flex-middlelabel");
                var maxLabel = $(elem).attr("data-flex-maxlabel");
                $(elem).ffrating("destroy");
                if ($(elem).val() != "" && $(elem).val() != undefined) {
                    $(elem).val(Math.round($(elem).val()))
                }
                var readOnly = $(elem).attr("readonly");
                $(elem).attr("data-flex-min", minRating);
                $(elem).attr("data-flex-middle", midRating);
                $(elem).attr("data-flex-max", maxRating);
                $(elem).attr("data-flex-minlabel", minLabel);
                $(elem).attr("data-flex-middlelabel", midLabel);
                $(elem).attr("data-flex-maxlabel", maxLabel);
                if ($(elem).attr("onchange") == null) {
                    $(elem).ffrating("show", {
                        readonly: readOnly,
                        isStar: false
                    })
                } else {
                    $(elem).ffrating("show", {
                        readonly: readOnly,
                        isStar: false,
                        onSelect: function(value, text) {
                            $(elem).trigger("change")
                        }
                    })
                }
                break;
            default:
                break
        }
    };

    function CompleteFormSubmission(url, msg) {
        ExecAfterSave();
        ResetFormData($("#dvFastForms #txtObjId").val() == "");
        $("#dvFastForms #btnsubmit").prop("disabled", false);
        if (url) {
            RedirectToUrl(url)
        } else {
            if (msg) {
                ShowConfirmationPopup(msg)
            }
        }
    }
    window.openLookupPopup = function openLookupPopup(elem) {
        LogEvent("OPENED_LOOKUP", "");
        try {
            var embedCodeParamArray = getEmbedCodeParams();
            var formWidth = $("#dvFastForms .ff-form-main").css("max-width").replace("px", "");
            var formHeight = 575;
            var target = $("#ffLookupDialog");
            var vClassiFrame = "";
            if (inIframe()) {
                parentWin = window.parent;
                target = parent.document.getElementById("ffLookupDialog");
                console.log(target);
                if (typeof target !== "undefined" && target !== null) {
                    console.log("We found Dialog outside of iFrame");
                    vClassiFrame = "embedcode-iframe-on";
                    ffDialogPositionOption = {
                        my: "top right",
                        at: "top right",
                        of: parentWin
                    };
                    formWidth = parentWin.innerWidth;
                    formHeight = parentWin.innerHeight
                } else {
                    target = $("#ffLookupDialog");
                    formWidth = window.innerWidth;
                    formHeight = window.innerHeight
                }
                if (formHeight > 575) {
                    formHeight = 575
                }
                if (formWidth > 500) {
                    formWidth = 500
                }
            }
            try {
                $(target).dialog({
                    height: formHeight,
                    width: formWidth,
                    position: ffDialogPositionOption
                });
                $(target).dialog("close");
                $(target).dialog({
                    height: formHeight,
                    width: formWidth,
                    position: ffDialogPositionOption,
                    modal: true,
                    id: "dvFastForms",
                    dialogClass: "ff-form-main",
                    buttons: {
                        Done: {
                            click: function() {
                                $(this).dialog("close")
                            },
                            text: "Done",
                            "class": "ff-btn-submit"
                        }
                    }
                })
            } catch (err) {
                console.trace("Lookup Dialog error log trace:")
            }
            var vCommunityUserAccessToken = "";
            if ($("#dvFastForms #CommunitySessioID").val() != "") {
                vCommunityUserAccessToken += "&cut=" + $("#dvFastForms #CommunitySessioID").val();
                vCommunityUserAccessToken += "&cid=" + $("#dvFastForms #CommunityUserId").val();
                vCommunityUserAccessToken += "&cviewmode=" + $("#dvFastForms #CommunityViewMode").val();
                vCommunityUserAccessToken += "&iu=" + $("#dvFastForms #CommunityInstanceURL").val()
            }
            $(target).html($("<iframe/>", {
                src: FormBASEURL + "EngineFrame/DoLookup?lf=" + $(elem).attr("id").replace("alink", "") + "&htmlId=" + $("#dvFastForms #txtHtmlId").val() + vCommunityUserAccessToken + "&hasCustomCSS=" + $("#dvFastForms #hasCustomCSS").val(),
                style: "width:100%; height:100%; border:none;",
                id: "ffLookupFrame",
                name: vClassiFrame
            }));
            $(".ff-ui-dialog-titlebar").hide();
            $(".ff-ui-dialog").attr("id", "dvFastForms")
        } catch (ex) {
            console.log("[VA] Error unexpected! Method[openLookupPopup] Ex[" + ex + "]");
            console.log(ex)
        }
        return false
    };
    window.closeLookupPopup = function closeLookupPopup() {
        $("#dvFastForms #ffLookupDialog").dialog("close");
        return false
    };

    function PostFormData() {
        ExecOnInitSave();
        var btnSubmit = $("#dvFastForms #btnsubmit");
        var url = $(btnSubmit).attr("data-btnurl");
        var msg = $(btnSubmit).attr("data-btnmessage");
        var isDraft = $("#dvFastForms #isDraft").val().toLowerCase() == "true";
        if (isDraft) {
            var saveUrl = FormBASEURL + "EngineFrame/SaveDraft"
        } else {
            var saveUrl = FormBASEURL + "EngineFrame/SaveContent"
        }($).support.cors = true;
        var formData;
        if (isNullOrEmpty($("#dvFastForms #txtUserContentId").val()) && !isDraft) {
            SetFormPDFHTML()
        }
        if (window.XDomainRequest) {
            formData = GenerateFormData(true);
            var xdr = new XDomainRequest();
            if (window.location.protocol == "http:" && saveUrl.lastIndexOf("https:", 0) === 0) {
                saveUrl = saveUrl.replace("https:", "http:")
            }
            xdr.open("post", saveUrl);
            xdr.onload = function() {
                if (!isDraft) {
                    CompleteFormSubmission(url, msg);
                    var submissionResponse = $("<div/>").html(xdr.responseText);
                    if ($(submissionResponse).find("#newSessionUID").length > 0 && $("#txtSessionID") !== undefined) {
                        var sessionUID = $(submissionResponse).find("#newSessionUID").text();
                        if (!isNullOrEmpty(sessionUID)) {
                            $("#txtSessionID").val(sessionUID)
                        }
                    }
                } else {
                    if ($("#dvFastForms #draftSaved").val() == "True") {
                        ShowConfirmationPopup(ffPrompt_SFLChangesSaved)
                    }
                    $("#dvFastForms #draftSaved").val("True");
                    $("#dvFastForms #btndiscard").show()
                }
            };
            xdr.send(formData);
            $("#dvFastForms #btnsubmit").prop("disabled", false)
        } else {
            if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                console.log("[PostFormData][IE11-SF][XMLHttpRequest]");
                formData = GenerateFormData(false);
                var oReq = null;
                if (Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", saveUrl, true);
                oReq.onreadystatechange = function() {
                    if (oReq.readyState == 4 && oReq.status == 200) {
                        if (!isDraft) {
                            CompleteFormSubmission(url, msg);
                            var submissionResponse = $("<div/>").html(oReq.responseText);
                            if ($(submissionResponse).find("#newSessionUID").length > 0 && $("#txtSessionID") !== undefined) {
                                var sessionUID = $(submissionResponse).find("#newSessionUID").text();
                                if (!isNullOrEmpty(sessionUID)) {
                                    $("#txtSessionID").val(sessionUID)
                                }
                            }
                        } else {
                            if ($("#dvFastForms #draftSaved").val() == "True") {
                                ShowConfirmationPopup(ffPrompt_SFLChangesSaved)
                            }
                            $("#dvFastForms #draftSaved").val("True");
                            $("#dvFastForms #btndiscard").show()
                        }
                    } else {
                        if (oReq.readyState == 4 && oReq.status != 200) {
                            console.log(" Service call exception" + oReq.responseText)
                        }
                    }
                };
                oReq.send(formData)
            } else {
                formData = GenerateFormData(false);
                $.ajax({
                    global: false,
                    type: "POST",
                    crossDomain: true,
                    url: saveUrl,
                    data: formData,
                    dataType: "text",
                    processData: false,
                    success: function(data) {
                        if (!isDraft) {
                            CompleteFormSubmission(url, msg);
                            var submissionResponse = $("<div/>").html(data);
                            if ($(submissionResponse).find("#newSessionUID").length > 0 && $("#txtSessionID") !== undefined) {
                                var sessionUID = $(submissionResponse).find("#newSessionUID").text();
                                if (!isNullOrEmpty(sessionUID)) {
                                    $("#txtSessionID").val(sessionUID)
                                }
                            }
                        } else {
                            if ($("#dvFastForms #draftSaved").val() == "True") {
                                ShowConfirmationPopup(ffPrompt_SFLChangesSaved)
                            }
                            $("#dvFastForms #draftSaved").val("True");
                            $("#dvFastForms #btndiscard").show()
                        }
                    },
                    error: function(request, status, error) {
                        if (!isDraft) {
                            CompleteFormSubmission(url, msg)
                        } else {
                            if ($("#dvFastForms #draftSaved").val() == "True") {
                                ShowConfirmationPopup(ffPrompt_SFLChangesSaved)
                            }
                            $("#dvFastForms #draftSaved").val("True");
                            $("#dvFastForms #btndiscard").show()
                        }
                    }
                })
            }
        }
    }

    function SetFormPDFHTML() {
        try {
            var isLightning = _SafeBoolean(intialSwiftFormsConfig.IsSourceLightning, false);
            if (isLightning) {
                $("#dvFastForms .ff-form-main input,#dvFastForms .ff-form-main select,#dvFastForms .ff-form-main textarea,#dvFastForms .main-docsign-wrapper").each(function() {
                    var attrId = $(this).attr("id");
                    if (typeof attrId !== typeof undefined && attrId !== false) {
                        $(this).attr("data-id", $(this).attr("id"))
                    }
                    var attrName = $(this).attr("name");
                    if (typeof attrName !== typeof undefined && attrName !== false) {
                        $(this).attr("data-name", $(this).attr("name"))
                    }
                })
            }
            var newDiv;
            var cssLinkHtml = "";
            if ($(".ff-form").length > 0) {
                newDiv = $("<div/>").html($(".ff-form").html())
            } else {
                if (isLightning) {
                    var html = $("#dvFastForms").parent().html();
                    if ($("#dvFastForms").parent().find(">link").length > 0) {
                        $("#dvFastForms").parent().find(">link").each(function() {
                            cssLinkHtml += '<link rel="stylesheet" type="text/css" href="' + $(this).attr("href") + '"></link>'
                        })
                    }
                    newDiv = $("<div/>").html(html)
                } else {
                    newDiv = $("<div/>").html($("#dvFastForms").html())
                }
            }
            if (isLightning) {
                $(newDiv).find(".ff-form-main input,.ff-form-main select,.ff-form-main textarea,.main-docsign-wrapper").each(function() {
                    var attrId = $(this).attr("data-id");
                    if (typeof attrId !== typeof undefined && attrId !== false) {
                        $(this).attr("id", $(this).attr("data-id"))
                    }
                    var attrName = $(this).attr("data-name");
                    if (typeof attrName !== typeof undefined && attrName !== false) {
                        $(this).attr("name", $(this).attr("data-name"))
                    }
                })
            }
            $(newDiv).find("#jsFastForms").remove();
            $(newDiv).find("#ffOverlay").remove();
            $(newDiv).find(".ff-esignature-wrapper .ffsignature").remove();
            $(newDiv).find(".ff-esignature-wrapper .ffdate").remove();
            $(newDiv).find(".ff-esignature-wrapper .ff-sign-div").remove();
            $(newDiv).find(".ff-esignature-wrapper .typedSignName").addClass("typedSignNamePrintable");
            $(newDiv).find(".ff-esignature-wrapper .typedSignDate").addClass("typedSignDatePrintable");
            $(newDiv).find(".ff-payment-wrapper").each(function() {
                var cardElem = $(this).find(".ff-creditcard");
                var cvvElem = $(this).find(".ff-cvv");
                var cardNum = $(cardElem).val();
                var cvv = $(cvvElem).val();
                var lastDigits = cardNum.substring(cardNum.Length - 3, 3);
                var requiredMaskCard = new String("*", cardNum.Length - lastDigits.Length);
                var maskedStringCVV = new String("*", cvv.Length);
                var maskedStringCard = requiredMaskCard.concat(lastDigits);
                $(cardElem).val(maskedStringCard);
                $(cvvElem).val(maskedStringCVV)
            });
            var imgList = [];
            var imgObj = {};
            var i = 0;
            $("#dvFastForms").find(".main-docsign-wrapper.ffs-drawn").each(function() {
                var api = $(this).find(".ff-signwrapper.ff-drawn .doc-sign-name").signaturePad();
                var image = new Image();
                imgObj[i] = api.getSignatureImage();
                imgList.push(imgObj);
                image.src = "ffSignatureImage" + i;
                $(newDiv).find("#" + $(this).attr("id") + " .ff-signwrapper.ff-drawn .doc-sign-name .docsignWrapper").replaceWith(image);
                i++;
                var api = $(this).find(".ff-signwrapper.ff-drawn .doc-sign-date").signaturePad();
                var image = new Image();
                imgObj[i] = api.getSignatureImage();
                imgList.push(imgObj);
                image.src = "ffSignatureImage" + i;
                $(newDiv).find("#" + $(this).attr("id") + " .ff-signwrapper.ff-drawn .doc-sign-date .docsignWrapper").replaceWith(image);
                i++
            });
            $("#dvFastForms").find(".main-docsign-wrapper.ffs-both").each(function() {
                var api = $(this).find(".ff-signwrapper.ff-drawn .doc-sign-name").signaturePad();
                var image = new Image();
                imgObj[i] = api.getSignatureImage();
                imgList.push(imgObj);
                image.src = "ffSignatureImage" + i;
                $(newDiv).find("#" + $(this).attr("id") + " .ff-signwrapper.ff-drawn .doc-sign-name .docsignWrapper").replaceWith(image);
                i++;
                var api = $(this).find(".ff-signwrapper.ff-drawn .doc-sign-date").signaturePad();
                var image = new Image();
                imgObj[i] = api.getSignatureImage();
                imgList.push(imgObj);
                image.src = "ffSignatureImage" + i;
                $(newDiv).find("#" + $(this).attr("id") + " .ff-signwrapper.ff-drawn .doc-sign-date .docsignWrapper").replaceWith(image);
                i++
            });
            $("#dvFastForms").find(".main-docsign-wrapper.ffs-full").each(function() {
                var api = $(this).find(".ff-signwrapper.ff-drawn .doc-sign-name").signaturePad();
                var image = new Image();
                imgObj[i] = api.getSignatureImage();
                imgList.push(imgObj);
                image.src = "ffSignatureImage" + i;
                $(newDiv).find("#" + $(this).attr("id") + " .ff-signwrapper.ff-drawn .doc-sign-name .docsignWrapper").replaceWith(image);
                i++;
                var api = $(this).find(".ff-signwrapper.ff-drawn .doc-sign-date").signaturePad();
                var image = new Image();
                imgObj[i] = api.getSignatureImage();
                imgList.push(imgObj);
                image.src = "ffSignatureImage" + i;
                $(newDiv).find("#" + $(this).attr("id") + " .ff-signwrapper.ff-drawn .doc-sign-date .docsignWrapper").replaceWith(image);
                i++
            });
            $(newDiv).find(".ff-page-row").filter("[page-ishidden!=true],[data-page-ishidden!=true]").show();
            $(newDiv).find(".ff-page-bread-header").remove();
            $(newDiv).find(".ff-page-header-row").remove();
            $(newDiv).find("#btnprev").hide();
            $(newDiv).find("#btnnext").hide();
            $(newDiv).find("#btnsubmit").hide();
            $(newDiv).find("#formHtml").remove();
            $(newDiv).find("[class*='ff-ui-dialog']").remove();
            $(newDiv).find("script").remove();
            $(newDiv).find(".ff-general-text-label").parent().css("max-width", "100%");
            var finalHtml = $("<div/>").text($(newDiv).html()).html();
            $.each(imgList, function(i, val) {
                finalHtml = finalHtml.replace(new RegExp("ffSignatureImage" + i, "gi"), encodeURIComponent(val[i]))
            });
            finalHtml = LZString.compressToEncodedURIComponent(cssLinkHtml + finalHtml);
            $("#dvFastForms #formHtml").val(finalHtml)
        } catch (err) {
            console.log("ERROR []" + err)
        }
    }

    function GenerateFormData(isXDR) {
        console.log("[FS] [GenerateFormData] Starts... ");
        var now = new Date();
        var formData;
        var dataArr = [];
        AddToArray(dataArr, "inputdate", (now.getMonth() + 1) + "/" + now.getDate() + "/" + now.getFullYear() + " " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds());
        $("#dvFastForms input,#dvFastForms  textarea,#dvFastForms  select").each(function() {
            var val = $(this).val();
            switch ($(this).prop("type")) {
                case "text":
                case "textbox":
                    AddToArray(dataArr, GetName($(this)), fixedEncodeURIComponent(val));
                    break;
                case "radio":
                    if ($(this).prop("checked")) {
                        AddToArray(dataArr, GetName($(this)), fixedEncodeURIComponent(val))
                    }
                    break;
                case "checkbox":
                    AddToArray(dataArr, GetName($(this)), $(this).prop("checked"));
                    break;
                case "textarea":
                    AddToArray(dataArr, GetName($(this)), fixedEncodeURIComponent(val));
                    break;
                case "select-one":
                    AddToArray(dataArr, GetName($(this)), fixedEncodeURIComponent($(this).find(":selected").val()));
                    break;
                case "select-multiple":
                    var selectedValues = "";
                    $(this).find(":selected").each(function() {
                        selectedValues += ";" + fixedEncodeURIComponent($(this).val())
                    });
                    if (selectedValues.length > 1) {
                        selectedValues = selectedValues.substr(1, selectedValues.length - 1)
                    }
                    AddToArray(dataArr, GetName($(this)), selectedValues);
                    break;
                case "hidden":
                    AddToArray(dataArr, GetName($(this)), val);
                    break;
                case "submit":
                case "button":
                case "reset":
                    break;
                default:
                    AddToArray(dataArr, "Unknown_InputType_" + GetName($(this)), $(this).prop("type"))
            }
        });
        $("#dvFastForms .ff-sec-repeat-wrapper").each(function(indx, ritem) {
            var repeatedObjId = $(ritem).attr("data-rid");
            if (repeatedObjId !== undefined && repeatedObjId != "") {
                AddToArray(dataArr, repeatedObjId, fixedEncodeURIComponent($(ritem).attr("data-rval")))
            }
        });
        if (isXDR) {
            formData = "";
            for (var i = 0; i < dataArr.length; i++) {
                if (formData != "") {
                    formData += "&"
                }
                formData += dataArr[i][0] + "=" + dataArr[i][1]
            }
        } else {
            formData = new FormData;
            for (var i = 0; i < dataArr.length; i++) {
                formData.append(dataArr[i][0], dataArr[i][1])
            }
        }
        return formData
    }

    function GetSaveDraftEmail() {
        var target = $("#ffLookupDialog");
        if (inIframe()) {
            var email = prompt(ffPrompt_EnterSaveEmail);
            if (email != null && email != "") {
                alert(ffPrompt_SaveEmailConfirm);
                $("#dvFastForms #draftEmail").val(email);
                PostFormData()
            }
        } else {
            var formWidth = $("#dvFastForms .ff-form-main").css("max-width").replace("px", "");
            $(target).dialog({
                position: ffDialogPositionOption,
                height: 300,
                width: formWidth,
                modal: true,
                id: "dvFastForms",
                dialogClass: "ff-form-main",
                show: {
                    effect: "fade",
                    duration: 350
                },
                hide: {
                    effect: "fade",
                    duration: 350
                },
                buttons: {
                    OK: {
                        click: function() {
                            var email = $(this).find("#ffSaveDraftEmail").val();
                            if (email != "") {
                                ShowConfirmationPopup(ffPrompt_SaveEmailConfirm);
                                $("#dvFastForms #draftEmail").val(email);
                                $(this).dialog("close");
                                PostFormData()
                            } else {
                                ShowValidationMessage($(this).find("#ffSaveDraftEmail"), "REQUIRED")
                            }
                        },
                        text: "OK",
                        "class": "ff-btn-submit"
                    },
                    Cancel: {
                        click: function() {
                            $(this).dialog("close")
                        },
                        text: "Cancel",
                        "class": "ff-btn-submit"
                    }
                }
            }).siblings(".ui-dialog-titlebar").remove();
            $(target).html($('<div class="ff-item-row">   <div class="ff-col-1 ff-label-col">        <label data-vatt="STRING" class="ff-label">            Please provide your email address below.<br />You will receive an email with a link to allow you to retrieve your saved form at a later date.        </label>   </div></div><div class="ff-item-row">   <div class="ff-col-1 ff-label-col">       <label data-vatt="STRING" for="ffSaveDraftEmail" class="ff-label" id="lblSaveDraftEmail">         E-mail Address:       </label>       <span class="requiredSpan ff-required-mark">*</span>   </div>   <div class="ff-col-2 ff-field-col">       <input type="textbox" id="ffSaveDraftEmail" name="ffSaveDraftEmail" data-vatt="STRING" class="ff-input-type ff-type-text" maxlength="50" value="" />   </div></div>'));
            $(".ff-ui-dialog-titlebar").hide();
            $(".ff-ui-dialog").attr("id", "dvFastForms")
        }
    }
    window.DiscardDraft = function DiscardDraft() {
        var target = $("#dialog");
        if (inIframe()) {
            var res = confirm("Are you sure you want to discard this saved form? This action cannot be undone.");
            if (res == true) {
                $("#dvFastForms #isDraft").val("False");
                $("#dvFastForms #draftSaved").val("False");
                DiscardFormData()
            }
        } else {
            $(target).dialog({
                position: ffDialogPositionOption,
                autoResize: true,
                modal: true,
                id: "dvFastForms",
                dialogClass: "ff-form-main",
                show: {
                    effect: "fade",
                    duration: 350
                },
                hide: {
                    effect: "fade",
                    duration: 350
                },
                buttons: {
                    Yes: {
                        click: function() {
                            $(this).dialog("close");
                            $("#dvFastForms #isDraft").val("False");
                            $("#dvFastForms #draftSaved").val("False");
                            DiscardFormData()
                        },
                        text: "Yes",
                        "class": "ff-btn-submit"
                    },
                    No: {
                        click: function() {
                            $(this).dialog("close")
                        },
                        text: "No",
                        "class": "ff-btn-submit"
                    }
                }
            }).siblings(".ui-dialog-titlebar").remove();
            $(target).html("Are you sure you want to discard this saved form?<br /> This action cannot be undone.");
            $(".ff-ui-dialog-titlebar").hide();
            $(".ff-ui-dialog").attr("id", "dvFastForms")
        }
    };

    function DiscardFormData() {
        VALog("[DiscardFormData]");
        ($).support.cors = true;
        var sessionId = $("#dvFastForms #txtSessionID").val();
        var discardUrl = FormBASEURL + "EngineFrame/DiscardDraft?sid=" + sessionId;
        if (window.XDomainRequest) {
            VALog("[DiscardFormData][XDomainRequest]");
            var xdr = new XDomainRequest();
            if (window.location.protocol == "http:" && discardUrl.lastIndexOf("https:", 0) === 0) {
                discardUrl = discardUrl.replace("https:", "http:")
            }
            xdr.open("POST", discardUrl);
            xdr.onload = function() {
                VALog("[DiscardFormData][XDomainRequest][onload]");
                ShowConfirmationPopup(ffPrompt_SavedFormDiscarded);
                $("#dvFastForms #draftSaved").val("False");
                $("#dvFastForms #isDraft").val("False");
                $("#dvFastForms #btndiscard").hide();
                ResetFormData(true)
            };
            xdr.send()
        } else {
            if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                console.log("[DiscardFormData][IE11-SF][XMLHttpRequest]");
                var oReq = null;
                if (Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", discardUrl, true);
                oReq.onreadystatechange = function() {
                    if (oReq.readyState == 4 && oReq.status == 200) {
                        VALog("[DiscardFormData][IE11-SF][XMLHttpRequest][result]");
                        ShowConfirmationPopup(ffPrompt_SavedFormDiscarded);
                        $("#dvFastForms #draftSaved").val("False");
                        $("#dvFastForms #isDraft").val("False");
                        $("#dvFastForms #btndiscard").hide()
                    } else {
                        if (oReq.readyState == 4 && oReq.status != 200) {
                            console.log(" Service call status:" + oReq.status)
                        }
                    }
                };
                oReq.send()
            } else {
                $.ajax({
                    global: false,
                    type: "POST",
                    crossDomain: true,
                    url: discardUrl,
                    processData: false,
                    success: function(data) {
                        ShowConfirmationPopup(ffPrompt_SavedFormDiscarded);
                        $("#dvFastForms #draftSaved").val("False");
                        $("#dvFastForms #isDraft").val("False");
                        $("#dvFastForms #btndiscard").hide()
                    },
                    error: function(request, status, error) {
                        ShowConfirmationPopup(ffPrompt_SavedFormDiscarded);
                        $("#dvFastForms #draftSaved").val("False");
                        $("#dvFastForms #isDraft").val("False");
                        $("#dvFastForms #btndiscard").hide()
                    }
                })
            }
        }
    }
    window.SubmitData = function SubmitData(isDraft) {
        if (isDraft == true) {
            $("#dvFastForms #isDraft").val("True");
            if ($("#dvFastForms #draftSaved").val() != "True") {
                GetSaveDraftEmail()
            } else {
                PostFormData()
            }
        } else {
            if ($("#submitRules") !== undefined) {
                var rules = $("#submitRules").val();
                if (rules !== undefined && rules !== "") {
                    var ruleArr = rules.split(",").map(function(item) {
                        return parseInt(item, 10)
                    });
                    evaluateRules(ruleArr)
                }
            }
            if (!hasGeneralError) {
                $("#dvFastForms #btnsubmit").prop("disabled", true);
                formValid = true;
                var result = ExecBeforeSave();
                if (result == true) {
                    ValidateForm()
                }
            } else {
                hasGeneralError = false
            }
        }
    };

    function ShowConfirmationPopup(msg) {
        try {
            var target = $("#dialog");
            if (inIframe()) {
                target = parent.$("#dialog")
            }
            $(target).dialog({
                position: {
                    my: "center",
                    at: "center",
                    of: "#dvBannerHTML"
                },
                autoResize: true,
                modal: true,
                id: "dvFastForms",
                dialogClass: "ff-form-main",
                show: {
                    effect: "fade",
                    duration: 350
                },
                hide: {
                    effect: "fade",
                    duration: 350
                },
                buttons: {
                    OK: {
                        click: function() {
                            $(this).dialog("close")
                        },
                        text: "OK",
                        "class": "ff-btn-submit"
                    }
                }
            }).siblings(".ff-ui-dialog-titlebar").remove();
            $(target).html(msg);
            $(".ff-ui-dialog-titlebar").hide();
            $(".ff-ui-dialog").attr("id", "dvFastForms")
        } catch (ex) {
            console.trace("Log:" + ex);
            alert(msg)
        }
    }

    function ShowErrorPopup(msg) {
        try {
            var target = $("#dialog");
            if (inIframe()) {
                target = parent.$("#dialog")
            }
            $(target).html(msg);
            $(target).dialog({
                position: ffDialogPositionOption,
                title: "Error",
                show: {
                    effect: "fade",
                    duration: 500
                },
                hide: {
                    effect: "fade",
                    duration: 500
                },
                buttons: {
                    OK: function() {
                        $(this).dialog("close")
                    }
                }
            })
        } catch (ex) {
            alert(msg)
        }
    }

    function RenderCalendar(th) {
        switch ($(th).attr("data-vatt")) {
            case "date":
            case "datetime":
            case "DATE":
            case "DATETIME":
                if (!$(th).prop("disabled")) {
                    if ($(th).data("datepicker") !== undefined) {
                        $(th).datetimepicker("destroy")
                    }
                    $(th).removeClass("hasDatepicker");
                    var nm = GetName($(th));
                    $(th).attr("maxlength", "10");
                    if ($(th).attr("data-vatt").toLowerCase() == "datetime") {
                        $(th).datetimepicker({
                            addSliderAccess: true,
                            sliderAccessArgs: {
                                touchonly: false
                            },
                            changeMonth: true,
                            changeYear: true,
                            yearRange: "-100:+10",
                            onSelect: function() {
                                $(this).trigger("keyup");
                                $(this).blur()
                            },
                            beforeShow: function() {
                                setTimeout(function() {
                                    InitializeIframe()
                                }, 100)
                            }
                        })
                    } else {
                        $(th).datetimepicker({
                            showTimepicker: false,
                            addSliderAccess: true,
                            sliderAccessArgs: {
                                touchonly: false
                            },
                            changeMonth: true,
                            changeYear: true,
                            yearRange: "-100:+10",
                            onSelect: function() {
                                $(this).trigger("keyup");
                                $(this).blur()
                            },
                            beforeShow: function() {
                                setTimeout(function() {
                                    InitializeIframe()
                                }, 100)
                            }
                        })
                    }
                }
                break
        }
    }

    function InitializeLogo() {
        var logoDiv = $(".ff-logo");
        var bg_url = $(logoDiv).css("background-image");
        if (bg_url != "none") {
            bg_url = /^url\((['"]?)(.*)\1\)$/.exec(bg_url);
            bg_url = bg_url ? bg_url[2] : "";
            $(logoDiv).css("background-image", "none");
            $(logoDiv).append($('<img alt="Company Logo" src="' + bg_url + '">'))
        }
    }

    function _SafeBoolean(booleanValue, defaultValue) {
        var returnBool = defaultValue;
        try {
            if (booleanValue == "true" || booleanValue == "True" || booleanValue == true) {
                returnBool = true
            } else {
                if (booleanValue == "false" || booleanValue == "False" || booleanValue == false) {
                    returnBool = false
                }
            }
        } catch (err) {}
        return returnBool
    }

    function InitializeForm() {
        try {
            if ($("#isHostedForm").val() == "True") {
                $(document).prop("title", $("#dvFastForms #formName").val())
            }
            $(".ff-form-main").prepend('<div id="ffOverlay"></div>');
            $("#dvLoading").hide();
            $(document).ajaxStart(function() {
                $("#ffOverlay").addClass("ff-overlay-image")
            }).ajaxStop(function() {
                $("#ffOverlay").removeClass("ff-overlay-image")
            });
            $(window).off("message");
            $(window).on("message", function(event) {
                HandlePostMessage(event)
            });
            $("#dvFastForms").show();
            BindPaymentRulesEvents();
            ResetFormData(false);
            $("#userTimeZone").val(new Date().getTimezoneOffset());
            InitializeLookupFields();
            InitializeRepeatableSections();
            InitializeCheckboxes();
            InitializeFileUpload();
            InitializePayment();
            InitializeSignature();
            InitializeFooter();
            InitializeLogo();
            InitializePages();
            $("#dvFastForms .ff-page-bread-header").remove();
            InitializeBreadcrumbs();
            SetBreadcrumbWidth();
            BindRuleEvents();
            brokenImagesFallback_ForNA25();
            ExecAfterRender();
            InitializeIframe();
            setTimeout(function() {
                InitializeIframe()
            }, 100);
            if ($("#dvFastForms #saveForLaterEnabled").val().toLowerCase() == "true" && $("#dvFastForms #draftSaved").val().toLowerCase() == "true") {
                if (typeof ffFileUploadJson !== "undefined") {
                    ValidateFileUploads(ffFileUploadJson)
                }
                if (typeof evaluateRules == "function") {
                    evaluateRules()
                }
            }
            if (!isNullOrEmpty($("#txtUserContentId").val())) {
                $(".ff-form-main .btnDiv").remove();
                $(".ff-form-main").find(".ff-page-row").filter("[page-ishidden=true],[data-page-ishidden=true]").show();
                $(".ff-form-main").find(".ff-page-bread").remove();
                $(".ff-form-main").css("pointer-events", "none");
                if (typeof evaluateRules == "function") {
                    evaluateRules()
                }
                $(".ff-form-main input, textarea, select").each(function() {
                    if ($(this).data("sferr")) {
                        ShowValidationMessage(this, "GENERAL", $(this).data("sferr"))
                    }
                })
            }
            if ($("#dvFastForms #saveForLaterEnabled").val().toLowerCase() == "true" && $("#dvFastForms #isDraft").val().toLowerCase() != "true" && $("#dvFastForms #draftSaved").val().toLowerCase() == "true") {
                setTimeout(function() {
                    ShowConfirmationPopup(ffPrompt_InvalidSavedForm)
                }, 100)
            }
            $(".ff-form-main input, textarea, select").each(function() {
                if ($(this).val() != null && $(this).val().length > 0) {
                    $(this).val(EvaluateCustomFormula($(this).val()))
                }
            })
        } catch (err) {
            console.log("ERROR [InitializeForm]" + err)
        }
    }

    function brokenImagesFallback_ForNA25() {
        try {
            $(".ff-col-1.ff-image img,.ff-header .ff-logo img").each(function(imgElem) {
                var imgSrc = $(this).attr("src");
                if (imgSrc !== undefined && imgSrc.toLowerCase().indexOf("https://na25.") == 0) {
                    $(this).error(function() {
                        if (setNA25Img == true) {
                            console.log("Error loading an image for NA25");
                            onImageLoadError(this)
                        }
                    })
                }
            })
        } catch (err) {
            console.log("NA25 issue:" + err)
        }
    }

    function onImageLoadError(imgElem) {
        try {
            $(imgElem).unbind("error");
            $(".ff-col-1.ff-image img,.ff-header .ff-logo img").each(function() {
                var imgSrc = $(this).attr("src");
                if (imgSrc !== undefined && imgSrc.toLowerCase().indexOf("https://na25.") == 0) {
                    imgSrc = imgSrc.replace("https://NA25.", "https://NA56.");
                    imgSrc = imgSrc.replace("https://na25.", "https://na56.");
                    $(this).error().attr("src", imgSrc)
                }
            });
            $(".ff-form,.ff-header,.ff-footer-group").each(function() {
                var imgSrc = $(this).css("background-image");
                if (imgSrc !== undefined && imgSrc.toLowerCase().indexOf("https://na25.") > 0) {
                    imgSrc = imgSrc.replace("https://NA25.", "https://NA56.");
                    imgSrc = imgSrc.replace("https://na25.", "https://na56.");
                    $(this).css("background-image", imgSrc)
                }
            })
        } catch (err) {
            console.log("NA25 image error:" + err)
        }
        setNA25Img = false
    }

    function InitializeCheckboxes() {
        $(".ff-checkbox[readonly='readonly']").each(function() {
            var onclick = $(this).attr("onclick");
            if (onclick != undefined) {
                $(this).attr("onclick", "return false;" + onclick)
            } else {
                $(this).attr("onclick", "return false;")
            }
        })
    }

    function InitializeBreadcrumbs() {
        if ($("#dvFastForms #breadcrumbEnabled").val().toLowerCase() == "true") {
            var i = 0;
            var breadHeaderDiv = $("<div />").addClass("ff-page-bread-header");
            var breadWrapperDiv = $("<div />").addClass("ff-page-bread-wrapper");
            var breadDiv = $("<div />").addClass("ff-page-bread");
            var nextBreadBtn = $("<div>></div>").addClass("ff-page-bread-next ff-page-bread-item");
            var prevBreadBtn = $("<div><</div>").addClass("ff-page-bread-prev ff-page-bread-item");
            $(prevBreadBtn).css("visibility", "hidden");
            $(breadDiv).appendTo(breadWrapperDiv);
            $(breadWrapperDiv).appendTo(breadHeaderDiv);
            $("#dvFastForms .ff-form-main").prepend(breadHeaderDiv);
            $(breadWrapperDiv).before(prevBreadBtn);
            $(breadWrapperDiv).after(nextBreadBtn);
            $("#dvFastForms .ff-form-main .ff-page-bread-prev").each(function() {
                $(this).bind("click", function() {
                    FFMoveBreadcrumbLeft()
                })
            });
            $("#dvFastForms .ff-form-main .ff-page-bread-next").each(function() {
                $(this).bind("click", function() {
                    FFMoveBreadcrumbRight()
                })
            });
            var totalWidth = 0;
            $(allFormPagesWithLegacyCheck(null, true, false)).each(function() {
                var setPageFunction = "FFSetPage(" + i + ");";
                var breadPrefix = $("#dvFastForms #breadcrumbPrefix").val();
                if (breadPrefix == "") {
                    var title = ($("#dvFastForms #breadcrumbNumbered").val().toLowerCase() == "true" ? (i + 1) + ". " : "") + $(this).data("pagetitle")
                } else {
                    var title = (breadPrefix == "" ? "" : breadPrefix + " ") + ($("#dvFastForms #breadcrumbNumbered").val().toLowerCase() == "true" ? (i + 1) + ": " : "") + $(this).data("pagetitle")
                }
                var breadItem = $("<div data-pageid='" + $(this).attr("id") + "'/>").html(title).addClass("ff-page-bread-item");
                if (i == 0) {
                    $(breadItem).addClass("item-selected")
                }
                $(breadItem).appendTo(breadDiv);
                if ($("#dvFastForms .ff-page-bread .ff-page-bread-item").length > i) {
                    $("#dvFastForms .ff-page-bread .ff-page-bread-item:eq(" + i + ")").attr("data-pagenumber", i);
                    $("#dvFastForms .ff-page-bread .ff-page-bread-item:eq(" + i + ")").bind("click", function() {
                        FFSetPage($(this).attr("data-pagenumber"))
                    })
                }
                i++
            })
        }
    }
    var lastBreadWidth;
    var lastFormWidth;
    var i = 0;

    function SetBreadcrumbWidth(forceUpdate) {
        if ($(".ff-page-bread-item").eq(0).width() != lastBreadWidth || forceUpdate) {
            lastBreadWidth = $(".ff-page-bread-item").eq(0).width();
            var totalWidth = 0;
            $("#dvFastForms .ff-page-bread-item:visible").each(function() {
                totalWidth += $(this).width() + 30
            });
            $(".ff-page-bread").width(totalWidth)
        }
        if ($(".ff-page-bread-wrapper").width() != lastFormWidth || forceUpdate) {
            var prevBtnWidth = $(".ff-page-bread-prev").outerWidth();
            var nextBtnWidth = $(".ff-page-bread-next").outerWidth();
            var newWidth = $(".ff-page-bread-wrapper").parent().parent().outerWidth() - prevBtnWidth - nextBtnWidth - 5;
            lastFormWidth = newWidth;
            $(".ff-page-bread-wrapper").width(newWidth);
            ShowHideBreadcrumbNav()
        }
        setTimeout(SetBreadcrumbWidth, 100)
    }

    function InitializeFooter() {
        if (!$("#dvFastForms #btnsubmit").length) {
            var ffFooterGroup = $('<div class="ff-footer-group"></div>');
            var ffFooterRow = $('<div class="ff-item-row ff-footer-row"></div>');
            var ffSubmitDiv = $('<div class="ff-submit-btn">');
            var footnoteDiv = $('<div class="footnoteDiv"></div>');
            var requiredSpan = $('<span class="requiredSpan  ff-footnote ff-required-mark">*</span>');
            var ffFootnoteLabel = $('<label class="ff-footnote-label">- required</label>');
            var btnDiv = $('<div class="btnDiv">');
            var btnSubmit = $('<input type="button" class="sectionHeader ff-btn-submit" id="btnsubmit">');
            $(btnSubmit).attr("value", $("#dvFastForms #submitBtnText").val());
            $(btnSubmit).attr("data-btnmessage", $("#dvFastForms #submitMessage").val());
            $(btnSubmit).attr("data-btnurl", $("#dvFastForms #submitUrl").val());
            $(btnDiv).append(btnSubmit);
            if ($("#dvFastForms #saveForLaterEnabled").val().toLowerCase() == "true") {
                var btnDiscard = $('<input type="button" class="sectionHeader ff-btn-submit" id="btndiscard">');
                $(btnDiscard).attr("value", $("#dvFastForms #discardBtnText").val());
                $(btnDiv).prepend(btnDiscard);
                if ($("#dvFastForms #isDraft").val().toLowerCase() != "true") {
                    $(btnDiscard).hide()
                }
                var btnSave = $('<input type="button" class="sectionHeader ff-btn-submit" id="btnsave">');
                $(btnSave).attr("value", $("#dvFastForms #saveBtnText").val());
                $(btnDiv).prepend(btnSave)
            }
            $(footnoteDiv).append(requiredSpan);
            $(footnoteDiv).append(ffFootnoteLabel);
            $(ffSubmitDiv).append(footnoteDiv);
            $(ffSubmitDiv).append(btnDiv);
            $(ffFooterRow).append(ffSubmitDiv);
            $(ffFooterGroup).append(ffFooterRow);
            $("#dvFastForms .ff-form-main").append(ffFooterGroup);
            $("#btnsubmit").bind("click", function() {
                console.log("INFO [SubmitData]");
                SubmitData(false)
            });
            if ($("#dvFastForms #saveForLaterEnabled").val().toLowerCase() == "true") {
                $("#btnsave").bind("click", function() {
                    SubmitData(true)
                });
                $("#btndiscard").bind("click", function() {
                    DiscardDraft()
                })
            }
        }
    }

    function AddLegacyAttributesToPageRootElements() {
        $("#dvFastForms .ff-page-row").each(function(indx, elem) {
            console.log("ELEMENT FF :" + $(elem));
            if ($(elem).attr("page-ishidden") === undefined && $(elem).attr("data-page-ishidden") === undefined) {
                console.log("elem:" + $(elem).attr("id"));
                $(elem).attr("data-page-ishidden", false)
            }
        })
    }

    function InitializePages() {
        if ($("#dvFastForms #multipageEnabled").val().toLowerCase() == "true") {
            AddLegacyAttributesToPageRootElements();
            var allVisiblePages = allFormPagesWithLegacyCheck(null, true, false);
            var startPage = $(allVisiblePages).filter(":first");
            $(allVisiblePages).filter(":not(:first)").hide();
            $("#dvFastForms .ff-page-row").filter("[page-ishidden=true],[data-page-ishidden=true]").hide();
            var btnPrev = $('<input type="button" class="sectionHeader ff-btn-submit ff-btn-prev" id="btnprev">');
            var btnNext = $('<input type="button" class="sectionHeader ff-btn-submit ff-btn-next" id="btnnext">');
            $(btnPrev).val($("#dvFastForms #prevBtnText").val());
            $(btnNext).val($("#dvFastForms #nextBtnText").val());
            $("#dvFastForms .btnDiv").append(btnPrev);
            $("#dvFastForms .btnDiv").append(btnNext);
            $("#dvFastForms #btnprev").hide();
            $("#dvFastForms #btnnext").hide();
            $("#dvFastForms #btnprev").bind("click", function() {
                console.log("INFO [FFPrevPage]");
                FFPrevPage()
            });
            $("#dvFastForms #btnnext").bind("click", function() {
                console.log("INFO [FFNextPage]");
                FFNextPage()
            });
            var numPages = $(allVisiblePages).length;
            if (numPages > 1) {
                $("#dvFastForms #btnsubmit").hide();
                $("#dvFastForms #btnnext").show()
            }
        } else {
            $("#dvFastForms .ff-page-bread-header").remove();
            $("#dvFastForms .ff-page-header-row").remove()
        }
    }
    window.ShowHideBreadcrumbNav = function ShowHideBreadcrumbNav() {
        if ($(".ff-page-bread-wrapper").scrollLeft() + $(".ff-page-bread-wrapper").width() >= $(".ff-page-bread").width()) {
            $(".ff-page-bread-next").css("visibility", "hidden")
        } else {
            $(".ff-page-bread-next").css("visibility", "visible")
        }
        if ($(".ff-page-bread-wrapper").scrollLeft() <= 3) {
            $(".ff-page-bread-prev").css("visibility", "hidden")
        } else {
            $(".ff-page-bread-prev").css("visibility", "visible")
        }
    };
    window.FFMoveBreadcrumbRight = function FFMoveBreadcrumbRight() {
        $(".ff-page-bread-wrapper").scrollLeft($(".ff-page-bread-wrapper").scrollLeft() + $(".ff-page-bread-wrapper").width());
        $(".ff-page-bread-prev").css("visibility", "visible");
        ShowHideBreadcrumbNav()
    };
    window.FFMoveBreadcrumbLeft = function FFMoveBreadcrumbLeft() {
        $(".ff-page-bread-wrapper").scrollLeft($(".ff-page-bread-wrapper").scrollLeft() - $(".ff-page-bread-wrapper").width());
        $(".ff-page-bread-next").css("visibility", "visible");
        ShowHideBreadcrumbNav()
    };
    window.FFPrevPage = function FFPrevPage() {
        var allVisiblePages = allFormPagesWithLegacyCheck(null, true, false);
        var numPages = $(allVisiblePages).length;
        var currPageNum = $(allVisiblePages).index($(allVisiblePages).filter(":visible:first"));
        console.log("[FFPrevPage]: current page-" + currPageNum);
        FFSetPage(currPageNum - 1)
    };
    window.FFNextPage = function FFNextPage() {
        var allVisiblePages = allFormPagesWithLegacyCheck(null, true, false);
        var numPages = $(allVisiblePages).length;
        var currPageNum = $(allVisiblePages).index($(allVisiblePages).filter(":visible:first"));
        console.log("[FFNextPage]: current page-" + currPageNum);
        FFSetPage(currPageNum + 1)
    };
    window.FFSetPage = function FFSetPage(pageNum, skipValidation) {
        var pageValid = true;
        if ($("#dvFastForms #pageValType").val() == "page" && !skipValidation) {
            ResetValidation();
            formValid = true;
            ValidateFields();
            pageValid = formValid
        }
        if (pageValid == true) {
            ScrollToTop();
            $("#dvFastForms .ff-page-bread-item").removeClass("item-selected");
            var breadElem = $('#dvFastForms .ff-page-bread-item:not(".ff-page-bread-next"):not(".ff-page-bread-prev"):visible').eq(pageNum);
            if ($(breadElem).length > 0) {
                $(breadElem).addClass("item-selected");
                $(".ff-page-bread-wrapper").scrollTo($(breadElem));
                ShowHideBreadcrumbNav()
            }
            var allVisiblePages = allFormPagesWithLegacyCheck(null, true, false);
            var numPages = $(allVisiblePages).length;
            var pageToSet = $(allVisiblePages).eq(pageNum);
            $(allVisiblePages).hide();
            $(pageToSet).show();
            if (pageNum == numPages - 1) {
                $("#dvFastForms #btnnext").css("display", "none");
                $("#dvFastForms #btnsubmit").css("display", "inline-block")
            } else {
                if (pageNum == 0) {
                    $("#dvFastForms #btnprev").css("display", "none")
                }
            }
            SetPageButtons();
            InitializeIframe()
        }
    };

    function allFormPagesWithLegacyCheck(formPages, visibleOnly, firstVisible) {
        if (formPages === undefined || formPages === null) {
            formPages = $("#dvFastForms .ff-page-row")
        }
        if (visibleOnly !== undefined && visibleOnly) {
            formPages = $(formPages).filter("[page-ishidden!=true][data-page-ishidden!=true]")
        }
        if (firstVisible !== undefined && firstVisible) {
            formPages = $(formPages).filter(":visible:first")
        }
        return formPages
    }

    function SetPageButtons() {
        var allVisiblePages = allFormPagesWithLegacyCheck(null, true, false);
        var numPages = $(allVisiblePages).length;
        var currPageNum = $(allVisiblePages).index($(allVisiblePages).filter(":visible:first")) + 1;
        console.log("[SetPageButtons]  : currPageNum- " + currPageNum + " numPages-" + numPages);
        if (numPages == 1) {
            $("#dvFastForms #btnnext").css("display", "none");
            $("#dvFastForms #btnprev").css("display", "none");
            $("#dvFastForms #btnsubmit").css("display", "inline-block")
        } else {
            if (currPageNum == numPages) {
                $("#dvFastForms #btnnext").css("display", "none");
                $("#dvFastForms #btnprev").css("display", "inline-block");
                $("#dvFastForms #btnsubmit").css("display", "inline-block")
            } else {
                if (currPageNum == 1) {
                    $("#dvFastForms #btnnext").css("display", "inline-block");
                    $("#dvFastForms #btnprev").css("display", "none");
                    $("#dvFastForms #btnsubmit").css("display", "none")
                } else {
                    $("#dvFastForms #btnprev").css("display", "inline-block");
                    $("#dvFastForms #btnnext").css("display", "inline-block");
                    $("#dvFastForms #btnsubmit").css("display", "none")
                }
            }
        }
    }

    function InitializePayment() {
        if (document.location.protocol != "https:" && !$("#dvFastForms .ff-payment-wrapper").hasClass("ff-test-mode")) {
            $("#dvFastForms .ff-payment-wrapper").remove()
        } else {
            $("#dvFastForms .ff-yyyy").each(function() {
                var currYear = (new Date).getFullYear();
                for (var i = 0; i < 15; i++) {
                    $(this).append($("<option>", {
                        value: currYear + i
                    }).text(currYear + i))
                }
            });
            $("#dvFastForms .ff-mm").each(function() {
                for (var i = 1; i <= 12; i++) {
                    if (i < 10) {
                        $(this).append($("<option>", {
                            value: "0" + i
                        }).text("0" + i))
                    } else {
                        $(this).append($("<option>", {
                            value: i
                        }).text(i))
                    }
                }
            });
            $("#dvFastForms .ff-creditcard").blur(function() {
                ShowCardType(this)
            });
            $("#dvFastForms .ff-taxes").each(function() {
                var fieldNum = $(this).attr("id").replace("FFTaxes", "");
                var subtotalVal = ToAmount($("#FFAmount" + fieldNum).text());
                var taxVal = ToAmount($(this).data("taxes"));
                $(this).text(ToAmount(subtotalVal * (taxVal / 100)))
            });
            UpdatePaymentTotals()
        }
    }

    function ShowCardType(elem) {
        var cardType = "";
        $(elem).parent().find(".imgCardType").remove();
        var re = new RegExp("^4");
        if ($(elem).val().match(re) != null) {
            cardType = "visa"
        }
        re = new RegExp("^5[1-5]");
        if ($(elem).val().match(re) != null) {
            cardType = "mastercard"
        }
        re = new RegExp("^3[47]");
        if ($(elem).val().match(re) != null) {
            cardType = "amex"
        }
        re = new RegExp("^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)");
        if ($(elem).val().match(re) != null) {
            cardType = "discover"
        }
        re = new RegExp("^36");
        if ($(elem).val().match(re) != null) {
            cardType = "diners"
        }
        re = new RegExp("^30[0-5]");
        if ($(elem).val().match(re) != null) {
            cardType = "diners"
        }
        re = new RegExp("^35(2[89]|[3-8][0-9])");
        if ($(elem).val().match(re) != null) {
            cardType = "jcb"
        }
        re = new RegExp("^(4026|417500|4508|4844|491(3|7))");
        if ($(elem).val().match(re) != null) {
            cardType = "visaelectron"
        }
        if (cardType != "") {
            $(elem).after($("<img>", {
                src: FormBASEURL + "Styles/images/" + cardType + ".png"
            }).addClass("imgCardType"))
        }
    }

    function InitializeLookupFields() {
        $("#dvFastForms .ff-group-row>.ff-item-row .lookup-link").each(function() {
            $(this).removeAttr("onclick");
            ResetLookupFieldEvent(this)
        })
    }

    function ResetLookupFieldEvent(lookupElemLink) {
        $(lookupElemLink).bind("click", function() {
            openLookupPopup(this)
        })
    }
    var ff_SectionRepeatMinCount = 1;
    var ff_SectionRepeatMaxCount = 100;

    function InitializeRepeatableSections() {
        $("#dvFastForms .ff-sec-repeat-wrapper").parent().each(function(index, parentRepeatElem) {
            $(parentRepeatElem).find(".ff-sec-repeat-wrapper").each(function(rindex, repeatElem) {
                if (isNullOrEmpty($("#dvFastForms #txtUserContentId").val()) && $(repeatElem).find("div[data-rid]").length == 0) {
                    SetRepeatableSectionIDs(repeatElem, rindex + 1, true);
                    ResetRepeatedSectionItem(repeatElem, true)
                } else {
                    SetRepeatableSectionIDs(repeatElem, rindex + 1, true);
                    ResetRepeatedSectionItem(repeatElem, true)
                }
            });
            var minItems = safeInt($(parentRepeatElem).data("min"), ff_SectionRepeatMinCount);
            var initialCount = 1;
            if ($(parentRepeatElem).find(".ff-sec-repeat-wrapper").length > 1) {
                initialCount = $(parentRepeatElem).find(".ff-sec-repeat-wrapper").length
            }
            for (var i = initialCount; i < minItems; i++) {
                AddToRepeatableSection($(parentRepeatElem).find(".ff-sec-repeat-wrapper").last().find("a.ff-add"))
            }
            var numItems = $(parentRepeatElem).find(".ff-sec-repeat-wrapper").length;
            if (numItems === minItems) {
                $(parentRepeatElem).find(".ff-sec-repeat-wrapper").last().find("a.ff-remove,.link-divider").hide()
            }
        })
    }

    function SetRepeatableSectionIDs(repeatElem, num, init) {
        console.log("resetting repeated section ids");
        if ($("#dvFastForms #isDraft").val().toLowerCase() != "true" || init != true) {
            $(repeatElem).find('.ff-item-row  .ff-col-2>input,.ff-item-row  .ff-col-2>textarea,.ff-item-row  .ff-col-2>select,.ff-item-row  .ff-col-2>a.lookup-link,.ff-item-row div[data-vatt="CAPTCHA"]').each(function() {
                var resetId = false;
                if (isNullOrEmpty($(this).parents(".ff-sec-repeat-wrapper").attr("data-rid"))) {
                    resetId = true
                }
                var inputId = $(this).attr("id");
                var inputName = $(this).attr("name");
                var label = $(this).parent().parent().find("label[for='" + inputId + "']");
                var newId = inputId;
                var arr = inputId.split(".");
                if (arr.length == 4) {
                    arr[2] = arr[2][0] + "_" + num + "_";
                    newId = arr.join(".")
                } else {
                    if (arr.length == 1) {
                        arr = inputId.split("__");
                        newId = arr[0] + "__" + num
                    }
                }
                if (resetId) {
                    $(this).attr("id", newId);
                    $(this).attr("name", newId);
                    $(label).attr("for", newId);
                    $(label).attr("id", $(label).attr("id") + "_" + num)
                }
            });
            if ($(repeatElem).find(".ff-esignature-wrapper").length >= 1) {
                $(repeatElem).find(".ff-esignature-wrapper").each(function(indx, signWrapElement) {
                    assignSignatureElementIds(signWrapElement, num);
                    InitializeSignatureElement(signWrapElement)
                })
            }
        }
        var repeatElemParent = $(repeatElem).parent();
        var addLinkText = ff_AddAnotherSectionLink;
        var removeLinkText = ff_RemoveSectionLink;
        if (!isNullOrEmpty($(repeatElemParent).attr("data-addlink"))) {
            addLinkText = $(repeatElemParent).attr("data-addlink")
        }
        if (!isNullOrEmpty($(repeatElemParent).attr("data-removelink"))) {
            removeLinkText = $(repeatElemParent).attr("data-removelink")
        }
        $(repeatElem).find(".rsec-footer-row").remove();
        $(repeatElem).append(getRepeatableSectionFooterHTML(addLinkText, removeLinkText));
        resetAddRemoveLinksForRepeatedSections(repeatElem, false)
    }

    function resetAddRemoveLinksForRepeatedSections(repeatElem, isParentElem) {
        var targetElem = $(repeatElem);
        if (!isParentElem) {
            targetElem = $(repeatElem).parent()
        }
        var maxItems = safeInt($(targetElem).data("max"), ff_SectionRepeatMaxCount);
        var minItems = safeInt($(targetElem).data("min"), 1);
        var currNumItems = $(targetElem).find(".ff-sec-repeat-wrapper").length;
        $(targetElem).find(".ff-sec-repeat-wrapper").find(".ff-add,.link-divider").hide();
        if ($(targetElem).find(".ff-sec-repeat-wrapper").length > 1) {
            $(targetElem).find(".ff-sec-repeat-wrapper").each(function(rindx, repElem) {
                if (rindx >= minItems) {
                    $(repElem).find(".ff-remove").show()
                } else {
                    $(repElem).find(".ff-remove").hide();
                    $(repElem).find(".link-divider").hide()
                }
            })
        }
        if (currNumItems < maxItems) {
            $(targetElem).find(".ff-sec-repeat-wrapper:last-child").find(".ff-add,.link-divider").removeAttr("style");
            if (!$(targetElem).find(".ff-sec-repeat-wrapper:last-child").find(".ff-remove").is(":visible")) {
                $(targetElem).find(".ff-sec-repeat-wrapper:last-child").find(".link-divider").hide()
            }
        }
        if (currNumItems <= minItems) {
            $(targetElem).find(".ff-sec-repeat-wrapper").find(".ff-remove").hide();
            $(targetElem).find(".ff-sec-repeat-wrapper").find(".link-divider").hide()
        }
    }
    window.AddToRepeatableSection = function AddToRepeatableSection(elemSource, init) {
        var section = $(elemSource).parents(".ff-sec-repeat-wrapper");
        var maxItems = safeInt($(section).parent().data("max"), ff_SectionRepeatMaxCount);
        var minItems = safeInt($(section).parent().data("min"), 1);
        var currNumItems = $(section).parent().find(".ff-sec-repeat-wrapper").length;
        if (maxItems == "" || currNumItems < maxItems) {
            var lastItem = $(section).parent().find(".ff-sec-repeat-wrapper").eq(currNumItems - 1);
            var newItem = $(lastItem).clone().appendTo($(section).parent());
            if ($(newItem).find(".ff-esignature-wrapper").length > 0) {
                clearSignatureCanvas($(newItem).find(".ff-signwrapper.ff-drawn .doc-sign-name"));
                clearSignatureCanvas($(newItem).find(".ff-signwrapper.ff-drawn .doc-sign-date"));
                clearSignatureCanvas($(newItem).find(".ff-signwrapper.ff-typed .doc-sign-name"));
                clearSignatureCanvas($(newItem).find(".ff-signwrapper.ff-typed .doc-sign-date"));
                $(newItem).find(".docsignWrapper .typedSignName").html("");
                $(newItem).find(".docsignWrapper .typedSignDate").html("");
                $(newItem).find(".docsignWrapper .ffsignature").val("");
                $(newItem).find(".docsignWrapper .ffdate").val("")
            }
            if (init === undefined) {
                $(newItem).removeAttr("data-rid");
                $(newItem).removeAttr("data-rval")
            }
            SetRepeatableSectionIDs($(section).parent().find(".ff-sec-repeat-wrapper").last(), currNumItems + 1, false);
            ResetRepeatedSectionItem($(section).parent().find(".ff-sec-repeat-wrapper").last(), false);
            currNumItems++
        }
        if (currNumItems > minItems) {
            $(section).parent().find(".ff-sec-repeat-wrapper").each(function(dindx, ritem) {
                if (minItems < (dindx + 1)) {
                    $(ritem).find(".ff-remove").show()
                } else {
                    $(ritem).find(".ff-remove").hide()
                }
            })
        }
        InitializeIframe()
    };

    function clearSignatureCanvas(elem) {
        if (elem !== undefined) {
            try {
                $(elem).signaturePad().clearCanvas()
            } catch (err) {}
        }
    }
    window.RemoveFromRepeatableSection = function RemoveFromRepeatableSection(elemSource) {
        var section = $(elemSource).parents(".ff-sec-repeat-wrapper");
        var minItems = safeInt($(section).parent().data("min"), ff_SectionRepeatMinCount);
        var currNumItems = $(section).parent().find(".ff-sec-repeat-wrapper").length;
        var parentElem = $(section).parent();
        if ((minItems == "" || currNumItems > minItems) && currNumItems > 1) {
            $(section).remove();
            $(parentElem).find(".ff-sec-repeat-wrapper").each(function(rindex, repeatElem) {
                SetRepeatableSectionIDs(repeatElem, rindex + 1, true)
            })
        }
        BindRepeatedSectionEvents(parentElem);
        InitializeIframe()
    };

    function BindRepeatedSectionEvents(repeatElem) {
        $(repeatElem).find(".lookup-link").each(function() {
            $(this).removeAttr("onclick");
            $(this).unbind("click");
            ResetLookupFieldEvent(this)
        });
        $(repeatElem).find("input[data-rules],select[data-rules]").each(function() {
            if ($(this).attr("change") === undefined) {
                $(this).unbind("change");
                $(this).bind("change", function() {
                    var rules = $(this).attr("data-rules");
                    var ruleArr = rules.split(",").map(function(item) {
                        return parseInt(item, 10)
                    });
                    console.log("[EvaluateInlineARR]:" + ruleArr);
                    evaluateRules(ruleArr, this)
                })
            }
        });
        $(repeatElem).find(".ff-alink").each(function(indx, item) {
            $(this).removeAttr("onclick");
            $(this).unbind("click");
            if ($(item).hasClass("ff-remove")) {
                $(this).bind("click", function() {
                    RemoveFromRepeatableSection(this)
                })
            } else {
                $(this).bind("click", function() {
                    AddToRepeatableSection(this)
                })
            }
        })
    }

    function getRepeatableSectionFooterHTML(addtext, removetext) {
        return '<div class="ff-item-row rsec-footer-row"><a class="ff-alink ff-remove" href="javascript:" title="' + removetext + '">' + removetext + '</a><span class="link-divider">/</span><a class="ff-alink ff-add" href="javascript:" title="' + addtext + '">' + addtext + "</a></div>"
    }
    window.ReRenderCalendar = function ReRenderCalendar(elem) {
        if ($(elem).attr("data-vatt") != undefined && ($(elem).attr("data-vatt").toLowerCase() == "datetime" || $(elem).attr("data-vatt").toLowerCase() == "date")) {
            RenderCalendar(elem)
        }
    };
    window.ResetRepeatedSectionItem = function ResetRepeatedSectionItem(repeatElem, initialLoad) {
        $(repeatElem).find(".ff-item-row .ff-col-2>input,.ff-item-row .ff-col-2>textarea,.ff-item-row .ff-col-2>select").each(function() {
            var elementVisible = false;
            if ($(this).parent().parent().css("display") != "none") {
                elementVisible = true
            }
            switch ($(this).prop("type")) {
                case "file":
                    if ($("#dvFastForms #isDraft").val().toLowerCase() != "true" && isNullOrEmpty($("#dvFastForms #txtUserContentId").val())) {
                        clearFileElements(this)
                    }
                    break;
                case "text":
                case "textbox":
                case "textarea":
                    $(this).parent().find(".custom-flex-control-container").remove();
                    $(this).parent().find(".select2-container").remove();
                    ReRenderCalendar(this);
                    initFlexControl(this, false);
                    break;
                case "radio":
                case "checkbox":
                    break;
                case "select-one":
                    $(this).parent().find(".custom-flex-control-container").remove();
                    $(this).parent().find(".select2-container").remove();
                    initFlexControl(this, false);
                    break;
                case "select-multiple":
                    $(this).parent().find(".custom-flex-control-container").remove();
                    $(this).parent().find(".select2-container").remove();
                    initFlexControl(this, false);
                    break
            }
        });
        $(repeatElem).find("div[name=FileUploadLabel]").remove();
        if (!initialLoad) {
            if ($(repeatElem).find("div[data-vatt='CAPTCHA']").length >= 1) {
                var recaptchaSiteKey = $("#recaptchaSiteKey").val();
                $(repeatElem).find(".ff-captcha").each(function(indx, colItem) {
                    $(colItem).find('div[data-vatt="CAPTCHA"]').find(">div").first().remove();
                    var cId = $(colItem).find('div[data-vatt="CAPTCHA"]').attr("id");
                    grecaptcha.render(cId, {
                        sitekey: recaptchaSiteKey,
                        callback: verifyCallback
                    })
                })
            }
        }
        BindRepeatedSectionEvents(repeatElem)
    };

    function setSignatureElementIdWithIndx(elemSource, elemIndx, prefix) {
        if (!isNullOrEmpty($(elemSource).attr("id"))) {
            var currentAttr = $(elemSource).attr("id").split("__")[0];
            currentAttr = currentAttr.replace(prefix, "");
            $(elemSource).attr("id", prefix + currentAttr + "__" + elemIndx)
        }
    }

    function setSignatureElementNameWithIndx(elemSource, elemIndx, prefix) {
        if (!isNullOrEmpty($(elemSource).attr("name"))) {
            var currentAttr = $(elemSource).attr("name").split("__")[0];
            currentAttr = currentAttr.replace(prefix, "");
            $(elemSource).attr("name", prefix + currentAttr + "__" + elemIndx)
        }
    }

    function assignSignatureElementIds(parentElement, signatureIndex) {
        setSignatureElementIdWithIndx($(parentElement).find(".main-docsign-wrapper"), signatureIndex, "");
        setSignatureElementIdWithIndx($(parentElement).find(">input"), signatureIndex, "");
        setSignatureElementIdWithIndx($(parentElement).find(".main-docsign-wrapper .ff-chkagree input"), signatureIndex, "");
        setSignatureElementIdWithIndx($(parentElement).find(".main-docsign-wrapper .ff-email-verification .ff-col-2 .ff-type-text"), signatureIndex, "");
        $(parentElement).find(".ff-signwrapper").each(function(ind, signElement) {
            var signoptclass = "signT";
            if ($(signElement).hasClass("ff-drawn")) {
                signoptclass = "signD"
            }
            setSignatureElementIdWithIndx($(signElement).find(".docsignWrapper .ffsignature"), signatureIndex, signoptclass);
            setSignatureElementIdWithIndx($(signElement).find(".docsignWrapper .ffdate"), signatureIndex, signoptclass);
            setSignatureElementIdWithIndx($(signElement).find(".docsignWrapper .outputSignedName"), signatureIndex, signoptclass);
            setSignatureElementIdWithIndx($(signElement).find(".docsignWrapper .outputSignedDate"), signatureIndex, signoptclass);
            setSignatureElementNameWithIndx($(signElement).find(".docsignWrapper .ffsignature"), signatureIndex, signoptclass);
            setSignatureElementNameWithIndx($(signElement).find(".docsignWrapper .ffdate"), signatureIndex, signoptclass);
            setSignatureElementNameWithIndx($(signElement).find(".docsignWrapper .outputSignedName"), signatureIndex, signoptclass);
            setSignatureElementNameWithIndx($(signElement).find(".docsignWrapper .outputSignedDate"), signatureIndex, signoptclass)
        })
    }

    function safeInt(intValue, defaultValue) {
        if (!isNaN(parseInt(intValue))) {
            return parseInt(intValue)
        }
        return defaultValue
    }

    function GetHTML(htmlFrame) {
        var submittedData = null;
        if ($("#submittedData").length) {
            submittedData = $("#submittedData").val()
        }($).support.cors = true;
        if (window.XDomainRequest) {
            var xdr = new XDomainRequest();
            if (window.location.protocol == "http:" && htmlFrame.lastIndexOf("https:", 0) === 0) {
                htmlFrame = htmlFrame.replace("https:", "http:")
            }
            xdr.open("post", htmlFrame);
            xdr.onload = function() {
                $("#dvFastForms").html(xdr.responseText);
                InitializeForm();
                InitializeCaptcha()
            };
            xdr.send(submittedData)
        } else {
            if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                console.log("[GetHTML][IE11-SF][XMLHttpRequest]");
                var oReq = null;
                if (Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", htmlFrame, true);
                oReq.onreadystatechange = function() {
                    if (oReq.readyState == 4 && oReq.status == 200) {
                        if (oReq.responseText && oReq.responseText.length > 0) {
                            $("#dvFastForms").html(oReq.responseText);
                            InitializeForm();
                            InitializeCaptcha()
                        } else {
                            console.log(" Service call exception" + oReq.responseText)
                        }
                    } else {
                        if (oReq.readyState == 4 && oReq.status != 200) {
                            console.log(" Service call status:" + oReq.status)
                        }
                    }
                };
                oReq.send(submittedData)
            } else {
                ($).ajax({
                    async: true,
                    global: false,
                    data: submittedData,
                    type: "POST",
                    url: htmlFrame,
                    tryCount: 0,
                    retryLimit: 3,
                    context: document.body,
                    success: function(responseText) {
                        $("#dvFastForms").html(responseText);
                        InitializeForm();
                        InitializeCaptcha()
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        if (textStatus == "timeout") {
                            this.tryCount++;
                            if (this.tryCount <= this.retryLimit) {
                                ($).ajax(this);
                                return
                            }
                            return
                        }
                    }
                })
            }
        }
    }

    function HandlePostMessage(e) {
        if (e.originalEvent.origin === FormBASEURL.replace("/FormEngine/", "")) {
            var data = e.originalEvent.data || e.originalEvent.message;
            var json = $.parseJSON(data);
            switch (json.resultType) {
                case "CheckCaptcha":
                    formValid = true;
                    ResetValidation();
                    ValidateCaptcha(json.resultData);
                    ValidateFields(true);
                    if (formValid) {
                        if ($("#dvFastForms .ff-payment-wrapper").length > 0 && $("#dvFastForms .ff-creditcard").filter(function() {
                                return this.value.length > 0
                            }).length > 0) {
                            $("#dvFastForms form#form1").attr("action", FormBASEURL + "EngineFrame/CheckPayment");
                            $("#dvFastForms form#form1").trigger("submit")
                        } else {
                            $("#ffOverlay").removeClass("ff-overlay-image");
                            PostFormData()
                        }
                    } else {
                        $("#ffOverlay").removeClass("ff-overlay-image")
                    }
                    break;
                case "CheckPayment":
                    formValid = true;
                    ValidatePayment(json.resultData);
                    if (formValid) {
                        $("#ffOverlay").removeClass("ff-overlay-image");
                        PostFormData()
                    } else {
                        $("#ffOverlay").removeClass("ff-overlay-image")
                    }
                    break;
                case "GenerateCaptcha":
                    RenderCaptcha(json.resultData);
                    break;
                case "FileUpload":
                    ValidateFileUploads(json.resultData);
                    break;
                case "Lookup":
                    PopulateLookup(json);
                    break;
                default:
            }
        }
    }
    window.PopulateLookup = function PopulateLookup(json) {
        if (json.selectedId != undefined && json.sourceField != undefined) {
            LogEvent("SELECTED_LOOKUP_VALUE", "");
            $("#dvFastForms #" + json.sourceField.replace(/\./g, "\\.")).val(json.selectedId);
            $("#dvFastForms #input" + json.sourceField.replace(/\./g, "\\.")).val(json.selectedName);
            $("#dvFastForms #" + json.sourceField.replace(/\./g, "\\.")).trigger("change")
        }
    };

    function RemoveFile(file, id) {
        ($).support.cors = true;
        var result = false;
        var removeUrl = FormBASEURL + "EngineFrame/RemoveFile";
        if (window.location.protocol == "http:" && removeUrl.lastIndexOf("https:", 0) === 0) {
            removeUrl = removeUrl.replace("https:", "http:")
        }
        if (window.XDomainRequest) {
            var xdr = new XDomainRequest();
            xdr.open("POST", removeUrl, true);
            xdr.send("fileName=" + file + "&sessionId=" + id)
        } else {
            if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                console.log("[RemoveFile][IE11-SF][XMLHttpRequest]");
                var oReq = null;
                if (Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", removeUrl, true);
                oReq.onreadystatechange = function() {
                    if (oReq.readyState == 4 && oReq.status == 200) {
                        if (oReq.responseText && oReq.responseText.length > 0) {
                            result = oReq.responseText
                        } else {
                            console.log(" Service call exception" + oReq.responseText)
                        }
                    } else {
                        if (oReq.readyState == 4 && oReq.status != 200) {
                            console.log(" Service call status:" + oReq.status)
                        }
                    }
                };
                oReq.send("fileName=" + file + "&sessionId=" + id)
            } else {
                ($).ajax({
                    global: false,
                    type: "POST",
                    url: removeUrl,
                    crossDomain: true,
                    data: "fileName=" + file + "&sessionId=" + id,
                    dataType: "text",
                    processData: false,
                    tryCount: 0,
                    retryLimit: 3,
                    success: function(responseText) {
                        result = responseText
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        if (textStatus == "timeout") {
                            this.tryCount++;
                            if (this.tryCount <= this.retryLimit) {
                                ($).ajax(this);
                                return
                            }
                            return
                        }
                    }
                });
                return result
            }
        }
    }

    function CheckFileUploadLimits(area) {
        var maxUploads = $(area).data("maxfiles");
        var currentNumUploads = $(area).find("[id$='_Label']").length;
        if (currentNumUploads >= maxUploads) {
            $(area).find("[id$='_Select']").hide()
        } else {
            $(area).find("[id$='_Select']").show()
        }
    }
    window.ValidateFileUploads = function ValidateFileUploads(json) {
        ResetValidation();
        var fileArea;
        var uploadSucceeded = false;
        $.each(json.results, function(index, value) {
            var fileElement = $("#dvFastForms #" + value.elementID);
            fileArea = $(fileElement).closest(".ff-fileupload-drop-area");
            var numFiles = $(fileArea).find("[id$='_Label']").length;
            if (value.message == "Success") {
                var fileExtension = value.fileName.substring(value.fileName.lastIndexOf("."));
                var allowedFileTypes = "";
                if ($(fileArea).data("allowedfiletypes") != null) {
                    allowedFileTypes = $(fileArea).data("allowedfiletypes")
                }
                if (allowedFileTypes != "" && $.inArray(fileExtension, allowedFileTypes.split(",")) == -1) {
                    ShowValidationMessage(fileArea, "FILETYPE", allowedFileTypes);
                    RemoveFile(value.fileName, $("#dvFastForms #txtSessionID").val())
                } else {
                    fileArea.prepend('<div name="FileUploadLabel" id="' + value.elementID + numFiles + '_Label"><a title="Remove" href="" id="' + value.elementID + numFiles + '_Remove"><img src="' + FormBASEURL + 'Styles/images/remove.png" title="Remove" border="0" /></a>&nbsp;<label style="font-weight:bold">' + value.fileName + "</label></div>");
                    $("#" + value.elementID + numFiles + "_Remove").click(function(event) {
                        event.preventDefault();
                        RemoveFile(value.fileName, $("#dvFastForms #txtSessionID").val());
                        $("#" + value.elementID + numFiles + "_Label").remove();
                        CheckFileUploadLimits(fileArea);
                        return false
                    });
                    uploadSucceeded = true;
                    CheckFileUploadLimits(fileArea);
                    fileElement.replaceWith(fileElement = fileElement.val("").clone(true))
                }
            } else {
                if (value.message == "MaxSizeExceeded") {
                    ShowValidationMessage(fileArea, "FILESIZE")
                } else {
                    if (value.message == "MaxRequestLengthExceeded") {
                        ShowValidationMessage(fileArea, "FILESIZE", "", true)
                    }
                }
            }
        })
    };

    function InitializeFileUpload() {
        $("#dvFastForms .ff-fileupload-drop-area").each(function() {
            var fileArea = $(this);
            var fileUpload = $(this).find(":file");
            if (isOlderBrowser()) {
                $(fileUpload).change(function(event) {
                    VALog("[InitializeFileUpload][IE8][change]");
                    $("#ffOverlay").addClass("ff-overlay-image");
                    $("#dvFastForms form#form1").attr("action", FormBASEURL + "EngineFrame/UploadFile");
                    $("#dvFastForms form#form1").trigger("submit")
                })
            } else {
                $(fileUpload).fileupload({});
                $(fileUpload).fileupload({
                    url: FormBASEURL + "/EngineFrame/UploadFile",
                    autoUpload: true,
                    xhr: function() {
                        var pXHR = null;
                        if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                            console.log("[InitializeFileUpload][IE11-SF][xhr]");
                            if (Sarissa && Sarissa.originalXMLHttpRequest) {
                                pXHR = new Sarissa.originalXMLHttpRequest()
                            } else {
                                if (window.XMLHttpRequest) {
                                    pXHR = new XMLHttpRequest()
                                }
                            }
                        } else {
                            pXHR = $.ajaxSettings.xhr()
                        }
                        return pXHR
                    },
                    dataType: "json",
                    add: function(e, data) {
                        VALog("[InitializeFileUpload][Add]");
                        ResetValidation();
                        var fileSize = data.originalFiles[0]["size"];
                        var allowedFileTypes = $(fileArea).data("allowedfiletypes");
                        var fileName = data.originalFiles[0]["name"];
                        var fileExtension = "";
                        if (fileName != null && fileName.indexOf(".") > -1) {
                            fileExtension = fileName.substring(fileName.lastIndexOf("."))
                        }
                        if (fileSize != null && fileSize > maxFileSize) {
                            ShowValidationMessage(fileArea, "FILESIZE")
                        } else {
                            if (allowedFileTypes != "" && allowedFileTypes != null && $.inArray(fileExtension, allowedFileTypes.split(",")) == -1) {
                                ShowValidationMessage(fileArea, "FILETYPE", allowedFileTypes)
                            } else {
                                jqXHRData = data;
                                jqXHRData.submit()
                            }
                        }
                    },
                    done: function(event, data) {
                        VALog("[InitializeFileUpload][Done]");
                        var json = $.parseJSON(data.result);
                        ValidateFileUploads(json)
                    },
                    fail: function(event, data) {
                        VALog("[InitializeFileUpload][fail]")
                    }
                })
            }
        })
    }

    function LoadCaptcha(cnt) {
        var captchaUrl = FormBASEURL + "EngineFrame/GenerateCaptcha";
        if (window.XDomainRequest) {
            VALog("[LoadCaptcha][IE][XDomainRequest]");
            var xdr = new XDomainRequest();
            xdr.open("POST", captchaUrl, true);
            xdr.onload = function() {
                VALog("[LoadCaptcha][IE][XDomainRequest]");
                var json = $.parseJSON(xdr.responseText);
                RenderCaptcha(json)
            };
            xdr.send("captchaCnt=" + cnt)
        } else {
            if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                VALog("[LoadCaptcha][IE11-SF][XMLHttpRequest]");
                var oReq = null;
                if (Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", captchaUrl, true);
                oReq.onreadystatechange = function() {
                    if (oReq.readyState == 4 && oReq.status == 200) {
                        if (oReq.responseText && oReq.responseText.length > 0) {
                            VALog("[LoadCaptcha][IE11-SF][XMLHttpRequest][Result]");
                            var json = $.parseJSON(oReq.responseText);
                            json = $.parseJSON(json);
                            RenderCaptcha(json)
                        } else {
                            VALog("Service call exception" + oReq.responseText)
                        }
                    } else {
                        if (oReq.readyState == 4 && oReq.status != 200) {
                            VALog("Service call status:" + oReq.status)
                        }
                    }
                };
                oReq.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                oReq.send("captchaCnt=" + cnt)
            } else {
                ($).ajax({
                    global: false,
                    type: "POST",
                    url: captchaUrl,
                    crossDomain: true,
                    data: "captchaCnt=" + cnt,
                    dataType: "json",
                    cache: false,
                    success: function(data) {
                        var json = $.parseJSON(data);
                        RenderCaptcha(json)
                    },
                    error: function(data) {}
                })
            }
        }
    }

    function RenderCaptcha(json) {
        var i = 0;
        $('#dvFastForms div[data-vatt="CAPTCHA"]').each(function() {
            var id = $(this).attr("id");
            var captchaID = json[i].captchaID;
            var image = json[i].image;
            $("#lbl" + id).attr("for", captchaID + "_Captcha");
            $("#" + id + "_Wrapper").remove();
            $(this).append('<div id="' + id + '_Wrapper" name="' + id + '_Wrapper"><img id="' + id + '_Image" alt="Captcha image" src="data:image/png;base64,' + image + '" /><br /><input type="text" class="ff-input-type ff-type-text" name="' + captchaID + '_Captcha" data-captchaid="' + captchaID + '" data-isrequired="true" id="' + captchaID + '_Captcha" /></div>');
            i++
        });
        InitializeIframe()
    }

    function InitializeCaptcha() {
        var captchaCnt = $('#dvFastForms div[data-vatt="CAPTCHA"]').length;
        if (captchaCnt > 0) {
            if (isOlderBrowser()) {
                $("#dvFastForms #captchaCnt").remove();
                $("#dvFastForms form#form1").prepend('<INPUT name="captchaCnt" id="captchaCnt" type=hidden value="' + captchaCnt + '" />');
                $("#dvFastForms form#form1").attr("action", FormBASEURL + "EngineFrame/GenerateCaptcha");
                $("#dvFastForms form#form1").trigger("submit")
            } else {
                LoadCaptcha(captchaCnt)
            }
        }
    }

    function SendCaptchaToServer() {
        console.log("[FORM][SendCaptchaToServer] Starts..");
        if ($("#dvFastForms .ff-captcha").length > 0) {
            ($).support.cors = true;
            var result = false;
            var validateUrl = FormBASEURL + "EngineFrame/CheckCaptcha";
            var formData = GenerateFormData(false);
            if (window.XDomainRequest) {
                console.log("[SendCaptchaToServer][IE][XDomainRequest]");
                var xdr = new XDomainRequest();
                xdr.open("POST", validateUrl, true);
                xdr.onload = function() {
                    result = xdr.responseText;
                    ValidateCaptcha(result);
                    if (formValid) {
                        SendPaymentToServer()
                    }
                };
                xdr.send(formData)
            } else {
                if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                    console.log("[SendCaptchaToServer][IE11-SF][XMLHttpRequest]");
                    var oReq = null;
                    if (Sarissa && Sarissa.originalXMLHttpRequest) {
                        oReq = new Sarissa.originalXMLHttpRequest()
                    } else {
                        if (window.XMLHttpRequest) {
                            oReq = new XMLHttpRequest()
                        }
                    }
                    oReq.open("POST", validateUrl, true);
                    oReq.onreadystatechange = function() {
                        if (oReq.readyState == 4 && oReq.status == 200) {
                            if (oReq.responseText && oReq.responseText.length > 0) {
                                result = oReq.responseText;
                                console.log("[SendCaptchaToServer][IE11-SF][XMLHttpRequest][result]");
                                console.log(result);
                                var json = $.parseJSON(result);
                                ValidateCaptcha(json);
                                if (formValid) {
                                    SendPaymentToServer()
                                }
                            } else {
                                console.log(" Service call exception" + oReq.responseText)
                            }
                        } else {
                            if (oReq.readyState == 4 && oReq.status != 200) {
                                console.log(" Service call status:" + oReq.status)
                            }
                        }
                    };
                    oReq.send(formData)
                } else {
                    ($).ajax({
                        global: false,
                        type: "POST",
                        crossDomain: true,
                        async: true,
                        url: validateUrl,
                        data: formData,
                        dataType: "json",
                        processData: false,
                        tryCount: 0,
                        retryLimit: 3,
                        success: function(responseText) {
                            result = responseText;
                            ValidateCaptcha(result);
                            if (formValid) {
                                SendPaymentToServer()
                            }
                        },
                        error: function(xhr, textStatus, errorThrown) {
                            $("#dvFastForms #btnsubmit").prop("disabled", false);
                            if (textStatus == "timeout") {
                                this.tryCount++;
                                if (this.tryCount <= this.retryLimit) {
                                    ($).ajax(this);
                                    return
                                }
                                return
                            }
                            if (xhr.status == 500) {} else {}
                        }
                    })
                }
            }
        } else {
            SendPaymentToServer()
        }
    }

    function UnloadWarning() {
        if (enableUnloadWarning) {
            return ffPrompt_PaymentInProcessWarning
        } else {
            return
        }
    }

    function stripeResponseHandler(response) {
        console.log("[FORM] [stripeResponseHandler] Starts..");
        $("#lblFFPAYMENT" + currentPaymentID).find(".ff-creditcard").removeAttr("data-stripe");
        $("#lblFFPAYMENT" + currentPaymentID).find(".ff-cvv").removeAttr("data-stripe");
        $("#lblFFPAYMENT" + currentPaymentID).find(".ff-mm").removeAttr("data-stripe");
        $("#lblFFPAYMENT" + currentPaymentID).find(".ff-yyyy").removeAttr("data-stripe");
        if (response.error) {
            FFShowGeneralError(response.error.message);
            $("#dvFastForms #btnsubmit").prop("disabled", false)
        } else {
            var token = response.id;
            $("#lblFFPAYMENT" + currentPaymentID).append($('<input type="hidden" id="FFPaymentToken' + currentPaymentID + '" name="FFPaymentToken' + currentPaymentID + '">').val(token));
            SendPaymentToServer()
        }
    }
    window.enableUnloadWarning = false;
    window.currentPaymentID = "";

    function SendPaymentToServer() {
        console.log("[FORM] [SendPaymentToServer] Starts..");
        if ($("#dvFastForms .ff-payment-wrapper").length > 0 && $("#dvFastForms .ff-creditcard").filter(function() {
                return this.value.length > 0
            }).length > 0) {
            var paymentReady = false;
            if ($("#dvFastForms #paymentType").val().toLowerCase() == "stripe") {
                $("#dvFastForms .ff-payment-wrapper").each(function() {
                    if ($(this).data("apikey") != null && $(this).data("apikey") != "" && $(this).find(".ff-creditcard").filter(function() {
                            return this.value.length > 0
                        }).length > 0) {
                        currentPaymentID = $(this).attr("id").replace("lblFFPAYMENT", "");
                        var token = $("#FFPaymentToken" + currentPaymentID);
                        if ($("#FFPaymentToken" + currentPaymentID).length) {
                            paymentReady = true
                        } else {
                            var vCC_Number = $(this).find(".ff-creditcard").val();
                            var vCC_CVC = $(this).find(".ff-cvv").val();
                            var vCC_ExpMonth = $(this).find(".ff-mm").val();
                            var vCC_Year = $(this).find(".ff-yyyy").val();
                            var vAuthorizationToken = $(this).data("apikey");
                            var vCreditCardData = "card%5Bnumber%5D=" + vCC_Number + "&card%5Bexp_month%5D=" + vCC_ExpMonth + "&card%5Bexp_year%5D=" + vCC_Year + "&card%5Bcvc%5D=" + vCC_CVC;
                            Stripe_GetCardToken(vAuthorizationToken, vCreditCardData);
                            paymentReady = false;
                            return false
                        }
                    }
                })
            } else {
                paymentReady = true
            }
            if (paymentReady) {
                enableUnloadWarning = true;
                while (!paymentReady) {
                    ($).support.cors = true
                }
                var result = false;
                var validateUrl = FormBASEURL + "EngineFrame/CheckPayment";
                var formData = GenerateFormData(false);
                if (window.XDomainRequest) {
                    console.log("[SendPaymentToServer][IE][XDomainRequest]");
                    var xdr = new XDomainRequest();
                    xdr.open("POST", validateUrl, true);
                    xdr.onload = function() {
                        $("#FFPaymentToken" + currentPaymentID).remove();
                        enableUnloadWarning = false;
                        result = xdr.responseText;
                        ValidatePayment(result);
                        if (formValid) {
                            ResetSaveDraft();
                            PostFormData()
                        }
                    };
                    xdr.send(formData)
                } else {
                    if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                        VALog("[SendPaymentToServer][IE11-SF][XMLHttpRequest]");
                        var oReq = null;
                        if (Sarissa && Sarissa.originalXMLHttpRequest) {
                            oReq = new Sarissa.originalXMLHttpRequest()
                        } else {
                            if (window.XMLHttpRequest) {
                                oReq = new XMLHttpRequest()
                            }
                        }
                        oReq.open("POST", validateUrl, true);
                        oReq.onreadystatechange = function() {
                            if (oReq.readyState == 4 && oReq.status == 200) {
                                if (oReq.responseText && oReq.responseText.length > 0) {
                                    VALog("[SendPaymentToServer][IE11-SF][XMLHttpRequest][result]");
                                    $("#FFPaymentToken" + currentPaymentID).remove();
                                    enableUnloadWarning = false;
                                    result = oReq.responseText;
                                    var json = $.parseJSON(result);
                                    ValidatePayment(json);
                                    if (formValid) {
                                        ResetSaveDraft();
                                        PostFormData()
                                    }
                                } else {
                                    console.log(" Service call exception" + oReq.responseText)
                                }
                            } else {
                                if (oReq.readyState == 4 && oReq.status != 200) {
                                    console.log(" Service call status:" + oReq.status)
                                }
                            }
                        };
                        oReq.send(formData)
                    } else {
                        ($).ajax({
                            type: "POST",
                            crossDomain: true,
                            async: true,
                            url: validateUrl,
                            data: formData,
                            dataType: "json",
                            processData: false,
                            tryCount: 0,
                            retryLimit: 3,
                            success: function(responseText) {
                                $("#FFPaymentToken" + currentPaymentID).remove();
                                enableUnloadWarning = false;
                                result = responseText;
                                ValidatePayment(result);
                                if (formValid) {
                                    ResetSaveDraft();
                                    PostFormData()
                                }
                            },
                            error: function(xhr, textStatus, errorThrown) {
                                $("#FFPaymentToken" + currentPaymentID).remove();
                                enableUnloadWarning = false;
                                $("#dvFastForms #btnsubmit").prop("disabled", false);
                                if (textStatus == "timeout") {
                                    this.tryCount++;
                                    if (this.tryCount <= this.retryLimit) {
                                        ($).ajax(this);
                                        return
                                    }
                                    return
                                }
                            }
                        })
                    }
                }
            }
        } else {
            ResetSaveDraft();
            PostFormData()
        }
    }

    function Stripe_GetCardToken(pAuthorization, pFormData) {
        console.log("[FORM] [Stripe_GetCardToken] Starts");
        try {
            var sResult;
            var vRequestURL = "https://api.stripe.com/v1/tokens";
            var formData = pFormData;
            var vAuthorization = "Bearer " + pAuthorization;
            if ("ActiveXObject" in window && window.XMLHttpRequest && typeof Sarissa !== "undefined") {
                var oReq = null;
                if (typeof Sarissa !== "undefined" && Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", vRequestURL, true);
                oReq.onreadystatechange = function() {
                    if (oReq.readyState == 4 && oReq.status == 200) {
                        if (oReq.responseText && oReq.responseText.length > 0) {
                            sResult = $.parseJSON(oReq.responseText);
                            stripeResponseHandler(sResult)
                        } else {
                            console.log("[FORM] [Stripe_GetCardToken][ActiveXObject] Returned - Error");
                            console.log(oReq);
                            stripeResponseHandler($.parseJSON(oReq.responseText))
                        }
                    } else {
                        if (oReq.readyState == 4 && oReq.status != 200) {
                            console.log("[FORM] [Stripe_GetCardToken][ActiveXObject] Error Returned");
                            console.log(oReq);
                            stripeResponseHandler($.parseJSON(oReq.responseText))
                        }
                    }
                };
                oReq.setRequestHeader("Authorization", vAuthorization);
                oReq.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                oReq.send(formData)
            } else {
                $.ajax({
                    type: "POST",
                    crossDomain: true,
                    async: true,
                    url: vRequestURL,
                    headers: {
                        Authorization: vAuthorization,
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    data: formData,
                    processData: false,
                    tryCount: 0,
                    retryLimit: 3,
                    success: function(responseText) {
                        sResult = responseText;
                        stripeResponseHandler(responseText)
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        console.log("[FORM] [Stripe_GetCardToken][ajax] Error Returned");
                        stripeResponseHandler(xhr.responseJSON)
                    }
                })
            }
        } catch (error) {
            console.log("[FORM] Error unexpected! Method[Stripe_GetCardToken] Ex[Below]");
            console.log(error)
        }
    }

    function ResetSaveDraft() {
        $("#dvFastForms #isDraft").val("False");
        $("#dvFastForms #draftSaved").val("False");
        $("#dvFastForms #btndiscard").hide();
        if ($("#submitRules").length) {
            var rules = $("#submitRules").val();
            var ruleArr = rules.split(",").map(function(item) {
                return parseInt(item, 10)
            });
            evaluateRules(ruleArr)
        }
    }

    function UpdatePaymentAmountCall(thisVal, fieldNum, amountType) {
        switch (amountType) {
            case "FFRECURRINGFEE":
                UpdatePaymentAmount(thisVal, "FFRecurringFee" + fieldNum);
                break;
            case "FFAMOUNT":
                UpdatePaymentAmount(thisVal, "FFAmount" + fieldNum);
                break;
            case "FFTAXES":
                UpdatePaymentAmount(thisVal, "FFTaxes" + fieldNum);
                break;
            case "FFSHIPPING":
                UpdatePaymentAmount(thisVal, "FFShipping" + fieldNum);
                break
        }
    }
    window.UpdatePaymentAmount = function UpdatePaymentAmount(sourceVal, targetElem) {
        if ($("#" + targetElem).length > 0) {
            if (sourceVal != null && sourceVal != "") {
                if (targetElem.lastIndexOf("FFTaxes", 0) === 0) {
                    var amountVal = ToAmount($("#" + targetElem.replace("Taxes", "Amount")).text());
                    var taxVal = ToAmount(sourceVal);
                    if ($.isNumeric(amountVal) && $.isNumeric(taxVal)) {
                        $("#" + targetElem).text(ToAmount(amountVal * (taxVal / 100)))
                    } else {
                        $("#" + targetElem).text("0.00")
                    }
                } else {
                    $("#" + targetElem).text(ToAmount(sourceVal).toFixed(2))
                }
            } else {
                $("#" + targetElem).text("0.00")
            }
        }
        UpdatePaymentTotals()
    };
    window.UpdatePaymentTotals = function UpdatePaymentTotals() {
        $("#dvFastForms .ff-creditcard").each(function() {
            var fieldNum = $(this).attr("id").replace("FFCreditCard", "");
            var shippingAmount = ToAmount($("#FFShipping" + fieldNum).text());
            var taxesAmount = ToAmount($("#FFTaxes" + fieldNum).text());
            var initialAmount = ToAmount($("#FFRecurringFee" + fieldNum).text());
            var amount = ToAmount($("#FFAmount" + fieldNum).text());
            var subtotalAmount = ToAmount($("#FFSubTotalAmount" + fieldNum).text());
            var taxVal = ToAmount($("#FFTaxes" + fieldNum).data("taxes"));
            if (taxVal > 0) {
                var taxVal = ToAmount(amount * (taxVal / 100));
                taxesAmount = (isNaN(taxVal) ? 0 : taxVal);
                $("#FFTaxes" + fieldNum).text(taxesAmount.toFixed(2))
            }
            var subtotalAmount = ToAmount(ToAmount(amount, 2) + ToAmount(shippingAmount, 2) + ToAmount(taxesAmount, 2), 2).toFixed(2);
            var totalAmount = ToAmount(ToAmount(amount, 2) + ToAmount(shippingAmount, 2) + ToAmount(taxesAmount, 2) + ToAmount(initialAmount, 2)).toFixed(2);
            $("#FFSubTotalAmount" + fieldNum).text((isNaN(subtotalAmount) ? ToAmount(0, 2) : subtotalAmount));
            $("#FFTotalAmount" + fieldNum).text((isNaN(totalAmount) ? ToAmount(0, 2).toFixed(2) : totalAmount))
        })
    };
    window.EvaluatePaymentAmount = function EvaluatePaymentAmount(type, fieldNum, formula) {
        var jsFormula = replaceAll("IF(", "FFIf(", formula);
        jsFormula = replaceAll("if(", "FFIf(", jsFormula);
        jsFormula = replaceAll('["', 'ToAmount(GetPaymentAmount("', jsFormula);
        jsFormula = replaceAll("].amount", "," + fieldNum + "))", jsFormula);
        jsFormula = replaceAll("].val", "))", jsFormula);
        jsFormula = replaceAll("=", "==", jsFormula);
        jsFormula = "ToAmount(" + jsFormula + ")";
        switch (type) {
            case "SUBTOTAL":
                var totalField = $("#dvFastForms #FFAmount" + fieldNum);
                break;
            case "SHIPPING":
                var totalField = $("#dvFastForms #FFShipping" + fieldNum);
                break;
            case "TAXES":
                var totalField = $("#dvFastForms #FFTaxes" + fieldNum);
                break;
            case "INITIALAMOUNT":
                var totalField = $("#dvFastForms #FFRecurringFee" + fieldNum);
                break
        }
        var total;
        if (typeof jsep === "undefined") {
            var F = new Function("return " + jsFormula);
            total = F()
        } else {
            var jsepRuleObj = jsep(jsFormula);
            total = CallEvaluateFunction(jsepRuleObj)
        }
        if (type == "TAXES") {
            $(totalField).text(ToAmount($("#dvFastForms #FFAmount" + fieldNum, 2).text() * (ToAmount(total, 2) / 100)));
            var taxPctLabel = $("#dvFastForms #lblFFPAYMENT" + fieldNum).find(".ff-tax-percentage");
            if (taxPctLabel != undefined && parseFloat(total) > 0) {
                $(taxPctLabel).text(" (" + ToAmount(total, 2) + "%)");
                $(totalField).data("taxes", ToAmount(total, 1))
            } else {
                $(taxPctLabel).text("");
                $(totalField).data("taxes", "0.00")
            }
        } else {
            $(totalField).text((isNaN(total) ? ToAmount(0, 2) : total.toFixed(2)))
        }
        UpdatePaymentTotals()
    };

    function CallEvaluateFunction(funcObj) {
        return EvaluateFunction(funcObj)
    }

    function EvaluateFunction(funcObj) {
        try {
            switch (funcObj.type) {
                case "CallExpression":
                    return EvaluateCallExpression(funcObj);
                    break;
                case "BinaryExpression":
                    return EvaluateBinaryExpression(funcObj);
                    break;
                case "Literal":
                    return EvaluateLiteralExpression(funcObj);
                    break
            }
        } catch (err) {
            console.log("Exception [EvaluateFunction]:", funcObj, err)
        }
        return false
    }

    function EvaluateCallExpression(funcObj) {
        var argumentsArr = funcObj.arguments;
        switch (funcObj.callee.name) {
            case "ToAmount":
                return ToAmount(EvaluateFunction(argumentsArr[0]));
                break;
            case "GetPaymentAmount":
                if (argumentsArr.length == 1) {
                    return GetPaymentAmount(argumentsArr[0].value)
                } else {
                    return GetPaymentAmount(argumentsArr[0].value, argumentsArr[1].value)
                }
                break;
            case "FFIf":
                return FFIf(EvaluateFunction(argumentsArr[0]), EvaluateFunction(argumentsArr[1]), EvaluateFunction(argumentsArr[2]));
                break
        }
    }

    function EvaluateBinaryExpression(funcObj) {
        switch (funcObj.operator) {
            case "+":
                return EvaluateLeftArgumentExpression(funcObj.left) + EvaluateRightArgumentExpression(funcObj.right);
                break;
            case "-":
                return EvaluateLeftArgumentExpression(funcObj.left) - EvaluateRightArgumentExpression(funcObj.right);
                break;
            case "*":
                return EvaluateLeftArgumentExpression(funcObj.left) * EvaluateRightArgumentExpression(funcObj.right);
                break;
            case "/":
                return EvaluateLeftArgumentExpression(funcObj.left) / EvaluateRightArgumentExpression(funcObj.right);
                break;
            case "==":
                return EvaluateLeftArgumentExpression(funcObj.left) == EvaluateRightArgumentExpression(funcObj.right);
                break
        }
        return false
    }

    function EvaluateLeftArgumentExpression(funcObj) {
        return EvaluateFunction(funcObj)
    }

    function EvaluateRightArgumentExpression(funcObj) {
        return EvaluateFunction(funcObj)
    }

    function EvaluateLiteralExpression(funcObj) {
        var returnVal = funcObj.value;
        if (!isSFNumeric(funcObj.value) && returnVal.split("\\.").length > 1) {
            var fieldId = funcObj.value.replace(/\\\\/g, "");
            returnVal = document.getElementById(fieldId).value;
            console.log("returnVal:" + returnVal)
        }
        return returnVal
    }

    function isSFNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n)
    }
    window.GetPaymentAmount = function GetPaymentAmount(elemId, fieldNum) {
        var elem = document.getElementById(elemId.replace(/\\/g, ""));
        if (fieldNum == null) {
            if ($(elem).prop("tagName") == "SELECT" && $(elem).attr("multiple") != "undefined") {
                var sum = 0;
                var strResult = "";
                $("option:selected", elem).each(function() {
                    if ($.isNumeric($(this).val())) {
                        sum += ToAmount($(this).val())
                    } else {
                        strResult += $(this).val()
                    }
                });
                if (strResult != "") {
                    return strResult
                } else {
                    return ToAmount(sum)
                }
            } else {
                var elemVal = $(elem).val();
                return ($.isNumeric(elemVal) ? ToAmount(elemVal) : elemVal)
            }
        } else {
            if ($(elem).prop("tagName") == "SELECT" && $(elem).attr("multiple") == "undefined") {
                return ToAmount($("option:selected", elem).attr("data-amount-" + fieldNum), 2)
            } else {
                if ($(elem).prop("tagName") == "SELECT" && $(elem).attr("multiple") != "undefined") {
                    var sum = 0;
                    $("option:selected", elem).each(function() {
                        sum += ToAmount($(this).attr("data-amount-" + fieldNum))
                    });
                    return ToAmount(sum)
                } else {
                    if ($(elem).attr("data-vatt") == "BOOLEAN" && $(elem).is(":checked")) {
                        return ToAmount($(elem).attr("data-true-amount" + fieldNum), 2)
                    } else {
                        if ($(elem).attr("data-vatt") == "BOOLEAN" && !$(elem).is(":checked")) {
                            return ToAmount($(elem).attr("data-false-amount" + fieldNum), 2)
                        } else {
                            return ToAmount($(elem).attr("data-amount-" + fieldNum))
                        }
                    }
                }
            }
        }
    };
    Number.prototype.round = function(p) {
        p = p || 10;
        return parseFloat(this.toFixed(p))
    };
    window.GetValue = function GetValue(itm) {
        if (itm != undefined) {
            var val = itm;
            if (jQuery.type(itm) == "array") {
                val = 0;
                for (var i = 0; i < itm.length; i++) {
                    val += ToAmount(itm[i])
                }
            }
            return ToAmount(val)
        } else {
            return 0
        }
    };
    window.GetElem = function GetElem(elem) {
        if ($(elem).prop("tagName") == "SELECT") {
            return $("option:selected", elem)
        } else {
            return elem
        }
    };
    window.ToAmount = function ToAmount(itm, places) {
        if ($.isNumeric(itm)) {
            return parseFloat(itm).round(places)
        } else {
            if (itm == undefined) {
                return parseFloat(0).round(places)
            } else {
                return itm
            }
        }
    };
    window.escapeRegExp = function escapeRegExp(str) {
        return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")
    };
    window.replaceAll = function replaceAll(find, replace, str) {
        return str.replace(new RegExp(escapeRegExp(find), "g"), replace)
    };

    function ValidateCaptcha(json) {
        for (var i = 0; i < json.length; i++) {
            if (!json[i].isValid) {
                var elem = $("#dvFastForms #" + json[i].captchaID + "_Captcha");
                ShowValidationMessage($(elem).parent().parent(), "CAPTCHA");
                $("#dvFastForms #btnsubmit").prop("disabled", false);
                InitializeCaptcha();
                formValid = false
            }
        }
    }

    function ValidatePayment(json) {
        for (var i = 0; i < json.length; i++) {
            var elem = $("#dvFastForms #lbl" + json[i].paymentFieldId);
            if (!json[i].success) {
                var errorMsg = json[i].errorMessage;
                if (!isNullOrEmpty(errorMsg) && errorMsg == "INVALID_COUNTRY") {
                    errorMsg = ffPaymentError_InvalidCountry
                }
                if (json[i].errorSource !== undefined && json[i].errorSource == "FormCustom") {
                    elem = $("#dvFastForms #" + json[i].paymentFieldId.replace(/\./g, "\\."));
                    ShowValidationMessage($(elem), "GENERAL", errorMsg)
                } else {
                    ShowValidationMessage($(elem), "PAYMENT", errorMsg)
                }
                formValid = false;
                $("#dvFastForms #btnsubmit").prop("disabled", false)
            } else {
                if (json[i].transactionIdField != "" && json[i].transactionIdField != null) {
                    var transIdElem = $("#dvFastForms #" + json[i].transactionIdField.replace(/\./g, "\\."));
                    if (transIdElem.length > 0) {
                        $(transIdElem).val(json[i].transactionIdValue)
                    }
                }
                if (json[i].totalAmountField != "" && json[i].totalAmountField != null) {
                    var totalAmountElem = $("#dvFastForms #" + json[i].totalAmountField.replace(/\./g, "\\."));
                    if (totalAmountElem.length > 0) {
                        $(totalAmountElem).val(json[i].totalAmountValue)
                    }
                }
            }
        }
    }

    function LogEvent(eventName, details) {
        ($).support.cors = true;
        var result = false;
        var logUrl = FormBASEURL + "EngineFrame/LogEvent";
        if (window.location.protocol == "http:" && logUrl.lastIndexOf("https:", 0) === 0) {
            logUrl = logUrl.replace("https:", "http:")
        }
        if (window.XDomainRequest) {
            var xdr = new XDomainRequest();
            xdr.open("POST", logUrl, true);
            xdr.send("orgId=" + $("#dvFastForms #txtOrgId").val() + "&sessionId=" + $("#dvFastForms #txtSessionID").val() + "&eventName=" + encodeURIComponent(eventName) + "&details=" + encodeURIComponent(details))
        } else {
            if (("ActiveXObject" in window) && window.XMLHttpRequest && (typeof(Sarissa) !== "undefined")) {
                console.log("[LogEvent][IE11-SF][XMLHttpRequest]");
                var oReq = null;
                if (Sarissa && Sarissa.originalXMLHttpRequest) {
                    oReq = new Sarissa.originalXMLHttpRequest()
                } else {
                    if (window.XMLHttpRequest) {
                        oReq = new XMLHttpRequest()
                    }
                }
                oReq.open("POST", logUrl, true);
                oReq.send("orgId=" + $("#dvFastForms #txtOrgId").val() + "&sessionId=" + $("#dvFastForms #txtSessionID").val() + "&eventName=" + encodeURIComponent(eventName) + "&details=" + encodeURIComponent(details))
            } else {
                ($).ajax({
                    global: false,
                    async: true,
                    type: "POST",
                    url: logUrl,
                    crossDomain: true,
                    data: "orgId=" + $("#dvFastForms #txtOrgId").val() + "&sessionId=" + $("#dvFastForms #txtSessionID").val() + "&eventName=" + encodeURIComponent(eventName) + "&details=" + encodeURIComponent(details),
                    dataType: "text",
                    processData: false,
                    tryCount: 0,
                    retryLimit: 3
                })
            }
        }
    }

    function isOlderBrowser() {
        var browser = ($("#browser").attr("class"));
        return (browser == "ie6" || browser == "ie7" || browser == "ie8" || browser == "ie9")
    }

    function RedirectToUrl(url) {
        var target = window;
        if (inIframe()) {
            target = parent.window
        }
        if (url.indexOf("http://") === 0 || url.indexOf("https://") === 0) {
            target.location.href = url
        } else {
            target.location.href = "http://" + url
        }
    }

    function GetName(elem) {
        var name = elem.attr("name");
        if (name == undefined || name == null) {
            name = elem.attr("id")
        }
        if (name == undefined || name == null) {
            name = elem.attr("class")
        }
        return name
    }

    function AddToArray(arr, name, val) {
        var i = arr.length;
        arr[i] = [];
        arr[i][0] = name;
        arr[i][1] = val
    }

    function GetParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "))
    }

    function LoadCSS(href) {
        var loadCssLink = document.createElement("link");
        loadCssLink.rel = "stylesheet";
        loadCssLink.type = "text/css";
        loadCssLink.href = href;
        $("#" + intialSwiftFormsConfig.RootElementId).prepend(loadCssLink)
    }

    function LoadJS(src) {
        var jsLink = document.createElement("script");
        jsLink.type = "text/javascript";
        jsLink.src = src;
        $("#" + intialSwiftFormsConfig.RootElementId).prepend(jsLink)
    }

    function getEmbedCodeParamsRegular() {
        var embedCodeParamArray = {};
        var embedCodeQueryString = $("#jsFastForms").attr("src").split("?");
        if (embedCodeQueryString.length == 2) {
            var itemArr = embedCodeQueryString[1].split("&");
            for (i = 0; i < itemArr.length; i++) {
                var qArr = itemArr[i].split("=");
                embedCodeParamArray[qArr[0]] = decodeURIComponent(qArr[1])
            }
        }
        return embedCodeParamArray
    }

    function getSFSrcAttribute(elemId, attributeName) {
        var srcElem = $("#" + elemId);
        return srcElem !== undefined && $(srcElem).attr(attributeName) === undefined ? "" : $(srcElem).attr(attributeName)
    }

    function getEmbedCodeParams() {
        var embedCodeParamArray = {};
        var embedCodeQueryString = getSFSrcAttribute("jsFastFormsWrapper", "data-ffparam");
        var jsSrc = getSFSrcAttribute("jsFastForms", "src");
        if (jsSrc != "" && jsSrc.toLowerCase().indexOf(".salesforce.com") < 0) {
            embedCodeParamArray = getEmbedCodeParamsRegular()
        }
        if (embedCodeQueryString !== undefined && embedCodeQueryString != "") {
            var itemArr = embedCodeQueryString.split("&");
            for (i = 0; i < itemArr.length; i++) {
                var qArr = itemArr[i].split("=");
                embedCodeParamArray[qArr[0]] = decodeURIComponent(qArr[1])
            }
        } else {
            console.log("Formstack Parameters" + embedCodeQueryString)
        }
        return embedCodeParamArray
    }

    function inIframe() {
        try {
            if (typeof window.FSEnableOldFrameCheck != "undefined") {
                return window.self !== window.top
            } else {
                return window.self.name == "ffEmbedFrame"
            }
        } catch (e) {
            return true
        }
    }
    var vActiveLog = true;

    function VALog(pDescription) {
        if (vActiveLog) {
            console.log(pDescription)
        }
    }

    function Main() {
        $(document).ready(function($) {
            window.onbeforeunload = UnloadWarning;
            var isSourceLightning = false;
            if (intialSwiftFormsConfig !== null && intialSwiftFormsConfig.IsSourceLightning !== undefined && intialSwiftFormsConfig.IsSourceLightning) {
                ffDialogPositionOption = {
                    my: "left top",
                    at: "left top",
                    of: "#dvBannerHTML"
                };
                isSourceLightning = true
            }
            LoadCSS(CDNResourceRoot + "styles/jquery-ui.css");
            LoadCSS(CDNResourceRoot + "styles/jquery-ui-timepicker-addon.css");
            LoadCSS(CDNResourceRoot + "styles/select2.css");
            LoadCSS(CDNResourceRoot + "styles/ui.jqgrid.css");
            var htmlFrame = FormBASEURL + "EngineFrame/Index";
            var pageQueryString = location.search.replace("?", "");
            var embedCodeParamArray = getEmbedCodeParams();
            if (embedCodeParamArray.d != undefined && embedCodeParamArray.d != "") {
                if (isSourceLightning) {
                    LoadJS(FormBASEURL + "EngineFrame/JSResource/" + embedCodeParamArray.d)
                }
                var url = htmlFrame + "?d=" + encodeURIComponent(embedCodeParamArray.d);
                if (embedCodeParamArray.dp != undefined && embedCodeParamArray.dp != "") {
                    url += "&dp=" + encodeURIComponent(embedCodeParamArray.dp)
                }
                if (embedCodeParamArray.ucId != undefined && embedCodeParamArray.ucId != "") {
                    url += "&ucId=" + encodeURIComponent(embedCodeParamArray.ucId)
                }
                if (embedCodeParamArray.ft != undefined && embedCodeParamArray.ft != "") {
                    url += "&ft=" + encodeURIComponent(embedCodeParamArray.ft)
                }
                if (embedCodeParamArray.iu != undefined && embedCodeParamArray.iu != "") {
                    url += "&iu=" + encodeURIComponent(embedCodeParamArray.iu)
                }
                if (embedCodeParamArray.cut != undefined && embedCodeParamArray.cut != "") {
                    url += "&cut=" + encodeURIComponent(embedCodeParamArray.cut)
                }
                if (embedCodeParamArray.cid != undefined && embedCodeParamArray.cid != "") {
                    url += "&cid=" + encodeURIComponent(embedCodeParamArray.cid)
                }
                if (embedCodeParamArray.ctype != undefined && embedCodeParamArray.ctype != "") {
                    url += "&ctype=" + encodeURIComponent(embedCodeParamArray.ctype)
                }
                if (embedCodeParamArray.cviewmode != undefined && embedCodeParamArray.cviewmode != "") {
                    url += "&cviewmode=" + encodeURIComponent(embedCodeParamArray.cviewmode)
                }
                if (isSourceLightning && embedCodeParamArray.ls != undefined && embedCodeParamArray.ls != "") {
                    url += "&ls=" + encodeURIComponent(embedCodeParamArray.ls)
                }
                url += location.search.replace("?", "&");
                GetHTML(url)
            } else {
                InitializeForm();
                InitializeCaptcha()
            }
        })
    }

    function fixedEncodeURIComponent(str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
            return "%" + c.charCodeAt(0).toString(16)
        })
    }
})(fs);